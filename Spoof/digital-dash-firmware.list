
digital-dash-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b480  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800b650  0800b650  0001b650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b900  0800b900  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800b900  0800b900  0001b900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b908  0800b908  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b908  0800b908  0001b908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b90c  0800b90c  0001b90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800b910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  20000204  0800bb14  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009dc  0800bb14  000209dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016494  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003695  00000000  00000000  000366c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a0  00000000  00000000  00039d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001100  00000000  00000000  0003b000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024c01  00000000  00000000  0003c100  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010483  00000000  00000000  00060d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9d75  00000000  00000000  00071184  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014aef9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005658  00000000  00000000  0014af74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b638 	.word	0x0800b638

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	0800b638 	.word	0x0800b638

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <MX_ADC1_Init+0x98>)
 8000f9c:	4a21      	ldr	r2, [pc, #132]	; (8001024 <MX_ADC1_Init+0x9c>)
 8000f9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fa6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <MX_ADC1_Init+0x98>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fae:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fca:	4a17      	ldr	r2, [pc, #92]	; (8001028 <MX_ADC1_Init+0xa0>)
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fea:	f001 fb7b 	bl	80026e4 <HAL_ADC_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ff4:	f000 fe92 	bl	8001d1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_ADC1_Init+0xa4>)
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_ADC1_Init+0x98>)
 800100a:	f001 fd39 	bl	8002a80 <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001014:	f000 fe82 	bl	8001d1c <Error_Handler>
  }

}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000774 	.word	0x20000774
 8001024:	40012000 	.word	0x40012000
 8001028:	0f000001 	.word	0x0f000001
 800102c:	10000012 	.word	0x10000012

08001030 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0b      	ldr	r2, [pc, #44]	; (800106c <HAL_ADC_MspInit+0x3c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d10d      	bne.n	800105e <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_ADC_MspInit+0x40>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <HAL_ADC_MspInit+0x40>)
 800104c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <HAL_ADC_MspInit+0x40>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40012000 	.word	0x40012000
 8001070:	40023800 	.word	0x40023800

08001074 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_CAN1_Init+0x64>)
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <MX_CAN1_Init+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_CAN1_Init+0x64>)
 8001080:	2204      	movs	r2, #4
 8001082:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_CAN1_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_CAN1_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_CAN1_Init+0x64>)
 8001092:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8001096:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_CAN1_Init+0x64>)
 800109a:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800109e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <MX_CAN1_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_CAN1_Init+0x64>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_CAN1_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_CAN1_Init+0x64>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_CAN1_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_CAN1_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_CAN1_Init+0x64>)
 80010c6:	f001 ff09 	bl	8002edc <HAL_CAN_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80010d0:	f000 fe24 	bl	8001d1c <Error_Handler>
  }

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200007bc 	.word	0x200007bc
 80010dc:	40006400 	.word	0x40006400

080010e0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a25      	ldr	r2, [pc, #148]	; (8001194 <HAL_CAN_MspInit+0xb4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d144      	bne.n	800118c <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_CAN_MspInit+0xb8>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a23      	ldr	r2, [pc, #140]	; (8001198 <HAL_CAN_MspInit+0xb8>)
 800110c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <HAL_CAN_MspInit+0xb8>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_CAN_MspInit+0xb8>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <HAL_CAN_MspInit+0xb8>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_CAN_MspInit+0xb8>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800113a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800114c:	2309      	movs	r3, #9
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4811      	ldr	r0, [pc, #68]	; (800119c <HAL_CAN_MspInit+0xbc>)
 8001158:	f002 fe2a 	bl	8003db0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2013      	movs	r0, #19
 8001162:	f002 fdcc 	bl	8003cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001166:	2013      	movs	r0, #19
 8001168:	f002 fde5 	bl	8003d36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2014      	movs	r0, #20
 8001172:	f002 fdc4 	bl	8003cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001176:	2014      	movs	r0, #20
 8001178:	f002 fddd 	bl	8003d36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2015      	movs	r0, #21
 8001182:	f002 fdbc 	bl	8003cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001186:	2015      	movs	r0, #21
 8001188:	f002 fdd5 	bl	8003d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800118c:	bf00      	nop
 800118e:	3728      	adds	r7, #40	; 0x28
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40006400 	.word	0x40006400
 8001198:	40023800 	.word	0x40023800
 800119c:	40020400 	.word	0x40020400

080011a0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b89      	ldr	r3, [pc, #548]	; (80013e0 <MX_GPIO_Init+0x240>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a88      	ldr	r2, [pc, #544]	; (80013e0 <MX_GPIO_Init+0x240>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b86      	ldr	r3, [pc, #536]	; (80013e0 <MX_GPIO_Init+0x240>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b82      	ldr	r3, [pc, #520]	; (80013e0 <MX_GPIO_Init+0x240>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a81      	ldr	r2, [pc, #516]	; (80013e0 <MX_GPIO_Init+0x240>)
 80011dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b7f      	ldr	r3, [pc, #508]	; (80013e0 <MX_GPIO_Init+0x240>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b7b      	ldr	r3, [pc, #492]	; (80013e0 <MX_GPIO_Init+0x240>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a7a      	ldr	r2, [pc, #488]	; (80013e0 <MX_GPIO_Init+0x240>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b78      	ldr	r3, [pc, #480]	; (80013e0 <MX_GPIO_Init+0x240>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b74      	ldr	r3, [pc, #464]	; (80013e0 <MX_GPIO_Init+0x240>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a73      	ldr	r2, [pc, #460]	; (80013e0 <MX_GPIO_Init+0x240>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b71      	ldr	r3, [pc, #452]	; (80013e0 <MX_GPIO_Init+0x240>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b6d      	ldr	r3, [pc, #436]	; (80013e0 <MX_GPIO_Init+0x240>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a6c      	ldr	r2, [pc, #432]	; (80013e0 <MX_GPIO_Init+0x240>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b6a      	ldr	r3, [pc, #424]	; (80013e0 <MX_GPIO_Init+0x240>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FAN_EN_Pin|PWR_HOLD_Pin|DEBUG_LED_3_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f242 0106 	movw	r1, #8198	; 0x2006
 8001248:	4866      	ldr	r0, [pc, #408]	; (80013e4 <MX_GPIO_Init+0x244>)
 800124a:	f002 ff5b 	bl	8004104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_1_Pin|DEBUG_LED_2_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2130      	movs	r1, #48	; 0x30
 8001252:	4865      	ldr	r0, [pc, #404]	; (80013e8 <MX_GPIO_Init+0x248>)
 8001254:	f002 ff56 	bl	8004104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CAN_STBY_Pin|LCD_DR_EN_Pin|LCD_DR_ENR_Pin|PI_SHUTDOWN_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f24c 0141 	movw	r1, #49217	; 0xc041
 800125e:	4863      	ldr	r0, [pc, #396]	; (80013ec <MX_GPIO_Init+0x24c>)
 8001260:	f002 ff50 	bl	8004104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USB_EN_Pin|PI_PWR_EN_Pin, GPIO_PIN_SET);
 8001264:	2201      	movs	r2, #1
 8001266:	210a      	movs	r1, #10
 8001268:	4860      	ldr	r0, [pc, #384]	; (80013ec <MX_GPIO_Init+0x24c>)
 800126a:	f002 ff4b 	bl	8004104 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FAN_EN_Pin|PWR_HOLD_Pin|DEBUG_LED_3_Pin;
 800126e:	f242 0306 	movw	r3, #8198	; 0x2006
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4857      	ldr	r0, [pc, #348]	; (80013e4 <MX_GPIO_Init+0x244>)
 8001288:	f002 fd92 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_3
 800128c:	f24d 73f9 	movw	r3, #55289	; 0xd7f9
 8001290:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001292:	2303      	movs	r3, #3
 8001294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4850      	ldr	r0, [pc, #320]	; (80013e4 <MX_GPIO_Init+0x244>)
 80012a2:	f002 fd85 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_11
 80012a6:	f641 1303 	movw	r3, #6403	; 0x1903
 80012aa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ac:	2303      	movs	r3, #3
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	484b      	ldr	r0, [pc, #300]	; (80013e8 <MX_GPIO_Init+0x248>)
 80012bc:	f002 fd78 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PI_GPIO32_Pin|PI_GPIO33_Pin;
 80012c0:	230c      	movs	r3, #12
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	4845      	ldr	r0, [pc, #276]	; (80013e8 <MX_GPIO_Init+0x248>)
 80012d4:	f002 fd6c 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DEBUG_LED_1_Pin|DEBUG_LED_2_Pin;
 80012d8:	2330      	movs	r3, #48	; 0x30
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	483e      	ldr	r0, [pc, #248]	; (80013e8 <MX_GPIO_Init+0x248>)
 80012f0:	f002 fd5e 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin|USB_EN_Pin;
 80012f4:	2303      	movs	r3, #3
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4838      	ldr	r0, [pc, #224]	; (80013ec <MX_GPIO_Init+0x24c>)
 800130c:	f002 fd50 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB4
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4
 8001310:	f243 0394 	movw	r3, #12436	; 0x3094
 8001314:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4831      	ldr	r0, [pc, #196]	; (80013ec <MX_GPIO_Init+0x24c>)
 8001326:	f002 fd43 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_DR_EN_Pin|LCD_DR_ENR_Pin|PI_SHUTDOWN_Pin;
 800132a:	f24c 0340 	movw	r3, #49216	; 0xc040
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001334:	2302      	movs	r3, #2
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	482a      	ldr	r0, [pc, #168]	; (80013ec <MX_GPIO_Init+0x24c>)
 8001344:	f002 fd34 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO34_RPI_FAN_EN_Pin;
 8001348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001352:	2302      	movs	r3, #2
 8001354:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO34_RPI_FAN_EN_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4822      	ldr	r0, [pc, #136]	; (80013e8 <MX_GPIO_Init+0x248>)
 800135e:	f002 fd27 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CARD_DETECT_SW_Pin;
 8001362:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <MX_GPIO_Init+0x250>)
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136c:	2301      	movs	r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CARD_DETECT_SW_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	481b      	ldr	r0, [pc, #108]	; (80013e4 <MX_GPIO_Init+0x244>)
 8001378:	f002 fd1a 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800137c:	2304      	movs	r3, #4
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001380:	2303      	movs	r3, #3
 8001382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	4819      	ldr	r0, [pc, #100]	; (80013f4 <MX_GPIO_Init+0x254>)
 8001390:	f002 fd0e 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PI_PWR_EN_Pin;
 8001394:	2308      	movs	r3, #8
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001398:	2311      	movs	r3, #17
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4810      	ldr	r0, [pc, #64]	; (80013ec <MX_GPIO_Init+0x24c>)
 80013ac:	f002 fd00 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO35_RPI_BKLT_Pin;
 80013b0:	2320      	movs	r3, #32
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO35_RPI_BKLT_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	480a      	ldr	r0, [pc, #40]	; (80013ec <MX_GPIO_Init+0x24c>)
 80013c4:	f002 fcf4 	bl	8003db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	2028      	movs	r0, #40	; 0x28
 80013ce:	f002 fc96 	bl	8003cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013d2:	2028      	movs	r0, #40	; 0x28
 80013d4:	f002 fcaf 	bl	8003d36 <HAL_NVIC_EnableIRQ>

}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	; 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020800 	.word	0x40020800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	10310000 	.word	0x10310000
 80013f4:	40020c00 	.word	0x40020c00

080013f8 <System_Power_Hold>:
	SYS_PWR_HOLD_DISABLE,
	SYS_PWR_HOLD_ENABLE
} SYS_PWR_HOLD, *PSYS_PWR_HOLD;

static void System_Power_Hold( SYS_PWR_HOLD state )
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
	if( state == SYS_PWR_HOLD_ENABLE )
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d105      	bne.n	8001414 <System_Power_Hold+0x1c>
		HAL_GPIO_WritePin( PWR_HOLD_GPIO_Port, PWR_HOLD_Pin, PWR_HOLD_Active );
 8001408:	2201      	movs	r2, #1
 800140a:	2102      	movs	r1, #2
 800140c:	4806      	ldr	r0, [pc, #24]	; (8001428 <System_Power_Hold+0x30>)
 800140e:	f002 fe79 	bl	8004104 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin( PWR_HOLD_GPIO_Port, PWR_HOLD_Pin, PWR_HOLD_Inactive );
}
 8001412:	e004      	b.n	800141e <System_Power_Hold+0x26>
		HAL_GPIO_WritePin( PWR_HOLD_GPIO_Port, PWR_HOLD_Pin, PWR_HOLD_Inactive );
 8001414:	2200      	movs	r2, #0
 8001416:	2102      	movs	r1, #2
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <System_Power_Hold+0x30>)
 800141a:	f002 fe73 	bl	8004104 <HAL_GPIO_WritePin>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40020800 	.word	0x40020800

0800142c <flash_led>:
    DEBUG_LED_2,
    DEBUG_LED_3,
} DEBUG_LED, *PDEBUG_LED;

static void flash_led( DEBUG_LED led )
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
    if( led == DEBUG_LED_1 )
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d108      	bne.n	800144e <flash_led+0x22>
    {
        LED1_Tick = 50;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <flash_led+0x58>)
 800143e:	2232      	movs	r2, #50	; 0x32
 8001440:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin( DEBUG_LED_1_GPIO_Port, DEBUG_LED_1_Pin, GPIO_PIN_SET );
 8001442:	2201      	movs	r2, #1
 8001444:	2110      	movs	r1, #16
 8001446:	4810      	ldr	r0, [pc, #64]	; (8001488 <flash_led+0x5c>)
 8001448:	f002 fe5c 	bl	8004104 <HAL_GPIO_WritePin>
    else if( led == DEBUG_LED_3 )
    {
        LED3_Tick = 50;
        HAL_GPIO_WritePin( DEBUG_LED_3_GPIO_Port, DEBUG_LED_3_Pin, GPIO_PIN_SET );
    }
}
 800144c:	e016      	b.n	800147c <flash_led+0x50>
    else if( led == DEBUG_LED_2 )
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d108      	bne.n	8001466 <flash_led+0x3a>
        LED2_Tick = 50;
 8001454:	4b0d      	ldr	r3, [pc, #52]	; (800148c <flash_led+0x60>)
 8001456:	2232      	movs	r2, #50	; 0x32
 8001458:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin( DEBUG_LED_2_GPIO_Port, DEBUG_LED_2_Pin, GPIO_PIN_SET );
 800145a:	2201      	movs	r2, #1
 800145c:	2120      	movs	r1, #32
 800145e:	480a      	ldr	r0, [pc, #40]	; (8001488 <flash_led+0x5c>)
 8001460:	f002 fe50 	bl	8004104 <HAL_GPIO_WritePin>
}
 8001464:	e00a      	b.n	800147c <flash_led+0x50>
    else if( led == DEBUG_LED_3 )
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d107      	bne.n	800147c <flash_led+0x50>
        LED3_Tick = 50;
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <flash_led+0x64>)
 800146e:	2232      	movs	r2, #50	; 0x32
 8001470:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin( DEBUG_LED_3_GPIO_Port, DEBUG_LED_3_Pin, GPIO_PIN_SET );
 8001472:	2201      	movs	r2, #1
 8001474:	2104      	movs	r1, #4
 8001476:	4807      	ldr	r0, [pc, #28]	; (8001494 <flash_led+0x68>)
 8001478:	f002 fe44 	bl	8004104 <HAL_GPIO_WritePin>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000224 	.word	0x20000224
 8001488:	40020000 	.word	0x40020000
 800148c:	20000228 	.word	0x20000228
 8001490:	2000022c 	.word	0x2000022c
 8001494:	40020800 	.word	0x40020800

08001498 <HAL_CAN_TxMailbox0CompleteCallback>:


void HAL_CAN_TxMailbox0CompleteCallback( CAN_HandleTypeDef *hcan )
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    can_tx_mailbox_status &= ~CAN_TX_MAILBOX0;
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 0301 	bic.w	r3, r3, #1
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	20000238 	.word	0x20000238

080014bc <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback( CAN_HandleTypeDef *hcan )
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
    can_tx_mailbox_status &= ~CAN_TX_MAILBOX1;
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f023 0302 	bic.w	r3, r3, #2
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	20000238 	.word	0x20000238

080014e0 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback( CAN_HandleTypeDef *hcan )
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    can_tx_mailbox_status &= ~CAN_TX_MAILBOX2;
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f023 0304 	bic.w	r3, r3, #4
 80014f0:	4a03      	ldr	r2, [pc, #12]	; (8001500 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	20000238 	.word	0x20000238

08001504 <can_filter>:

HAL_StatusTypeDef can_filter( CAN_HandleTypeDef *pcan, uint32_t id, uint32_t mask, uint32_t format, uint32_t filterBank, uint32_t FIFO  )
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08e      	sub	sp, #56	; 0x38
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
	/* Verify correct format */
    if ( (format == CAN_ID_STD) || (format == CAN_ID_EXT) )
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <can_filter+0x1a>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	2b04      	cmp	r3, #4
 800151c:	d147      	bne.n	80015ae <can_filter+0xaa>
    {
        /* Declare a CAN filter configuration */
        CAN_FilterTypeDef  sFilterConfig;

        /* Verify the filter bank is possible */
        if ( ( filterBank >= 0 ) && ( filterBank <= 13 ) )
 800151e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001520:	2b0d      	cmp	r3, #13
 8001522:	d809      	bhi.n	8001538 <can_filter+0x34>
            sFilterConfig.FilterBank = filterBank;
 8001524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
        else
            return -1;

        sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
        sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800152c:	2301      	movs	r3, #1
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (format == CAN_ID_STD) {
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d119      	bne.n	800156a <can_filter+0x66>
 8001536:	e001      	b.n	800153c <can_filter+0x38>
            return -1;
 8001538:	23ff      	movs	r3, #255	; 0xff
 800153a:	e039      	b.n	80015b0 <can_filter+0xac>
            sFilterConfig.FilterIdHigh = ((id << 5) | (id >> (32 - 5))) & 0xFFFF;
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8001542:	b29b      	uxth	r3, r3
 8001544:	613b      	str	r3, [r7, #16]
            sFilterConfig.FilterIdLow =  (id >> (11-3)) & 0xFFF8;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	0a1a      	lsrs	r2, r3, #8
 800154a:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800154e:	4013      	ands	r3, r2
 8001550:	617b      	str	r3, [r7, #20]
            sFilterConfig.FilterMaskIdHigh = ((mask << 5) | (mask >> (32-5))) & 0xFFFF;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8001558:	b29b      	uxth	r3, r3
 800155a:	61bb      	str	r3, [r7, #24]
            sFilterConfig.FilterMaskIdLow = (mask >> (11-3)) & 0xFFF8;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	0a1a      	lsrs	r2, r3, #8
 8001560:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001564:	4013      	ands	r3, r2
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	e011      	b.n	800158e <can_filter+0x8a>
        } else { // format == CANExtended
            sFilterConfig.FilterIdHigh = id >> 13; // EXTID[28:13]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	0b5b      	lsrs	r3, r3, #13
 800156e:	613b      	str	r3, [r7, #16]
            sFilterConfig.FilterIdLow = (0xFFFF & (id << 3)) | (1 << 2); // EXTID[12:0] + IDE
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	b29b      	uxth	r3, r3
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	617b      	str	r3, [r7, #20]
            sFilterConfig.FilterMaskIdHigh = mask >> 13;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	0b5b      	lsrs	r3, r3, #13
 8001580:	61bb      	str	r3, [r7, #24]
            sFilterConfig.FilterMaskIdLow = (0xFFFF & (mask << 3)) | (1 << 2);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	b29b      	uxth	r3, r3
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	61fb      	str	r3, [r7, #28]
        }

        sFilterConfig.FilterFIFOAssignment = FIFO;
 800158e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001590:	623b      	str	r3, [r7, #32]
        sFilterConfig.FilterActivation = ENABLE;
 8001592:	2301      	movs	r3, #1
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
        sFilterConfig.FilterBank = filterBank;
 8001596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
        sFilterConfig.SlaveStartFilterBank = 0x12;
 800159a:	2312      	movs	r3, #18
 800159c:	637b      	str	r3, [r7, #52]	; 0x34

        return HAL_CAN_ConfigFilter(pcan, &sFilterConfig);
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	4619      	mov	r1, r3
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f001 fd95 	bl	80030d4 <HAL_CAN_ConfigFilter>
 80015aa:	4603      	mov	r3, r0
 80015ac:	e000      	b.n	80015b0 <can_filter+0xac>
    }
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3738      	adds	r7, #56	; 0x38
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <process_can_packet>:

void process_can_packet( CAN_HandleTypeDef *hcan, uint32_t fifo )
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08c      	sub	sp, #48	; 0x30
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
    flash_led( DEBUG_LED_1 );
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff ff32 	bl	800142c <flash_led>
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_buf[8];
    HAL_CAN_GetRxMessage( hcan, fifo, &rx_header, rx_buf );
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	f107 0214 	add.w	r2, r7, #20
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f001 ff7d 	bl	80034d2 <HAL_CAN_GetRxMessage>

    if( rx_header.IDE == CAN_ID_STD )
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d107      	bne.n	80015ee <process_can_packet+0x36>
        DigitalDash_Add_CAN_Packet( rx_header.StdId ,rx_buf);
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	f107 020c 	add.w	r2, r7, #12
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f005 fd61 	bl	80070b0 <DigitalDash_Add_CAN_Packet>

    can_rx_mailbox_status |= fifo;
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <process_can_packet+0x4c>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	4a03      	ldr	r2, [pc, #12]	; (8001604 <process_can_packet+0x4c>)
 80015f8:	6013      	str	r3, [r2, #0]
}
 80015fa:	bf00      	nop
 80015fc:	3730      	adds	r7, #48	; 0x30
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000023c 	.word	0x2000023c

08001608 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback( CAN_HandleTypeDef *hcan )
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
    process_can_packet( hcan, CAN_RX_FIFO0 );
 8001610:	2100      	movs	r1, #0
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffd0 	bl	80015b8 <process_can_packet>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback( CAN_HandleTypeDef *hcan )
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    process_can_packet( hcan, CAN_RX_FIFO1 );
 8001628:	2101      	movs	r1, #1
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ffc4 	bl	80015b8 <process_can_packet>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <LCD_Brightness>:

static void LCD_Brightness( uint8_t brightness)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
    if( gpio_LCD_override )
 8001642:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <LCD_Brightness+0xb8>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d029      	beq.n	800169e <LCD_Brightness+0x66>
    {
        if( BITCHECK( system_flags, LCD_BACKLIGHT_EN ) == 0 )
 800164a:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <LCD_Brightness+0xbc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	2b00      	cmp	r3, #0
 8001654:	d147      	bne.n	80016e6 <LCD_Brightness+0xae>
        {
            /* Backlight is enabled */
            BITSET( system_flags, LCD_BACKLIGHT_EN );
 8001656:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <LCD_Brightness+0xbc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f043 0310 	orr.w	r3, r3, #16
 800165e:	4a25      	ldr	r2, [pc, #148]	; (80016f4 <LCD_Brightness+0xbc>)
 8001660:	6013      	str	r3, [r2, #0]

            brightness = 255;
 8001662:	23ff      	movs	r3, #255	; 0xff
 8001664:	71fb      	strb	r3, [r7, #7]

            BKLT_TIM.Instance->CCR1 = brightness;
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <LCD_Brightness+0xc0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	79fa      	ldrb	r2, [r7, #7]
 800166c:	635a      	str	r2, [r3, #52]	; 0x34
            HAL_GPIO_WritePin(LCD_DR_ENR_GPIO_Port, LCD_DR_ENR_Pin, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001674:	4821      	ldr	r0, [pc, #132]	; (80016fc <LCD_Brightness+0xc4>)
 8001676:	f002 fd45 	bl	8004104 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LCD_DR_EN_GPIO_Port, LCD_DR_EN_Pin, GPIO_PIN_SET);
 800167a:	2201      	movs	r2, #1
 800167c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001680:	481e      	ldr	r0, [pc, #120]	; (80016fc <LCD_Brightness+0xc4>)
 8001682:	f002 fd3f 	bl	8004104 <HAL_GPIO_WritePin>
            if( (BKLT_TIM.Instance->CR1 & TIM_CR1_CEN) == 0 )
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <LCD_Brightness+0xc0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d128      	bne.n	80016e6 <LCD_Brightness+0xae>
            	HAL_TIM_PWM_Start(PBKLT_TIM, BKLT_CHANNEL);
 8001694:	2100      	movs	r1, #0
 8001696:	4818      	ldr	r0, [pc, #96]	; (80016f8 <LCD_Brightness+0xc0>)
 8001698:	f003 fb20 	bl	8004cdc <HAL_TIM_PWM_Start>
        HAL_GPIO_WritePin(LCD_DR_ENR_GPIO_Port, LCD_DR_ENR_Pin, GPIO_PIN_SET);
        HAL_GPIO_WritePin(LCD_DR_EN_GPIO_Port, LCD_DR_EN_Pin, GPIO_PIN_SET);
        if( (BKLT_TIM.Instance->CR1 & TIM_CR1_CEN) == 0 )
        	HAL_TIM_PWM_Start(PBKLT_TIM, BKLT_CHANNEL);
    }
}
 800169c:	e023      	b.n	80016e6 <LCD_Brightness+0xae>
    else if( brightness == 0x00 )
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d020      	beq.n	80016e6 <LCD_Brightness+0xae>
        BITSET( system_flags, LCD_BACKLIGHT_EN );
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <LCD_Brightness+0xbc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f043 0310 	orr.w	r3, r3, #16
 80016ac:	4a11      	ldr	r2, [pc, #68]	; (80016f4 <LCD_Brightness+0xbc>)
 80016ae:	6013      	str	r3, [r2, #0]
        BKLT_TIM.Instance->CCR1 = brightness;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <LCD_Brightness+0xc0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	79fa      	ldrb	r2, [r7, #7]
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34
        HAL_GPIO_WritePin(LCD_DR_ENR_GPIO_Port, LCD_DR_ENR_Pin, GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016be:	480f      	ldr	r0, [pc, #60]	; (80016fc <LCD_Brightness+0xc4>)
 80016c0:	f002 fd20 	bl	8004104 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LCD_DR_EN_GPIO_Port, LCD_DR_EN_Pin, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016ca:	480c      	ldr	r0, [pc, #48]	; (80016fc <LCD_Brightness+0xc4>)
 80016cc:	f002 fd1a 	bl	8004104 <HAL_GPIO_WritePin>
        if( (BKLT_TIM.Instance->CR1 & TIM_CR1_CEN) == 0 )
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <LCD_Brightness+0xc0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <LCD_Brightness+0xae>
        	HAL_TIM_PWM_Start(PBKLT_TIM, BKLT_CHANNEL);
 80016de:	2100      	movs	r1, #0
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <LCD_Brightness+0xc0>)
 80016e2:	f003 fafb 	bl	8004cdc <HAL_TIM_PWM_Start>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000235 	.word	0x20000235
 80016f4:	20000240 	.word	0x20000240
 80016f8:	20000924 	.word	0x20000924
 80016fc:	40020400 	.word	0x40020400

08001700 <USB_Power>:

static void USB_Power( USB_PWR_STATE state )
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
    if( state == USB_PWR_ENABLED )
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <USB_Power+0x1c>
        HAL_GPIO_WritePin( USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_SET );
 8001710:	2201      	movs	r2, #1
 8001712:	2102      	movs	r1, #2
 8001714:	4806      	ldr	r0, [pc, #24]	; (8001730 <USB_Power+0x30>)
 8001716:	f002 fcf5 	bl	8004104 <HAL_GPIO_WritePin>
    else
        HAL_GPIO_WritePin( USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET );
}
 800171a:	e004      	b.n	8001726 <USB_Power+0x26>
        HAL_GPIO_WritePin( USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET );
 800171c:	2200      	movs	r2, #0
 800171e:	2102      	movs	r1, #2
 8001720:	4803      	ldr	r0, [pc, #12]	; (8001730 <USB_Power+0x30>)
 8001722:	f002 fcef 	bl	8004104 <HAL_GPIO_WritePin>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40020400 	.word	0x40020400

08001734 <Pi_Power>:

static void Pi_Power( HOST_PWR_STATE state )
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
    if( state == HOST_PWR_ENABLED )
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d110      	bne.n	8001766 <Pi_Power+0x32>
    {
    	HAL_GPIO_WritePin( PI_SHUTDOWN_GPIO_Port, PI_SHUTDOWN_Pin, GPIO_PIN_RESET );
 8001744:	2200      	movs	r2, #0
 8001746:	2140      	movs	r1, #64	; 0x40
 8001748:	4818      	ldr	r0, [pc, #96]	; (80017ac <Pi_Power+0x78>)
 800174a:	f002 fcdb 	bl	8004104 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin( PI_PWR_EN_GPIO_Port, PI_PWR_EN_Pin, GPIO_PIN_SET );
 800174e:	2201      	movs	r2, #1
 8001750:	2108      	movs	r1, #8
 8001752:	4816      	ldr	r0, [pc, #88]	; (80017ac <Pi_Power+0x78>)
 8001754:	f002 fcd6 	bl	8004104 <HAL_GPIO_WritePin>
        BITSET(system_flags, PI_PWR_EN);
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <Pi_Power+0x7c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	4a13      	ldr	r2, [pc, #76]	; (80017b0 <Pi_Power+0x7c>)
 8001762:	6013      	str	r3, [r2, #0]
			htim8.Instance->CNT = 0;
			HAL_TIM_Base_Start_IT( PTR_POWER_HOLD_TIM );
    	}
    }

}
 8001764:	e01d      	b.n	80017a2 <Pi_Power+0x6e>
    	if( !(POWER_HOLD_TIM.Instance->CR1 & TIM_CR1_CEN) )
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <Pi_Power+0x80>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d116      	bne.n	80017a2 <Pi_Power+0x6e>
    		LCD_Brightness( 0 );
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff ff5f 	bl	8001638 <LCD_Brightness>
        	HAL_GPIO_WritePin( PI_SHUTDOWN_GPIO_Port, PI_SHUTDOWN_Pin, GPIO_PIN_SET );
 800177a:	2201      	movs	r2, #1
 800177c:	2140      	movs	r1, #64	; 0x40
 800177e:	480b      	ldr	r0, [pc, #44]	; (80017ac <Pi_Power+0x78>)
 8001780:	f002 fcc0 	bl	8004104 <HAL_GPIO_WritePin>
        	System_Power_Hold( SYS_PWR_HOLD_ENABLE );
 8001784:	2001      	movs	r0, #1
 8001786:	f7ff fe37 	bl	80013f8 <System_Power_Hold>
			__HAL_TIM_CLEAR_FLAG( PTR_POWER_HOLD_TIM, TIM_IT_UPDATE );
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <Pi_Power+0x80>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f06f 0201 	mvn.w	r2, #1
 8001792:	611a      	str	r2, [r3, #16]
			htim8.Instance->CNT = 0;
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <Pi_Power+0x80>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT( PTR_POWER_HOLD_TIM );
 800179c:	4805      	ldr	r0, [pc, #20]	; (80017b4 <Pi_Power+0x80>)
 800179e:	f003 fa44 	bl	8004c2a <HAL_TIM_Base_Start_IT>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40020400 	.word	0x40020400
 80017b0:	20000240 	.word	0x20000240
 80017b4:	200007e4 	.word	0x200007e4

080017b8 <Get_SD_Card_State>:

static void Get_SD_Card_State( void )
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
    if( HAL_GPIO_ReadPin( CARD_DETECT_SW_GPIO_Port, CARD_DETECT_SW_Pin ) == GPIO_PIN_RESET )
 80017bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <Get_SD_Card_State+0x40>)
 80017c2:	f002 fc87 	bl	80040d4 <HAL_GPIO_ReadPin>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <Get_SD_Card_State+0x28>
    {
        BITSET(system_flags, SD_CARD_PRESENT);
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <Get_SD_Card_State+0x44>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	4a09      	ldr	r2, [pc, #36]	; (80017fc <Get_SD_Card_State+0x44>)
 80017d6:	6013      	str	r3, [r2, #0]
        dd_update_sd_card_state( SD_PRESENT );
 80017d8:	2001      	movs	r0, #1
 80017da:	f005 fc1b 	bl	8007014 <dd_update_sd_card_state>
    } else
    {
        BITCLEAR(system_flags, SD_CARD_PRESENT);
        dd_update_sd_card_state( SD_NOT_PRESENT );
    }
}
 80017de:	e008      	b.n	80017f2 <Get_SD_Card_State+0x3a>
        BITCLEAR(system_flags, SD_CARD_PRESENT);
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <Get_SD_Card_State+0x44>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <Get_SD_Card_State+0x44>)
 80017ea:	6013      	str	r3, [r2, #0]
        dd_update_sd_card_state( SD_NOT_PRESENT );
 80017ec:	2000      	movs	r0, #0
 80017ee:	f005 fc11 	bl	8007014 <dd_update_sd_card_state>
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40020800 	.word	0x40020800
 80017fc:	20000240 	.word	0x20000240

08001800 <Fan_Control>:

static void Fan_Control( FAN_PWR_STATE state )
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
            HAL_GPIO_WritePin( FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_RESET );
            HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
            break;
        }
        #else
        if( state > FAN_OFF )
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d010      	beq.n	8001832 <Fan_Control+0x32>
        {
            /* Enable power to the Fan */
            HAL_GPIO_WritePin( FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_SET );
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001816:	480e      	ldr	r0, [pc, #56]	; (8001850 <Fan_Control+0x50>)
 8001818:	f002 fc74 	bl	8004104 <HAL_GPIO_WritePin>
            htim2.Instance->CCR3 = htim2.Instance->ARR;
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <Fan_Control+0x54>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <Fan_Control+0x54>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001826:	63da      	str	r2, [r3, #60]	; 0x3c
            HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001828:	2108      	movs	r1, #8
 800182a:	480a      	ldr	r0, [pc, #40]	; (8001854 <Fan_Control+0x54>)
 800182c:	f003 fa56 	bl	8004cdc <HAL_TIM_PWM_Start>
            HAL_GPIO_WritePin( FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_RESET );
            HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
        }

        #endif
}
 8001830:	e009      	b.n	8001846 <Fan_Control+0x46>
            HAL_GPIO_WritePin( FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_RESET );
 8001832:	2200      	movs	r2, #0
 8001834:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001838:	4805      	ldr	r0, [pc, #20]	; (8001850 <Fan_Control+0x50>)
 800183a:	f002 fc63 	bl	8004104 <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800183e:	2108      	movs	r1, #8
 8001840:	4804      	ldr	r0, [pc, #16]	; (8001854 <Fan_Control+0x54>)
 8001842:	f003 fa89 	bl	8004d58 <HAL_TIM_PWM_Stop>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40020800 	.word	0x40020800
 8001854:	200008e4 	.word	0x200008e4

08001858 <Rasp_Pi_Tx>:

static uint8_t Rasp_Pi_Tx( uint8_t *data, uint8_t len )
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
	flash_led(DEBUG_LED_3);
 8001864:	2002      	movs	r0, #2
 8001866:	f7ff fde1 	bl	800142c <flash_led>
    if( HAL_UART_Transmit_IT(PI_UART, data, len) == HAL_OK )
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	b29b      	uxth	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4806      	ldr	r0, [pc, #24]	; (800188c <Rasp_Pi_Tx+0x34>)
 8001874:	f004 fb27 	bl	8005ec6 <HAL_UART_Transmit_IT>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <Rasp_Pi_Tx+0x2a>
        return 1;
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <Rasp_Pi_Tx+0x2c>
    else
        return 0;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000964 	.word	0x20000964

08001890 <Add_CAN_Filter>:

static void Add_CAN_Filter( uint16_t id )
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af02      	add	r7, sp, #8
 8001896:	4603      	mov	r3, r0
 8001898:	80fb      	strh	r3, [r7, #6]
	if( CAN_Filter_Count < MAX_NUM_CAN_FILTERS )
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <Add_CAN_Filter+0x48>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b0d      	cmp	r3, #13
 80018a0:	d815      	bhi.n	80018ce <Add_CAN_Filter+0x3e>
	{
		if( can_filter( &hcan1, id, 0x7FF, CAN_ID_STD, CAN_Filter_Count++, CAN_FILTER_FIFO0 ) != HAL_OK )
 80018a2:	88f9      	ldrh	r1, [r7, #6]
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <Add_CAN_Filter+0x48>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	b2d0      	uxtb	r0, r2
 80018ac:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <Add_CAN_Filter+0x48>)
 80018ae:	7010      	strb	r0, [r2, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	2300      	movs	r3, #0
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	9200      	str	r2, [sp, #0]
 80018b8:	2300      	movs	r3, #0
 80018ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80018be:	4807      	ldr	r0, [pc, #28]	; (80018dc <Add_CAN_Filter+0x4c>)
 80018c0:	f7ff fe20 	bl	8001504 <can_filter>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <Add_CAN_Filter+0x3e>
			Error_Handler();
 80018ca:	f000 fa27 	bl	8001d1c <Error_Handler>
	}
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000234 	.word	0x20000234
 80018dc:	200007bc 	.word	0x200007bc

080018e0 <ECU_CAN_Tx>:

static uint8_t ECU_CAN_Tx( uint8_t data[], uint8_t len )
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08c      	sub	sp, #48	; 0x30
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]

	CAN_TxHeaderTypeDef Header = {
 80018ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018f6:	61fb      	str	r3, [r7, #28]
 80018f8:	2300      	movs	r3, #0
 80018fa:	623b      	str	r3, [r7, #32]
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
 8001904:	2300      	movs	r3, #0
 8001906:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	           .IDE                = CAN_ID_STD,
	           .RTR                = CAN_RTR_DATA,
	           .TransmitGlobalTime = DISABLE
	};

    uint32_t pTxMailbox = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]

    /* Copy the buffer */
    uint8_t tx_buf[8];
    memcpy(tx_buf, data, 8);
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	6810      	ldr	r0, [r2, #0]
 8001916:	6851      	ldr	r1, [r2, #4]
 8001918:	c303      	stmia	r3!, {r0, r1}

    /* TODO check for free mailbox */
    if( HAL_CAN_AddTxMessage( ECU_CAN, &Header, tx_buf, &pTxMailbox ) == HAL_OK )
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	f107 020c 	add.w	r2, r7, #12
 8001922:	f107 0118 	add.w	r1, r7, #24
 8001926:	480b      	ldr	r0, [pc, #44]	; (8001954 <ECU_CAN_Tx+0x74>)
 8001928:	f001 fcf8 	bl	800331c <HAL_CAN_AddTxMessage>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d107      	bne.n	8001942 <ECU_CAN_Tx+0x62>
    {
    	/* Log which mailbox sent the packet */
    	can_tx_mailbox_status |= pTxMailbox;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <ECU_CAN_Tx+0x78>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	4313      	orrs	r3, r2
 800193a:	4a07      	ldr	r2, [pc, #28]	; (8001958 <ECU_CAN_Tx+0x78>)
 800193c:	6013      	str	r3, [r2, #0]
        return 1;
 800193e:	2301      	movs	r3, #1
 8001940:	e003      	b.n	800194a <ECU_CAN_Tx+0x6a>
    }
    else
    {
    	flash_led(DEBUG_LED_2);
 8001942:	2001      	movs	r0, #1
 8001944:	f7ff fd72 	bl	800142c <flash_led>
        return 0;
 8001948:	2300      	movs	r3, #0
    }
}
 800194a:	4618      	mov	r0, r3
 800194c:	3730      	adds	r7, #48	; 0x30
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200007bc 	.word	0x200007bc
 8001958:	20000238 	.word	0x20000238

0800195c <Digitaldash_Init>:

void Digitaldash_Init( void )
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
    DIGITALDASH_CONFIG config;
    config.dd_ecu_tx            = &ECU_CAN_Tx;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <Digitaldash_Init+0x40>)
 8001964:	60bb      	str	r3, [r7, #8]
    config.dd_fan_ctrl          = &Fan_Control;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <Digitaldash_Init+0x44>)
 8001968:	613b      	str	r3, [r7, #16]
    config.dd_get_sd_card_state = &Get_SD_Card_State;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <Digitaldash_Init+0x48>)
 800196c:	603b      	str	r3, [r7, #0]
    config.dd_host_ctrl         = &Pi_Power;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <Digitaldash_Init+0x4c>)
 8001970:	617b      	str	r3, [r7, #20]
    config.dd_ke_tx             = &Rasp_Pi_Tx;
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <Digitaldash_Init+0x50>)
 8001974:	607b      	str	r3, [r7, #4]
    config.dd_set_backlight     = &LCD_Brightness;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <Digitaldash_Init+0x54>)
 8001978:	60fb      	str	r3, [r7, #12]
    config.dd_usb               = &USB_Power;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <Digitaldash_Init+0x58>)
 800197c:	61bb      	str	r3, [r7, #24]
    config.dd_filter            = &Add_CAN_Filter;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <Digitaldash_Init+0x5c>)
 8001980:	61fb      	str	r3, [r7, #28]

    if( digitaldash_init( &config ) != DIGITALDASH_INIT_OK )
 8001982:	463b      	mov	r3, r7
 8001984:	4618      	mov	r0, r3
 8001986:	f005 fc1d 	bl	80071c4 <digitaldash_init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b0a      	cmp	r3, #10
 800198e:	d001      	beq.n	8001994 <Digitaldash_Init+0x38>
        Error_Handler();
 8001990:	f000 f9c4 	bl	8001d1c <Error_Handler>
}
 8001994:	bf00      	nop
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	080018e1 	.word	0x080018e1
 80019a0:	08001801 	.word	0x08001801
 80019a4:	080017b9 	.word	0x080017b9
 80019a8:	08001735 	.word	0x08001735
 80019ac:	08001859 	.word	0x08001859
 80019b0:	08001639 	.word	0x08001639
 80019b4:	08001701 	.word	0x08001701
 80019b8:	08001891 	.word	0x08001891

080019bc <get_mcu_internal_temp>:
#define TEMP30_CAL_VALUE                                            ((uint16_t*)((uint32_t)0x1FFF7A2C))
#define TEMP110                                                     110.0f
#define TEMP30                                                      30.0f

int32_t get_mcu_internal_temp( void )
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
		int32_t temperature = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
		float sensorValue = 0;
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	603b      	str	r3, [r7, #0]


		HAL_ADC_Start(&hadc1);
 80019cc:	4822      	ldr	r0, [pc, #136]	; (8001a58 <get_mcu_internal_temp+0x9c>)
 80019ce:	f000 fecd 	bl	800276c <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80019d2:	2164      	movs	r1, #100	; 0x64
 80019d4:	4820      	ldr	r0, [pc, #128]	; (8001a58 <get_mcu_internal_temp+0x9c>)
 80019d6:	f000 ffc2 	bl	800295e <HAL_ADC_PollForConversion>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d133      	bne.n	8001a48 <get_mcu_internal_temp+0x8c>
		{
		  sensorValue = (float)HAL_ADC_GetValue(&hadc1);
 80019e0:	481d      	ldr	r0, [pc, #116]	; (8001a58 <get_mcu_internal_temp+0x9c>)
 80019e2:	f001 f840 	bl	8002a66 <HAL_ADC_GetValue>
 80019e6:	ee07 0a90 	vmov	s15, r0
 80019ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ee:	edc7 7a00 	vstr	s15, [r7]
		  HAL_ADC_Stop(&hadc1);
 80019f2:	4819      	ldr	r0, [pc, #100]	; (8001a58 <get_mcu_internal_temp+0x9c>)
 80019f4:	f000 ff80 	bl	80028f8 <HAL_ADC_Stop>
		  temperature = (int32_t)((TEMP110 - TEMP30) / ((float)(*TEMP110_CAL_VALUE) - (float)(*TEMP30_CAL_VALUE)) * (sensorValue - (float)(*TEMP30_CAL_VALUE)) + TEMP30);
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <get_mcu_internal_temp+0xa0>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <get_mcu_internal_temp+0xa4>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a14:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001a64 <get_mcu_internal_temp+0xa8>
 8001a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a1c:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <get_mcu_internal_temp+0xa4>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a28:	edd7 6a00 	vldr	s13, [r7]
 8001a2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a34:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001a38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a40:	ee17 3a90 	vmov	r3, s15
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	e002      	b.n	8001a4e <get_mcu_internal_temp+0x92>
		}
		else
		{
		  temperature = -273;
 8001a48:	f46f 7388 	mvn.w	r3, #272	; 0x110
 8001a4c:	607b      	str	r3, [r7, #4]
		}

		return temperature;
 8001a4e:	687b      	ldr	r3, [r7, #4]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000774 	.word	0x20000774
 8001a5c:	1fff7a2e 	.word	0x1fff7a2e
 8001a60:	1fff7a2c 	.word	0x1fff7a2c
 8001a64:	42a00000 	.word	0x42a00000

08001a68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim )
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	if( htim == PTR_POWER_HOLD_TIM )
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d10d      	bne.n	8001a94 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		System_Power_Hold( SYS_PWR_HOLD_DISABLE );
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff fcbd 	bl	80013f8 <System_Power_Hold>
        HAL_GPIO_WritePin( PI_PWR_EN_GPIO_Port, PI_PWR_EN_Pin, GPIO_PIN_RESET );
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2108      	movs	r1, #8
 8001a82:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a84:	f002 fb3e 	bl	8004104 <HAL_GPIO_WritePin>
        BITCLEAR(system_flags, PI_PWR_EN);
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 0302 	bic.w	r3, r3, #2
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001a92:	6013      	str	r3, [r2, #0]
	}
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200007e4 	.word	0x200007e4
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	20000240 	.word	0x20000240

08001aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aac:	f000 fdc8 	bl	8002640 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ab0:	f000 f85c 	bl	8001b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab4:	f7ff fb74 	bl	80011a0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001ab8:	f7ff fadc 	bl	8001074 <MX_CAN1_Init>
  MX_TIM3_Init();
 8001abc:	f000 fa9a 	bl	8001ff4 <MX_TIM3_Init>
  MX_TIM14_Init();
 8001ac0:	f000 fba2 	bl	8002208 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8001ac4:	f000 fd18 	bl	80024f8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001ac8:	f7ff fa5e 	bl	8000f88 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001acc:	f000 fa1a 	bl	8001f04 <MX_TIM2_Init>
  MX_TIM8_Init();
 8001ad0:	f000 fadc 	bl	800208c <MX_TIM8_Init>
  MX_TIM13_Init();
 8001ad4:	f000 fb50 	bl	8002178 <MX_TIM13_Init>
  MX_TIM11_Init();
 8001ad8:	f000 fb2a 	bl	8002130 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start( &htim2, TIM_CHANNEL_3 );
 8001adc:	2108      	movs	r1, #8
 8001ade:	481e      	ldr	r0, [pc, #120]	; (8001b58 <main+0xb0>)
 8001ae0:	f003 f8fc 	bl	8004cdc <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin( FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_RESET );
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aea:	481c      	ldr	r0, [pc, #112]	; (8001b5c <main+0xb4>)
 8001aec:	f002 fb0a 	bl	8004104 <HAL_GPIO_WritePin>

  /* Prevent unwanted power-down */
  System_Power_Hold( SYS_PWR_HOLD_DISABLE );
 8001af0:	2000      	movs	r0, #0
 8001af2:	f7ff fc81 	bl	80013f8 <System_Power_Hold>

  //Fan_Control( FAN_PWR_ENABLED );

  if( get_mcu_internal_temp() > MCU_THERMAL_THRESH )
 8001af6:	f7ff ff61 	bl	80019bc <get_mcu_internal_temp>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b32      	cmp	r3, #50	; 0x32
 8001afe:	dd08      	ble.n	8001b12 <main+0x6a>
  {
	  Fan_Control( FAN_MAX );
 8001b00:	2003      	movs	r0, #3
 8001b02:	f7ff fe7d 	bl	8001800 <Fan_Control>

	  while( get_mcu_internal_temp() > MCU_THERMAL_THRESH ) { }
 8001b06:	bf00      	nop
 8001b08:	f7ff ff58 	bl	80019bc <get_mcu_internal_temp>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b32      	cmp	r3, #50	; 0x32
 8001b10:	dcfa      	bgt.n	8001b08 <main+0x60>
  {
      if( can_filter( &hcan1, 0x0000, 0x0000, CAN_ID_STD, 0, CAN_FILTER_FIFO0 ) != HAL_OK )
          Error_Handler();
  }
#else
      Add_CAN_Filter( 0x7E8 );
 8001b12:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
 8001b16:	f7ff febb 	bl	8001890 <Add_CAN_Filter>
#endif

  if( HAL_CAN_Start( &hcan1 ) != HAL_OK )
 8001b1a:	4811      	ldr	r0, [pc, #68]	; (8001b60 <main+0xb8>)
 8001b1c:	f001 fbba 	bl	8003294 <HAL_CAN_Start>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <main+0x82>
      Error_Handler();
 8001b26:	f000 f8f9 	bl	8001d1c <Error_Handler>

#if CAN_IT
  if( HAL_CAN_ActivateNotification( &hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK )
 8001b2a:	2113      	movs	r1, #19
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <main+0xb8>)
 8001b2e:	f001 fde3 	bl	80036f8 <HAL_CAN_ActivateNotification>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <main+0x94>
      Error_Handler();
 8001b38:	f000 f8f0 	bl	8001d1c <Error_Handler>
#endif

  Digitaldash_Init();
 8001b3c:	f7ff ff0e 	bl	800195c <Digitaldash_Init>


#if LCD_ALWAYS_ON
  LCD_Brightness( 255 );
 8001b40:	20ff      	movs	r0, #255	; 0xff
 8001b42:	f7ff fd79 	bl	8001638 <LCD_Brightness>
#endif

  /* Configure the UART intetupt */
  HAL_UART_Receive_IT( PI_UART, &rx_byte, 1 );
 8001b46:	2201      	movs	r2, #1
 8001b48:	4906      	ldr	r1, [pc, #24]	; (8001b64 <main+0xbc>)
 8001b4a:	4807      	ldr	r0, [pc, #28]	; (8001b68 <main+0xc0>)
 8001b4c:	f004 fa00 	bl	8005f50 <HAL_UART_Receive_IT>
        process_can_packet( ECU_CAN, CAN_RX_FIFO0 );
    else if( HAL_CAN_GetRxFifoFillLevel( ECU_CAN, CAN_RX_FIFO1 ) > 0 )
        process_can_packet( ECU_CAN, CAN_RX_FIFO1 );
#endif

    digitaldash_service();
 8001b50:	f005 fc40 	bl	80073d4 <digitaldash_service>
 8001b54:	e7fc      	b.n	8001b50 <main+0xa8>
 8001b56:	bf00      	nop
 8001b58:	200008e4 	.word	0x200008e4
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	200007bc 	.word	0x200007bc
 8001b64:	20000220 	.word	0x20000220
 8001b68:	20000964 	.word	0x20000964

08001b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b094      	sub	sp, #80	; 0x50
 8001b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	2234      	movs	r2, #52	; 0x34
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f007 fd04 	bl	8009588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <SystemClock_Config+0xd4>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	4a29      	ldr	r2, [pc, #164]	; (8001c40 <SystemClock_Config+0xd4>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba0:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <SystemClock_Config+0xd4>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bac:	2300      	movs	r3, #0
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <SystemClock_Config+0xd8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bb8:	4a22      	ldr	r2, [pc, #136]	; (8001c44 <SystemClock_Config+0xd8>)
 8001bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <SystemClock_Config+0xd8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001be0:	2304      	movs	r3, #4
 8001be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001be4:	2354      	movs	r3, #84	; 0x54
 8001be6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001be8:	2302      	movs	r3, #2
 8001bea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bec:	2302      	movs	r3, #2
 8001bee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 fd91 	bl	8004720 <HAL_RCC_OscConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c04:	f000 f88a 	bl	8001d1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c08:	230f      	movs	r3, #15
 8001c0a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	2102      	movs	r1, #2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f002 fac4 	bl	80041b4 <HAL_RCC_ClockConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001c32:	f000 f873 	bl	8001d1c <Error_Handler>
  }
}
 8001c36:	bf00      	nop
 8001c38:	3750      	adds	r7, #80	; 0x50
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40007000 	.word	0x40007000

08001c48 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	if( huart == PI_UART )
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <HAL_UART_RxCpltCallback+0x2c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d109      	bne.n	8001c6c <HAL_UART_RxCpltCallback+0x24>
	{
		/* Pass the UART byte to the Digital Dash */
		DigitalDash_Add_UART_byte( rx_byte );
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_UART_RxCpltCallback+0x30>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f005 fa01 	bl	8007064 <DigitalDash_Add_UART_byte>

		/* Wait for the next byte */
		HAL_UART_Receive_IT( PI_UART, &rx_byte, 1 );
 8001c62:	2201      	movs	r2, #1
 8001c64:	4904      	ldr	r1, [pc, #16]	; (8001c78 <HAL_UART_RxCpltCallback+0x30>)
 8001c66:	4803      	ldr	r0, [pc, #12]	; (8001c74 <HAL_UART_RxCpltCallback+0x2c>)
 8001c68:	f004 f972 	bl	8005f50 <HAL_UART_Receive_IT>
	}
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000964 	.word	0x20000964
 8001c78:	20000220 	.word	0x20000220

08001c7c <HAL_GetTick>:

uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return Sys_Tick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000230 	.word	0x20000230

08001c94 <HAL_IncTick>:

void HAL_IncTick(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	Sys_Tick++;
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_IncTick+0x70>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <HAL_IncTick+0x70>)
 8001ca0:	6013      	str	r3, [r2, #0]

    digitaldash_tick();
 8001ca2:	f005 fc0d 	bl	80074c0 <digitaldash_tick>

    if( LED1_Tick == 0 )
 8001ca6:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_IncTick+0x74>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <HAL_IncTick+0x26>
        HAL_GPIO_WritePin( DEBUG_LED_1_GPIO_Port, DEBUG_LED_1_Pin, GPIO_PIN_RESET );
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2110      	movs	r1, #16
 8001cb2:	4816      	ldr	r0, [pc, #88]	; (8001d0c <HAL_IncTick+0x78>)
 8001cb4:	f002 fa26 	bl	8004104 <HAL_GPIO_WritePin>
 8001cb8:	e004      	b.n	8001cc4 <HAL_IncTick+0x30>
    else
        LED1_Tick--;
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_IncTick+0x74>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	4a11      	ldr	r2, [pc, #68]	; (8001d08 <HAL_IncTick+0x74>)
 8001cc2:	6013      	str	r3, [r2, #0]

    if( LED2_Tick == 0 )
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_IncTick+0x7c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d105      	bne.n	8001cd8 <HAL_IncTick+0x44>
        HAL_GPIO_WritePin( DEBUG_LED_2_GPIO_Port, DEBUG_LED_2_Pin, GPIO_PIN_RESET );
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2120      	movs	r1, #32
 8001cd0:	480e      	ldr	r0, [pc, #56]	; (8001d0c <HAL_IncTick+0x78>)
 8001cd2:	f002 fa17 	bl	8004104 <HAL_GPIO_WritePin>
 8001cd6:	e004      	b.n	8001ce2 <HAL_IncTick+0x4e>
    else
        LED2_Tick--;
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_IncTick+0x7c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <HAL_IncTick+0x7c>)
 8001ce0:	6013      	str	r3, [r2, #0]

    if( LED3_Tick == 0 )
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_IncTick+0x80>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d105      	bne.n	8001cf6 <HAL_IncTick+0x62>
        HAL_GPIO_WritePin( DEBUG_LED_3_GPIO_Port, DEBUG_LED_3_Pin, GPIO_PIN_RESET );
 8001cea:	2200      	movs	r2, #0
 8001cec:	2104      	movs	r1, #4
 8001cee:	480a      	ldr	r0, [pc, #40]	; (8001d18 <HAL_IncTick+0x84>)
 8001cf0:	f002 fa08 	bl	8004104 <HAL_GPIO_WritePin>
    else
        LED3_Tick--;
}
 8001cf4:	e004      	b.n	8001d00 <HAL_IncTick+0x6c>
        LED3_Tick--;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <HAL_IncTick+0x80>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <HAL_IncTick+0x80>)
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000230 	.word	0x20000230
 8001d08:	20000224 	.word	0x20000224
 8001d0c:	40020000 	.word	0x40020000
 8001d10:	20000228 	.word	0x20000228
 8001d14:	2000022c 	.word	0x2000022c
 8001d18:	40020800 	.word	0x40020800

08001d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

    while( 1 )
    {
        HAL_GPIO_TogglePin( DEBUG_LED_1_GPIO_Port, DEBUG_LED_1_Pin );
 8001d20:	2110      	movs	r1, #16
 8001d22:	4806      	ldr	r0, [pc, #24]	; (8001d3c <Error_Handler+0x20>)
 8001d24:	f002 fa07 	bl	8004136 <HAL_GPIO_TogglePin>
        LED1_Tick = 60;
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <Error_Handler+0x24>)
 8001d2a:	223c      	movs	r2, #60	; 0x3c
 8001d2c:	601a      	str	r2, [r3, #0]
        while( LED1_Tick != 0 ) { /* Blocking */ }
 8001d2e:	bf00      	nop
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <Error_Handler+0x24>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1fb      	bne.n	8001d30 <Error_Handler+0x14>
        HAL_GPIO_TogglePin( DEBUG_LED_1_GPIO_Port, DEBUG_LED_1_Pin );
 8001d38:	e7f2      	b.n	8001d20 <Error_Handler+0x4>
 8001d3a:	bf00      	nop
 8001d3c:	40020000 	.word	0x40020000
 8001d40:	20000224 	.word	0x20000224

08001d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d58:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a08      	ldr	r2, [pc, #32]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800

08001d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <HardFault_Handler+0x4>

08001da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <MemManage_Handler+0x4>

08001dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <BusFault_Handler+0x4>

08001db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <UsageFault_Handler+0x4>

08001dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de8:	f7ff ff54 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <CAN1_TX_IRQHandler+0x10>)
 8001df6:	f001 fca5 	bl	8003744 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200007bc 	.word	0x200007bc

08001e04 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <CAN1_RX0_IRQHandler+0x10>)
 8001e0a:	f001 fc9b 	bl	8003744 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200007bc 	.word	0x200007bc

08001e18 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <CAN1_RX1_IRQHandler+0x10>)
 8001e1e:	f001 fc91 	bl	8003744 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200007bc 	.word	0x200007bc

08001e2c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001e32:	f003 f81e 	bl	8004e72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200008a4 	.word	0x200008a4

08001e40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <USART1_IRQHandler+0x10>)
 8001e46:	f004 f8d9 	bl	8005ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000964 	.word	0x20000964

08001e54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001e58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e5c:	f002 f986 	bl	800416c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001e68:	4803      	ldr	r0, [pc, #12]	; (8001e78 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8001e6a:	f003 f802 	bl	8004e72 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8001e6e:	4803      	ldr	r0, [pc, #12]	; (8001e7c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8001e70:	f002 ffff 	bl	8004e72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200007e4 	.word	0x200007e4
 8001e7c:	20000864 	.word	0x20000864

08001e80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <_sbrk+0x50>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <_sbrk+0x16>
		heap_end = &end;
 8001e90:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <_sbrk+0x50>)
 8001e92:	4a10      	ldr	r2, [pc, #64]	; (8001ed4 <_sbrk+0x54>)
 8001e94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <_sbrk+0x50>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <_sbrk+0x50>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	466a      	mov	r2, sp
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d907      	bls.n	8001eba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001eaa:	f007 fb43 	bl	8009534 <__errno>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	e006      	b.n	8001ec8 <_sbrk+0x48>
	}

	heap_end += incr;
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <_sbrk+0x50>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	4a03      	ldr	r2, [pc, #12]	; (8001ed0 <_sbrk+0x50>)
 8001ec4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000244 	.word	0x20000244
 8001ed4:	200009e0 	.word	0x200009e0

08001ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <SystemInit+0x28>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee2:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <SystemInit+0x28>)
 8001ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <SystemInit+0x28>)
 8001eee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ef2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08e      	sub	sp, #56	; 0x38
 8001f08:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f18:	f107 0320 	add.w	r3, r7, #32
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
 8001f30:	615a      	str	r2, [r3, #20]
 8001f32:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001f34:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <MX_TIM2_Init+0xec>)
 8001f36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <MX_TIM2_Init+0xec>)
 8001f3e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001f42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <MX_TIM2_Init+0xec>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001f4a:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <MX_TIM2_Init+0xec>)
 8001f4c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f52:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <MX_TIM2_Init+0xec>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f58:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <MX_TIM2_Init+0xec>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f5e:	4824      	ldr	r0, [pc, #144]	; (8001ff0 <MX_TIM2_Init+0xec>)
 8001f60:	f002 fe38 	bl	8004bd4 <HAL_TIM_Base_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001f6a:	f7ff fed7 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f78:	4619      	mov	r1, r3
 8001f7a:	481d      	ldr	r0, [pc, #116]	; (8001ff0 <MX_TIM2_Init+0xec>)
 8001f7c:	f003 f9e4 	bl	8005348 <HAL_TIM_ConfigClockSource>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001f86:	f7ff fec9 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f8a:	4819      	ldr	r0, [pc, #100]	; (8001ff0 <MX_TIM2_Init+0xec>)
 8001f8c:	f002 fe71 	bl	8004c72 <HAL_TIM_PWM_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001f96:	f7ff fec1 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fa2:	f107 0320 	add.w	r3, r7, #32
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4811      	ldr	r0, [pc, #68]	; (8001ff0 <MX_TIM2_Init+0xec>)
 8001faa:	f003 fee6 	bl	8005d7a <HAL_TIMEx_MasterConfigSynchronization>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001fb4:	f7ff feb2 	bl	8001d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb8:	2360      	movs	r3, #96	; 0x60
 8001fba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2500-1;
 8001fbc:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8001fc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	2208      	movs	r2, #8
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4807      	ldr	r0, [pc, #28]	; (8001ff0 <MX_TIM2_Init+0xec>)
 8001fd2:	f003 f8f3 	bl	80051bc <HAL_TIM_PWM_ConfigChannel>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001fdc:	f7ff fe9e 	bl	8001d1c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <MX_TIM2_Init+0xec>)
 8001fe2:	f000 fa29 	bl	8002438 <HAL_TIM_MspPostInit>

}
 8001fe6:	bf00      	nop
 8001fe8:	3738      	adds	r7, #56	; 0x38
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200008e4 	.word	0x200008e4

08001ff4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffa:	f107 0308 	add.w	r3, r7, #8
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002008:	463b      	mov	r3, r7
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002010:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <MX_TIM3_Init+0x90>)
 8002012:	4a1d      	ldr	r2, [pc, #116]	; (8002088 <MX_TIM3_Init+0x94>)
 8002014:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45;
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <MX_TIM3_Init+0x90>)
 8002018:	222d      	movs	r2, #45	; 0x2d
 800201a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <MX_TIM3_Init+0x90>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <MX_TIM3_Init+0x90>)
 8002024:	2200      	movs	r2, #0
 8002026:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002028:	4b16      	ldr	r3, [pc, #88]	; (8002084 <MX_TIM3_Init+0x90>)
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <MX_TIM3_Init+0x90>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002034:	4813      	ldr	r0, [pc, #76]	; (8002084 <MX_TIM3_Init+0x90>)
 8002036:	f002 fdcd 	bl	8004bd4 <HAL_TIM_Base_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002040:	f7ff fe6c 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002048:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800204a:	f107 0308 	add.w	r3, r7, #8
 800204e:	4619      	mov	r1, r3
 8002050:	480c      	ldr	r0, [pc, #48]	; (8002084 <MX_TIM3_Init+0x90>)
 8002052:	f003 f979 	bl	8005348 <HAL_TIM_ConfigClockSource>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800205c:	f7ff fe5e 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002060:	2300      	movs	r3, #0
 8002062:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002068:	463b      	mov	r3, r7
 800206a:	4619      	mov	r1, r3
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <MX_TIM3_Init+0x90>)
 800206e:	f003 fe84 	bl	8005d7a <HAL_TIMEx_MasterConfigSynchronization>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002078:	f7ff fe50 	bl	8001d1c <Error_Handler>
  }

}
 800207c:	bf00      	nop
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000824 	.word	0x20000824
 8002088:	40000400 	.word	0x40000400

0800208c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002092:	f107 0308 	add.w	r3, r7, #8
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a0:	463b      	mov	r3, r7
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <MX_TIM8_Init+0x9c>)
 80020aa:	4a20      	ldr	r2, [pc, #128]	; (800212c <MX_TIM8_Init+0xa0>)
 80020ac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 8400-1;
 80020ae:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <MX_TIM8_Init+0x9c>)
 80020b0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80020b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <MX_TIM8_Init+0x9c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000-1;
 80020bc:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <MX_TIM8_Init+0x9c>)
 80020be:	f242 720f 	movw	r2, #9999	; 0x270f
 80020c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c4:	4b18      	ldr	r3, [pc, #96]	; (8002128 <MX_TIM8_Init+0x9c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 15;
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <MX_TIM8_Init+0x9c>)
 80020cc:	220f      	movs	r2, #15
 80020ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <MX_TIM8_Init+0x9c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80020d6:	4814      	ldr	r0, [pc, #80]	; (8002128 <MX_TIM8_Init+0x9c>)
 80020d8:	f002 fd7c 	bl	8004bd4 <HAL_TIM_Base_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80020e2:	f7ff fe1b 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80020ec:	f107 0308 	add.w	r3, r7, #8
 80020f0:	4619      	mov	r1, r3
 80020f2:	480d      	ldr	r0, [pc, #52]	; (8002128 <MX_TIM8_Init+0x9c>)
 80020f4:	f003 f928 	bl	8005348 <HAL_TIM_ConfigClockSource>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80020fe:	f7ff fe0d 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800210a:	463b      	mov	r3, r7
 800210c:	4619      	mov	r1, r3
 800210e:	4806      	ldr	r0, [pc, #24]	; (8002128 <MX_TIM8_Init+0x9c>)
 8002110:	f003 fe33 	bl	8005d7a <HAL_TIMEx_MasterConfigSynchronization>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800211a:	f7ff fdff 	bl	8001d1c <Error_Handler>
  }

}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200007e4 	.word	0x200007e4
 800212c:	40010400 	.word	0x40010400

08002130 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <MX_TIM11_Init+0x40>)
 8002136:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <MX_TIM11_Init+0x44>)
 8002138:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <MX_TIM11_Init+0x40>)
 800213c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002140:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <MX_TIM11_Init+0x40>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2000-1;
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <MX_TIM11_Init+0x40>)
 800214a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800214e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002150:	4b07      	ldr	r3, [pc, #28]	; (8002170 <MX_TIM11_Init+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_TIM11_Init+0x40>)
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800215c:	4804      	ldr	r0, [pc, #16]	; (8002170 <MX_TIM11_Init+0x40>)
 800215e:	f002 fd39 	bl	8004bd4 <HAL_TIM_Base_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002168:	f7ff fdd8 	bl	8001d1c <Error_Handler>
  }

}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	200008a4 	.word	0x200008a4
 8002174:	40014800 	.word	0x40014800

08002178 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
  TIM_IC_InitTypeDef sConfigIC = {0};
 800217e:	463b      	mov	r3, r7
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]

  htim13.Instance = TIM13;
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <MX_TIM13_Init+0x88>)
 800218c:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <MX_TIM13_Init+0x8c>)
 800218e:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <MX_TIM13_Init+0x88>)
 8002192:	2253      	movs	r2, #83	; 0x53
 8002194:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002196:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <MX_TIM13_Init+0x88>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 6700-1;
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <MX_TIM13_Init+0x88>)
 800219e:	f641 222b 	movw	r2, #6699	; 0x1a2b
 80021a2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a4:	4b16      	ldr	r3, [pc, #88]	; (8002200 <MX_TIM13_Init+0x88>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <MX_TIM13_Init+0x88>)
 80021ac:	2280      	movs	r2, #128	; 0x80
 80021ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80021b0:	4813      	ldr	r0, [pc, #76]	; (8002200 <MX_TIM13_Init+0x88>)
 80021b2:	f002 fd0f 	bl	8004bd4 <HAL_TIM_Base_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM13_Init+0x48>
  {
    Error_Handler();
 80021bc:	f7ff fdae 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 80021c0:	480f      	ldr	r0, [pc, #60]	; (8002200 <MX_TIM13_Init+0x88>)
 80021c2:	f002 fe21 	bl	8004e08 <HAL_TIM_IC_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM13_Init+0x58>
  {
    Error_Handler();
 80021cc:	f7ff fda6 	bl	8001d1c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021d0:	2300      	movs	r3, #0
 80021d2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021d4:	2301      	movs	r3, #1
 80021d6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021e0:	463b      	mov	r3, r7
 80021e2:	2200      	movs	r2, #0
 80021e4:	4619      	mov	r1, r3
 80021e6:	4806      	ldr	r0, [pc, #24]	; (8002200 <MX_TIM13_Init+0x88>)
 80021e8:	f002 ff4b 	bl	8005082 <HAL_TIM_IC_ConfigChannel>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM13_Init+0x7e>
  {
    Error_Handler();
 80021f2:	f7ff fd93 	bl	8001d1c <Error_Handler>
  }

}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000864 	.word	0x20000864
 8002204:	40001c00 	.word	0x40001c00

08002208 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
 800221c:	615a      	str	r2, [r3, #20]
 800221e:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 8002220:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <MX_TIM14_Init+0x90>)
 8002222:	4a1e      	ldr	r2, [pc, #120]	; (800229c <MX_TIM14_Init+0x94>)
 8002224:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1;
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <MX_TIM14_Init+0x90>)
 8002228:	2201      	movs	r2, #1
 800222a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222c:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <MX_TIM14_Init+0x90>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 255;
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <MX_TIM14_Init+0x90>)
 8002234:	22ff      	movs	r2, #255	; 0xff
 8002236:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <MX_TIM14_Init+0x90>)
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <MX_TIM14_Init+0x90>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002244:	4814      	ldr	r0, [pc, #80]	; (8002298 <MX_TIM14_Init+0x90>)
 8002246:	f002 fcc5 	bl	8004bd4 <HAL_TIM_Base_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8002250:	f7ff fd64 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002254:	4810      	ldr	r0, [pc, #64]	; (8002298 <MX_TIM14_Init+0x90>)
 8002256:	f002 fd0c 	bl	8004c72 <HAL_TIM_PWM_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8002260:	f7ff fd5c 	bl	8001d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002264:	2360      	movs	r3, #96	; 0x60
 8002266:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200;
 8002268:	23c8      	movs	r3, #200	; 0xc8
 800226a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	2200      	movs	r2, #0
 8002278:	4619      	mov	r1, r3
 800227a:	4807      	ldr	r0, [pc, #28]	; (8002298 <MX_TIM14_Init+0x90>)
 800227c:	f002 ff9e 	bl	80051bc <HAL_TIM_PWM_ConfigChannel>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 8002286:	f7ff fd49 	bl	8001d1c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 800228a:	4803      	ldr	r0, [pc, #12]	; (8002298 <MX_TIM14_Init+0x90>)
 800228c:	f000 f8d4 	bl	8002438 <HAL_TIM_MspPostInit>

}
 8002290:	bf00      	nop
 8002292:	3720      	adds	r7, #32
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000924 	.word	0x20000924
 800229c:	40002000 	.word	0x40002000

080022a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08e      	sub	sp, #56	; 0x38
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c0:	d10e      	bne.n	80022e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
 80022c6:	4b55      	ldr	r3, [pc, #340]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a54      	ldr	r2, [pc, #336]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
 80022d2:	4b52      	ldr	r3, [pc, #328]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	623b      	str	r3, [r7, #32]
 80022dc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80022de:	e098      	b.n	8002412 <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM3)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a4e      	ldr	r2, [pc, #312]	; (8002420 <HAL_TIM_Base_MspInit+0x180>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d10e      	bne.n	8002308 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	4b4b      	ldr	r3, [pc, #300]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a4a      	ldr	r2, [pc, #296]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b48      	ldr	r3, [pc, #288]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	69fb      	ldr	r3, [r7, #28]
}
 8002306:	e084      	b.n	8002412 <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM8)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a45      	ldr	r2, [pc, #276]	; (8002424 <HAL_TIM_Base_MspInit+0x184>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d116      	bne.n	8002340 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	4b41      	ldr	r3, [pc, #260]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	4a40      	ldr	r2, [pc, #256]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	6453      	str	r3, [r2, #68]	; 0x44
 8002322:	4b3e      	ldr	r3, [pc, #248]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	202c      	movs	r0, #44	; 0x2c
 8002334:	f001 fce3 	bl	8003cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002338:	202c      	movs	r0, #44	; 0x2c
 800233a:	f001 fcfc 	bl	8003d36 <HAL_NVIC_EnableIRQ>
}
 800233e:	e068      	b.n	8002412 <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM11)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a38      	ldr	r2, [pc, #224]	; (8002428 <HAL_TIM_Base_MspInit+0x188>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d116      	bne.n	8002378 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	4b33      	ldr	r3, [pc, #204]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	4a32      	ldr	r2, [pc, #200]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 8002354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002358:	6453      	str	r3, [r2, #68]	; 0x44
 800235a:	4b30      	ldr	r3, [pc, #192]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	201a      	movs	r0, #26
 800236c:	f001 fcc7 	bl	8003cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002370:	201a      	movs	r0, #26
 8002372:	f001 fce0 	bl	8003d36 <HAL_NVIC_EnableIRQ>
}
 8002376:	e04c      	b.n	8002412 <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM13)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a2b      	ldr	r2, [pc, #172]	; (800242c <HAL_TIM_Base_MspInit+0x18c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d134      	bne.n	80023ec <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	4b25      	ldr	r3, [pc, #148]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	4a24      	ldr	r2, [pc, #144]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 800238c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002390:	6413      	str	r3, [r2, #64]	; 0x40
 8002392:	4b22      	ldr	r3, [pc, #136]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	4b1e      	ldr	r3, [pc, #120]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a1d      	ldr	r2, [pc, #116]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FORD_PWM_IN_Pin;
 80023ba:	2340      	movs	r3, #64	; 0x40
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c6:	2300      	movs	r3, #0
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80023ca:	2309      	movs	r3, #9
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(FORD_PWM_IN_GPIO_Port, &GPIO_InitStruct);
 80023ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d2:	4619      	mov	r1, r3
 80023d4:	4816      	ldr	r0, [pc, #88]	; (8002430 <HAL_TIM_Base_MspInit+0x190>)
 80023d6:	f001 fceb 	bl	8003db0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	202c      	movs	r0, #44	; 0x2c
 80023e0:	f001 fc8d 	bl	8003cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80023e4:	202c      	movs	r0, #44	; 0x2c
 80023e6:	f001 fca6 	bl	8003d36 <HAL_NVIC_EnableIRQ>
}
 80023ea:	e012      	b.n	8002412 <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM14)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a10      	ldr	r2, [pc, #64]	; (8002434 <HAL_TIM_Base_MspInit+0x194>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d10d      	bne.n	8002412 <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a07      	ldr	r2, [pc, #28]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_TIM_Base_MspInit+0x17c>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
}
 8002412:	bf00      	nop
 8002414:	3738      	adds	r7, #56	; 0x38
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	40000400 	.word	0x40000400
 8002424:	40010400 	.word	0x40010400
 8002428:	40014800 	.word	0x40014800
 800242c:	40001c00 	.word	0x40001c00
 8002430:	40020000 	.word	0x40020000
 8002434:	40002000 	.word	0x40002000

08002438 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002458:	d11f      	bne.n	800249a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <HAL_TIM_MspPostInit+0xb0>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	4a21      	ldr	r2, [pc, #132]	; (80024e8 <HAL_TIM_MspPostInit+0xb0>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <HAL_TIM_MspPostInit+0xb0>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8002476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800247a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002488:	2301      	movs	r3, #1
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	4619      	mov	r1, r3
 8002492:	4816      	ldr	r0, [pc, #88]	; (80024ec <HAL_TIM_MspPostInit+0xb4>)
 8002494:	f001 fc8c 	bl	8003db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002498:	e022      	b.n	80024e0 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM14)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <HAL_TIM_MspPostInit+0xb8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d11d      	bne.n	80024e0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <HAL_TIM_MspPostInit+0xb0>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <HAL_TIM_MspPostInit+0xb0>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6313      	str	r3, [r2, #48]	; 0x30
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <HAL_TIM_MspPostInit+0xb0>)
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BKLT_OUT_Pin;
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c4:	2302      	movs	r3, #2
 80024c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024cc:	2300      	movs	r3, #0
 80024ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80024d0:	2309      	movs	r3, #9
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BKLT_OUT_GPIO_Port, &GPIO_InitStruct);
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4619      	mov	r1, r3
 80024da:	4806      	ldr	r0, [pc, #24]	; (80024f4 <HAL_TIM_MspPostInit+0xbc>)
 80024dc:	f001 fc68 	bl	8003db0 <HAL_GPIO_Init>
}
 80024e0:	bf00      	nop
 80024e2:	3728      	adds	r7, #40	; 0x28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40020400 	.word	0x40020400
 80024f0:	40002000 	.word	0x40002000
 80024f4:	40020000 	.word	0x40020000

080024f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 80024fe:	4a12      	ldr	r2, [pc, #72]	; (8002548 <MX_USART1_UART_Init+0x50>)
 8002500:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 8002504:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002508:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 8002512:	2200      	movs	r2, #0
 8002514:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 800251e:	220c      	movs	r2, #12
 8002520:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 800252a:	2200      	movs	r2, #0
 800252c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800252e:	4805      	ldr	r0, [pc, #20]	; (8002544 <MX_USART1_UART_Init+0x4c>)
 8002530:	f003 fc7c 	bl	8005e2c <HAL_UART_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800253a:	f7ff fbef 	bl	8001d1c <Error_Handler>
  }

}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000964 	.word	0x20000964
 8002548:	40011000 	.word	0x40011000

0800254c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a1d      	ldr	r2, [pc, #116]	; (80025e0 <HAL_UART_MspInit+0x94>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d134      	bne.n	80025d8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <HAL_UART_MspInit+0x98>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	4a1b      	ldr	r2, [pc, #108]	; (80025e4 <HAL_UART_MspInit+0x98>)
 8002578:	f043 0310 	orr.w	r3, r3, #16
 800257c:	6453      	str	r3, [r2, #68]	; 0x44
 800257e:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_UART_MspInit+0x98>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_UART_MspInit+0x98>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a14      	ldr	r2, [pc, #80]	; (80025e4 <HAL_UART_MspInit+0x98>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_UART_MspInit+0x98>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b0:	2301      	movs	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b4:	2303      	movs	r3, #3
 80025b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025b8:	2307      	movs	r3, #7
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	4619      	mov	r1, r3
 80025c2:	4809      	ldr	r0, [pc, #36]	; (80025e8 <HAL_UART_MspInit+0x9c>)
 80025c4:	f001 fbf4 	bl	8003db0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2100      	movs	r1, #0
 80025cc:	2025      	movs	r0, #37	; 0x25
 80025ce:	f001 fb96 	bl	8003cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025d2:	2025      	movs	r0, #37	; 0x25
 80025d4:	f001 fbaf 	bl	8003d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80025d8:	bf00      	nop
 80025da:	3728      	adds	r7, #40	; 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40011000 	.word	0x40011000
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40020000 	.word	0x40020000

080025ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002624 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025f2:	e003      	b.n	80025fc <LoopCopyDataInit>

080025f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025fa:	3104      	adds	r1, #4

080025fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025fc:	480b      	ldr	r0, [pc, #44]	; (800262c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025fe:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002600:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002602:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002604:	d3f6      	bcc.n	80025f4 <CopyDataInit>
  ldr  r2, =_sbss
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002608:	e002      	b.n	8002610 <LoopFillZerobss>

0800260a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800260a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800260c:	f842 3b04 	str.w	r3, [r2], #4

08002610 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002612:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002614:	d3f9      	bcc.n	800260a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002616:	f7ff fc5f 	bl	8001ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800261a:	f006 ff91 	bl	8009540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800261e:	f7ff fa43 	bl	8001aa8 <main>
  bx  lr    
 8002622:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002624:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002628:	0800b910 	.word	0x0800b910
  ldr  r0, =_sdata
 800262c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002630:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 8002634:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 8002638:	200009dc 	.word	0x200009dc

0800263c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800263c:	e7fe      	b.n	800263c <ADC_IRQHandler>
	...

08002640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002644:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <HAL_Init+0x40>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <HAL_Init+0x40>)
 800264a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800264e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_Init+0x40>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <HAL_Init+0x40>)
 8002656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_Init+0x40>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a07      	ldr	r2, [pc, #28]	; (8002680 <HAL_Init+0x40>)
 8002662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002668:	2003      	movs	r0, #3
 800266a:	f001 fb3d 	bl	8003ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800266e:	2000      	movs	r0, #0
 8002670:	f000 f808 	bl	8002684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002674:	f7ff fb66 	bl	8001d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023c00 	.word	0x40023c00

08002684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_InitTick+0x54>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_InitTick+0x58>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269a:	fbb3 f3f1 	udiv	r3, r3, r1
 800269e:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f001 fb55 	bl	8003d52 <HAL_SYSTICK_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00e      	b.n	80026d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b0f      	cmp	r3, #15
 80026b6:	d80a      	bhi.n	80026ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b8:	2200      	movs	r2, #0
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	f001 fb1d 	bl	8003cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c4:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <HAL_InitTick+0x5c>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000000 	.word	0x20000000
 80026dc:	20000008 	.word	0x20000008
 80026e0:	20000004 	.word	0x20000004

080026e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e033      	b.n	8002762 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe fc94 	bl	8001030 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	d118      	bne.n	8002754 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800272a:	f023 0302 	bic.w	r3, r3, #2
 800272e:	f043 0202 	orr.w	r2, r3, #2
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fad4 	bl	8002ce4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f023 0303 	bic.w	r3, r3, #3
 800274a:	f043 0201 	orr.w	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
 8002752:	e001      	b.n	8002758 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_ADC_Start+0x1a>
 8002782:	2302      	movs	r3, #2
 8002784:	e0a5      	b.n	80028d2 <HAL_ADC_Start+0x166>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d018      	beq.n	80027ce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027ac:	4b4c      	ldr	r3, [pc, #304]	; (80028e0 <HAL_ADC_Start+0x174>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a4c      	ldr	r2, [pc, #304]	; (80028e4 <HAL_ADC_Start+0x178>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0c9a      	lsrs	r2, r3, #18
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027c0:	e002      	b.n	80027c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f9      	bne.n	80027c2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d179      	bne.n	80028d0 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002806:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281a:	d106      	bne.n	800282a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002820:	f023 0206 	bic.w	r2, r3, #6
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	645a      	str	r2, [r3, #68]	; 0x44
 8002828:	e002      	b.n	8002830 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_ADC_Start+0x17c>)
 800283a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002844:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	2b00      	cmp	r3, #0
 8002850:	d12a      	bne.n	80028a8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a25      	ldr	r2, [pc, #148]	; (80028ec <HAL_ADC_Start+0x180>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d015      	beq.n	8002888 <HAL_ADC_Start+0x11c>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a23      	ldr	r2, [pc, #140]	; (80028f0 <HAL_ADC_Start+0x184>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d105      	bne.n	8002872 <HAL_ADC_Start+0x106>
 8002866:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_ADC_Start+0x17c>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1f      	ldr	r2, [pc, #124]	; (80028f4 <HAL_ADC_Start+0x188>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d129      	bne.n	80028d0 <HAL_ADC_Start+0x164>
 800287c:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <HAL_ADC_Start+0x17c>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	2b0f      	cmp	r3, #15
 8002886:	d823      	bhi.n	80028d0 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d11c      	bne.n	80028d0 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	e013      	b.n	80028d0 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0f      	ldr	r2, [pc, #60]	; (80028ec <HAL_ADC_Start+0x180>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10e      	bne.n	80028d0 <HAL_ADC_Start+0x164>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d107      	bne.n	80028d0 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028ce:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000000 	.word	0x20000000
 80028e4:	431bde83 	.word	0x431bde83
 80028e8:	40012300 	.word	0x40012300
 80028ec:	40012000 	.word	0x40012000
 80028f0:	40012100 	.word	0x40012100
 80028f4:	40012200 	.word	0x40012200

080028f8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_ADC_Stop+0x16>
 800290a:	2302      	movs	r3, #2
 800290c:	e021      	b.n	8002952 <HAL_ADC_Stop+0x5a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d109      	bne.n	8002948 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	f043 0201 	orr.w	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b084      	sub	sp, #16
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297a:	d113      	bne.n	80029a4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298a:	d10b      	bne.n	80029a4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f043 0220 	orr.w	r2, r3, #32
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e05c      	b.n	8002a5e <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80029a4:	f7ff f96a 	bl	8001c7c <HAL_GetTick>
 80029a8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029aa:	e01a      	b.n	80029e2 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b2:	d016      	beq.n	80029e2 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_ADC_PollForConversion+0x6c>
 80029ba:	f7ff f95f 	bl	8001c7c <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d20b      	bcs.n	80029e2 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f043 0204 	orr.w	r2, r3, #4
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e03d      	b.n	8002a5e <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d1dd      	bne.n	80029ac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0212 	mvn.w	r2, #18
 80029f8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d123      	bne.n	8002a5c <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d11f      	bne.n	8002a5c <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d111      	bne.n	8002a5c <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f043 0201 	orr.w	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x1c>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e113      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x244>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	d925      	bls.n	8002af8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68d9      	ldr	r1, [r3, #12]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	3b1e      	subs	r3, #30
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	400a      	ands	r2, r1
 8002ad0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68d9      	ldr	r1, [r3, #12]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4403      	add	r3, r0
 8002aea:	3b1e      	subs	r3, #30
 8002aec:	409a      	lsls	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	e022      	b.n	8002b3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6919      	ldr	r1, [r3, #16]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	4613      	mov	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	400a      	ands	r2, r1
 8002b1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6919      	ldr	r1, [r3, #16]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4403      	add	r3, r0
 8002b34:	409a      	lsls	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d824      	bhi.n	8002b90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	3b05      	subs	r3, #5
 8002b58:	221f      	movs	r2, #31
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	400a      	ands	r2, r1
 8002b66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	4618      	mov	r0, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	3b05      	subs	r3, #5
 8002b82:	fa00 f203 	lsl.w	r2, r0, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b8e:	e04c      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b0c      	cmp	r3, #12
 8002b96:	d824      	bhi.n	8002be2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3b23      	subs	r3, #35	; 0x23
 8002baa:	221f      	movs	r2, #31
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3b23      	subs	r3, #35	; 0x23
 8002bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
 8002be0:	e023      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3b41      	subs	r3, #65	; 0x41
 8002bf4:	221f      	movs	r2, #31
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	400a      	ands	r2, r1
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4618      	mov	r0, r3
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3b41      	subs	r3, #65	; 0x41
 8002c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c2a:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <HAL_ADC_ConfigChannel+0x250>)
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a28      	ldr	r2, [pc, #160]	; (8002cd4 <HAL_ADC_ConfigChannel+0x254>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10f      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1d8>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b12      	cmp	r3, #18
 8002c3e:	d10b      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <HAL_ADC_ConfigChannel+0x254>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d12b      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x23a>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <HAL_ADC_ConfigChannel+0x258>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d003      	beq.n	8002c74 <HAL_ADC_ConfigChannel+0x1f4>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b11      	cmp	r3, #17
 8002c72:	d122      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a11      	ldr	r2, [pc, #68]	; (8002cd8 <HAL_ADC_ConfigChannel+0x258>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d111      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c96:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <HAL_ADC_ConfigChannel+0x25c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a11      	ldr	r2, [pc, #68]	; (8002ce0 <HAL_ADC_ConfigChannel+0x260>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	0c9a      	lsrs	r2, r3, #18
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cac:	e002      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f9      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	40012300 	.word	0x40012300
 8002cd4:	40012000 	.word	0x40012000
 8002cd8:	10000012 	.word	0x10000012
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	431bde83 	.word	0x431bde83

08002ce4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cec:	4b79      	ldr	r3, [pc, #484]	; (8002ed4 <ADC_Init+0x1f0>)
 8002cee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	021a      	lsls	r2, r3, #8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6899      	ldr	r1, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	4a58      	ldr	r2, [pc, #352]	; (8002ed8 <ADC_Init+0x1f4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d022      	beq.n	8002dc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6899      	ldr	r1, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6899      	ldr	r1, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	e00f      	b.n	8002de2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002de0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0202 	bic.w	r2, r2, #2
 8002df0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6899      	ldr	r1, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7e1b      	ldrb	r3, [r3, #24]
 8002dfc:	005a      	lsls	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01b      	beq.n	8002e48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	035a      	lsls	r2, r3, #13
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	e007      	b.n	8002e58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	051a      	lsls	r2, r3, #20
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6899      	ldr	r1, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e9a:	025a      	lsls	r2, r3, #9
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6899      	ldr	r1, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	029a      	lsls	r2, r3, #10
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	40012300 	.word	0x40012300
 8002ed8:	0f000001 	.word	0x0f000001

08002edc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0ed      	b.n	80030ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fe f8f0 	bl	80010e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0202 	bic.w	r2, r2, #2
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f10:	f7fe feb4 	bl	8001c7c <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f16:	e012      	b.n	8002f3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f18:	f7fe feb0 	bl	8001c7c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b0a      	cmp	r3, #10
 8002f24:	d90b      	bls.n	8002f3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2205      	movs	r2, #5
 8002f36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0c5      	b.n	80030ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e5      	bne.n	8002f18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f5c:	f7fe fe8e 	bl	8001c7c <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f62:	e012      	b.n	8002f8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f64:	f7fe fe8a 	bl	8001c7c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b0a      	cmp	r3, #10
 8002f70:	d90b      	bls.n	8002f8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2205      	movs	r2, #5
 8002f82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e09f      	b.n	80030ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0e5      	beq.n	8002f64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	7e1b      	ldrb	r3, [r3, #24]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d108      	bne.n	8002fb2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	e007      	b.n	8002fc2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	7e5b      	ldrb	r3, [r3, #25]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d108      	bne.n	8002fdc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e007      	b.n	8002fec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	7e9b      	ldrb	r3, [r3, #26]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d108      	bne.n	8003006 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0220 	orr.w	r2, r2, #32
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e007      	b.n	8003016 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0220 	bic.w	r2, r2, #32
 8003014:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	7edb      	ldrb	r3, [r3, #27]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d108      	bne.n	8003030 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0210 	bic.w	r2, r2, #16
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e007      	b.n	8003040 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0210 	orr.w	r2, r2, #16
 800303e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7f1b      	ldrb	r3, [r3, #28]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d108      	bne.n	800305a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0208 	orr.w	r2, r2, #8
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e007      	b.n	800306a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0208 	bic.w	r2, r2, #8
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7f5b      	ldrb	r3, [r3, #29]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d108      	bne.n	8003084 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0204 	orr.w	r2, r2, #4
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	e007      	b.n	8003094 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0204 	bic.w	r2, r2, #4
 8003092:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	ea42 0103 	orr.w	r1, r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	1e5a      	subs	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ea:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d003      	beq.n	80030fa <HAL_CAN_ConfigFilter+0x26>
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	f040 80be 	bne.w	8003276 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80030fa:	4b65      	ldr	r3, [pc, #404]	; (8003290 <HAL_CAN_ConfigFilter+0x1bc>)
 80030fc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003104:	f043 0201 	orr.w	r2, r3, #1
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003114:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	431a      	orrs	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	2201      	movs	r2, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	43db      	mvns	r3, r3
 800314c:	401a      	ands	r2, r3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d123      	bne.n	80031a4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	43db      	mvns	r3, r3
 8003166:	401a      	ands	r2, r3
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800317e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	3248      	adds	r2, #72	; 0x48
 8003184:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003198:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800319a:	6979      	ldr	r1, [r7, #20]
 800319c:	3348      	adds	r3, #72	; 0x48
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	440b      	add	r3, r1
 80031a2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d122      	bne.n	80031f2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	431a      	orrs	r2, r3
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	3248      	adds	r2, #72	; 0x48
 80031d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031e8:	6979      	ldr	r1, [r7, #20]
 80031ea:	3348      	adds	r3, #72	; 0x48
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	440b      	add	r3, r1
 80031f0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	43db      	mvns	r3, r3
 8003204:	401a      	ands	r2, r3
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800320c:	e007      	b.n	800321e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	431a      	orrs	r2, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	43db      	mvns	r3, r3
 8003230:	401a      	ands	r2, r3
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003238:	e007      	b.n	800324a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	431a      	orrs	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d107      	bne.n	8003262 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	431a      	orrs	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003268:	f023 0201 	bic.w	r2, r3, #1
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e006      	b.n	8003284 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
  }
}
 8003284:	4618      	mov	r0, r3
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40006400 	.word	0x40006400

08003294 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d12e      	bne.n	8003306 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032c0:	f7fe fcdc 	bl	8001c7c <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032c6:	e012      	b.n	80032ee <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032c8:	f7fe fcd8 	bl	8001c7c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b0a      	cmp	r3, #10
 80032d4:	d90b      	bls.n	80032ee <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2205      	movs	r2, #5
 80032e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e012      	b.n	8003314 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1e5      	bne.n	80032c8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	e006      	b.n	8003314 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
  }
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003330:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800333a:	7ffb      	ldrb	r3, [r7, #31]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d003      	beq.n	8003348 <HAL_CAN_AddTxMessage+0x2c>
 8003340:	7ffb      	ldrb	r3, [r7, #31]
 8003342:	2b02      	cmp	r3, #2
 8003344:	f040 80b8 	bne.w	80034b8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10a      	bne.n	8003368 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003358:	2b00      	cmp	r3, #0
 800335a:	d105      	bne.n	8003368 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 80a0 	beq.w	80034a8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d907      	bls.n	8003388 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e09e      	b.n	80034c6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003388:	2201      	movs	r2, #1
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	409a      	lsls	r2, r3
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10d      	bne.n	80033b6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033a4:	68f9      	ldr	r1, [r7, #12]
 80033a6:	6809      	ldr	r1, [r1, #0]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	3318      	adds	r3, #24
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	440b      	add	r3, r1
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e00f      	b.n	80033d6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033c0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033c6:	68f9      	ldr	r1, [r7, #12]
 80033c8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80033ca:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	3318      	adds	r3, #24
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	440b      	add	r3, r1
 80033d4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3318      	adds	r3, #24
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	440b      	add	r3, r1
 80033e6:	3304      	adds	r3, #4
 80033e8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	7d1b      	ldrb	r3, [r3, #20]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d111      	bne.n	8003416 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	3318      	adds	r3, #24
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	4413      	add	r3, r2
 80033fe:	3304      	adds	r3, #4
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	6811      	ldr	r1, [r2, #0]
 8003406:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	3318      	adds	r3, #24
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	440b      	add	r3, r1
 8003412:	3304      	adds	r3, #4
 8003414:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3307      	adds	r3, #7
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	061a      	lsls	r2, r3, #24
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3306      	adds	r3, #6
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	041b      	lsls	r3, r3, #16
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3305      	adds	r3, #5
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	4313      	orrs	r3, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	3204      	adds	r2, #4
 8003436:	7812      	ldrb	r2, [r2, #0]
 8003438:	4610      	mov	r0, r2
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	6811      	ldr	r1, [r2, #0]
 800343e:	ea43 0200 	orr.w	r2, r3, r0
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	440b      	add	r3, r1
 8003448:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800344c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3303      	adds	r3, #3
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	061a      	lsls	r2, r3, #24
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3302      	adds	r3, #2
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	041b      	lsls	r3, r3, #16
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3301      	adds	r3, #1
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	4313      	orrs	r3, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	7812      	ldrb	r2, [r2, #0]
 800346e:	4610      	mov	r0, r2
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	6811      	ldr	r1, [r2, #0]
 8003474:	ea43 0200 	orr.w	r2, r3, r0
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	440b      	add	r3, r1
 800347e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003482:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	3318      	adds	r3, #24
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	4413      	add	r3, r2
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	6811      	ldr	r1, [r2, #0]
 8003496:	f043 0201 	orr.w	r2, r3, #1
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	3318      	adds	r3, #24
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	440b      	add	r3, r1
 80034a2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	e00e      	b.n	80034c6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e006      	b.n	80034c6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
  }
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3724      	adds	r7, #36	; 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80034d2:	b480      	push	{r7}
 80034d4:	b087      	sub	sp, #28
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034e6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d003      	beq.n	80034f6 <HAL_CAN_GetRxMessage+0x24>
 80034ee:	7dfb      	ldrb	r3, [r7, #23]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	f040 80f4 	bne.w	80036de <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10e      	bne.n	800351a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d116      	bne.n	8003538 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0e8      	b.n	80036ec <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d107      	bne.n	8003538 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0d9      	b.n	80036ec <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	331b      	adds	r3, #27
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	4413      	add	r3, r2
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0204 	and.w	r2, r3, #4
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10c      	bne.n	8003570 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	331b      	adds	r3, #27
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	4413      	add	r3, r2
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	0d5b      	lsrs	r3, r3, #21
 8003566:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e00b      	b.n	8003588 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	331b      	adds	r3, #27
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	4413      	add	r3, r2
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	08db      	lsrs	r3, r3, #3
 8003580:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	331b      	adds	r3, #27
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	4413      	add	r3, r2
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	f003 0201 	and.w	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	331b      	adds	r3, #27
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	4413      	add	r3, r2
 80035ac:	3304      	adds	r3, #4
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	331b      	adds	r3, #27
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	4413      	add	r3, r2
 80035c4:	3304      	adds	r3, #4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	0a1b      	lsrs	r3, r3, #8
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	331b      	adds	r3, #27
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	4413      	add	r3, r2
 80035dc:	3304      	adds	r3, #4
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	4413      	add	r3, r2
 8003608:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	0a1a      	lsrs	r2, r3, #8
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	3301      	adds	r3, #1
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	4413      	add	r3, r2
 8003622:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	0c1a      	lsrs	r2, r3, #16
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	3302      	adds	r3, #2
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	4413      	add	r3, r2
 800363c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	0e1a      	lsrs	r2, r3, #24
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	3303      	adds	r3, #3
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	4413      	add	r3, r2
 8003656:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	3304      	adds	r3, #4
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	4413      	add	r3, r2
 800366e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	0a1a      	lsrs	r2, r3, #8
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	3305      	adds	r3, #5
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	4413      	add	r3, r2
 8003688:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	0c1a      	lsrs	r2, r3, #16
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	3306      	adds	r3, #6
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0e1a      	lsrs	r2, r3, #24
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	3307      	adds	r3, #7
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d108      	bne.n	80036ca <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0220 	orr.w	r2, r2, #32
 80036c6:	60da      	str	r2, [r3, #12]
 80036c8:	e007      	b.n	80036da <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0220 	orr.w	r2, r2, #32
 80036d8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	e006      	b.n	80036ec <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
  }
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003708:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d002      	beq.n	8003716 <HAL_CAN_ActivateNotification+0x1e>
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d109      	bne.n	800372a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6959      	ldr	r1, [r3, #20]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	e006      	b.n	8003738 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
  }
}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08a      	sub	sp, #40	; 0x28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800374c:	2300      	movs	r3, #0
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d07c      	beq.n	8003884 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d023      	beq.n	80037dc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2201      	movs	r2, #1
 800379a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fd fe76 	bl	8001498 <HAL_CAN_TxMailbox0CompleteCallback>
 80037ac:	e016      	b.n	80037dc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d004      	beq.n	80037c2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
 80037c0:	e00c      	b.n	80037dc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d004      	beq.n	80037d6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
 80037d4:	e002      	b.n	80037dc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f965 	bl	8003aa6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d024      	beq.n	8003830 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd fe5e 	bl	80014bc <HAL_CAN_TxMailbox1CompleteCallback>
 8003800:	e016      	b.n	8003830 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d004      	beq.n	8003816 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
 8003814:	e00c      	b.n	8003830 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800381c:	2b00      	cmp	r3, #0
 800381e:	d004      	beq.n	800382a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
 8003828:	e002      	b.n	8003830 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f945 	bl	8003aba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d024      	beq.n	8003884 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003842:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd fe46 	bl	80014e0 <HAL_CAN_TxMailbox2CompleteCallback>
 8003854:	e016      	b.n	8003884 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d004      	beq.n	800386a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
 8003868:	e00c      	b.n	8003884 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
 800387c:	e002      	b.n	8003884 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f925 	bl	8003ace <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00c      	beq.n	80038a8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800389e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2210      	movs	r2, #16
 80038a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d006      	beq.n	80038ca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2208      	movs	r2, #8
 80038c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f90c 	bl	8003ae2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d009      	beq.n	80038e8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fd fe90 	bl	8001608 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003902:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2210      	movs	r2, #16
 800390a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00b      	beq.n	800392e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2208      	movs	r2, #8
 8003926:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f8e4 	bl	8003af6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	d009      	beq.n	800394c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fd fe6a 	bl	8001620 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	d006      	beq.n	800396e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2210      	movs	r2, #16
 8003966:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f8ce 	bl	8003b0a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00b      	beq.n	8003990 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d006      	beq.n	8003990 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2208      	movs	r2, #8
 8003988:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f8c7 	bl	8003b1e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d075      	beq.n	8003a86 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d06c      	beq.n	8003a7e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d008      	beq.n	80039c0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	f043 0302 	orr.w	r3, r3, #2
 80039da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	f043 0304 	orr.w	r3, r3, #4
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d03d      	beq.n	8003a7e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d038      	beq.n	8003a7e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a12:	2b30      	cmp	r3, #48	; 0x30
 8003a14:	d017      	beq.n	8003a46 <HAL_CAN_IRQHandler+0x302>
 8003a16:	2b30      	cmp	r3, #48	; 0x30
 8003a18:	d804      	bhi.n	8003a24 <HAL_CAN_IRQHandler+0x2e0>
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d009      	beq.n	8003a32 <HAL_CAN_IRQHandler+0x2ee>
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d00c      	beq.n	8003a3c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a22:	e024      	b.n	8003a6e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003a24:	2b50      	cmp	r3, #80	; 0x50
 8003a26:	d018      	beq.n	8003a5a <HAL_CAN_IRQHandler+0x316>
 8003a28:	2b60      	cmp	r3, #96	; 0x60
 8003a2a:	d01b      	beq.n	8003a64 <HAL_CAN_IRQHandler+0x320>
 8003a2c:	2b40      	cmp	r3, #64	; 0x40
 8003a2e:	d00f      	beq.n	8003a50 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003a30:	e01d      	b.n	8003a6e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	f043 0308 	orr.w	r3, r3, #8
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a3a:	e018      	b.n	8003a6e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	f043 0310 	orr.w	r3, r3, #16
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a44:	e013      	b.n	8003a6e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	f043 0320 	orr.w	r3, r3, #32
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a4e:	e00e      	b.n	8003a6e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a58:	e009      	b.n	8003a6e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a62:	e004      	b.n	8003a6e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a6c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699a      	ldr	r2, [r3, #24]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a7c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2204      	movs	r2, #4
 8003a84:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f84a 	bl	8003b32 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	3728      	adds	r7, #40	; 0x28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <__NVIC_SetPriorityGrouping+0x44>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b64:	4013      	ands	r3, r2
 8003b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b7a:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <__NVIC_SetPriorityGrouping+0x44>)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	60d3      	str	r3, [r2, #12]
}
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	0a1b      	lsrs	r3, r3, #8
 8003b9a:	f003 0307 	and.w	r3, r3, #7
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	db0b      	blt.n	8003bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	f003 021f 	and.w	r2, r3, #31
 8003bc4:	4907      	ldr	r1, [pc, #28]	; (8003be4 <__NVIC_EnableIRQ+0x38>)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	2001      	movs	r0, #1
 8003bce:	fa00 f202 	lsl.w	r2, r0, r2
 8003bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000e100 	.word	0xe000e100

08003be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	6039      	str	r1, [r7, #0]
 8003bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	db0a      	blt.n	8003c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	490c      	ldr	r1, [pc, #48]	; (8003c34 <__NVIC_SetPriority+0x4c>)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	0112      	lsls	r2, r2, #4
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c10:	e00a      	b.n	8003c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	4908      	ldr	r1, [pc, #32]	; (8003c38 <__NVIC_SetPriority+0x50>)
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	3b04      	subs	r3, #4
 8003c20:	0112      	lsls	r2, r2, #4
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	440b      	add	r3, r1
 8003c26:	761a      	strb	r2, [r3, #24]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	e000e100 	.word	0xe000e100
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b089      	sub	sp, #36	; 0x24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f1c3 0307 	rsb	r3, r3, #7
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	bf28      	it	cs
 8003c5a:	2304      	movcs	r3, #4
 8003c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	3304      	adds	r3, #4
 8003c62:	2b06      	cmp	r3, #6
 8003c64:	d902      	bls.n	8003c6c <NVIC_EncodePriority+0x30>
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3b03      	subs	r3, #3
 8003c6a:	e000      	b.n	8003c6e <NVIC_EncodePriority+0x32>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c70:	f04f 32ff 	mov.w	r2, #4294967295
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	401a      	ands	r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c84:	f04f 31ff 	mov.w	r1, #4294967295
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	43d9      	mvns	r1, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c94:	4313      	orrs	r3, r2
         );
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3724      	adds	r7, #36	; 0x24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cb4:	d301      	bcc.n	8003cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e00f      	b.n	8003cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cba:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <SysTick_Config+0x40>)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cc2:	210f      	movs	r1, #15
 8003cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc8:	f7ff ff8e 	bl	8003be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <SysTick_Config+0x40>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cd2:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <SysTick_Config+0x40>)
 8003cd4:	2207      	movs	r2, #7
 8003cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	e000e010 	.word	0xe000e010

08003ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff ff29 	bl	8003b48 <__NVIC_SetPriorityGrouping>
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	4603      	mov	r3, r0
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d10:	f7ff ff3e 	bl	8003b90 <__NVIC_GetPriorityGrouping>
 8003d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	6978      	ldr	r0, [r7, #20]
 8003d1c:	f7ff ff8e 	bl	8003c3c <NVIC_EncodePriority>
 8003d20:	4602      	mov	r2, r0
 8003d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff ff5d 	bl	8003be8 <__NVIC_SetPriority>
}
 8003d2e:	bf00      	nop
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff ff31 	bl	8003bac <__NVIC_EnableIRQ>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ffa2 	bl	8003ca4 <SysTick_Config>
 8003d60:	4603      	mov	r3, r0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d004      	beq.n	8003d88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2280      	movs	r2, #128	; 0x80
 8003d82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e00c      	b.n	8003da2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2205      	movs	r2, #5
 8003d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b089      	sub	sp, #36	; 0x24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	e165      	b.n	8004098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dcc:	2201      	movs	r2, #1
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	f040 8154 	bne.w	8004092 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_Init+0x4a>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b12      	cmp	r3, #18
 8003df8:	d123      	bne.n	8003e42 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	08da      	lsrs	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3208      	adds	r2, #8
 8003e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	220f      	movs	r2, #15
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	08da      	lsrs	r2, r3, #3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3208      	adds	r2, #8
 8003e3c:	69b9      	ldr	r1, [r7, #24]
 8003e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	43db      	mvns	r3, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4013      	ands	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0203 	and.w	r2, r3, #3
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d00b      	beq.n	8003e96 <HAL_GPIO_Init+0xe6>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d007      	beq.n	8003e96 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e8a:	2b11      	cmp	r3, #17
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b12      	cmp	r3, #18
 8003e94:	d130      	bne.n	8003ef8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ecc:	2201      	movs	r2, #1
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 0201 	and.w	r2, r3, #1
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	2203      	movs	r2, #3
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80ae 	beq.w	8004092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	4b5c      	ldr	r3, [pc, #368]	; (80040ac <HAL_GPIO_Init+0x2fc>)
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	4a5b      	ldr	r2, [pc, #364]	; (80040ac <HAL_GPIO_Init+0x2fc>)
 8003f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f44:	6453      	str	r3, [r2, #68]	; 0x44
 8003f46:	4b59      	ldr	r3, [pc, #356]	; (80040ac <HAL_GPIO_Init+0x2fc>)
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f52:	4a57      	ldr	r2, [pc, #348]	; (80040b0 <HAL_GPIO_Init+0x300>)
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	089b      	lsrs	r3, r3, #2
 8003f58:	3302      	adds	r3, #2
 8003f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	220f      	movs	r2, #15
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4013      	ands	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a4e      	ldr	r2, [pc, #312]	; (80040b4 <HAL_GPIO_Init+0x304>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d025      	beq.n	8003fca <HAL_GPIO_Init+0x21a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a4d      	ldr	r2, [pc, #308]	; (80040b8 <HAL_GPIO_Init+0x308>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d01f      	beq.n	8003fc6 <HAL_GPIO_Init+0x216>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a4c      	ldr	r2, [pc, #304]	; (80040bc <HAL_GPIO_Init+0x30c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d019      	beq.n	8003fc2 <HAL_GPIO_Init+0x212>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a4b      	ldr	r2, [pc, #300]	; (80040c0 <HAL_GPIO_Init+0x310>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <HAL_GPIO_Init+0x20e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a4a      	ldr	r2, [pc, #296]	; (80040c4 <HAL_GPIO_Init+0x314>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00d      	beq.n	8003fba <HAL_GPIO_Init+0x20a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a49      	ldr	r2, [pc, #292]	; (80040c8 <HAL_GPIO_Init+0x318>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <HAL_GPIO_Init+0x206>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a48      	ldr	r2, [pc, #288]	; (80040cc <HAL_GPIO_Init+0x31c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d101      	bne.n	8003fb2 <HAL_GPIO_Init+0x202>
 8003fae:	2306      	movs	r3, #6
 8003fb0:	e00c      	b.n	8003fcc <HAL_GPIO_Init+0x21c>
 8003fb2:	2307      	movs	r3, #7
 8003fb4:	e00a      	b.n	8003fcc <HAL_GPIO_Init+0x21c>
 8003fb6:	2305      	movs	r3, #5
 8003fb8:	e008      	b.n	8003fcc <HAL_GPIO_Init+0x21c>
 8003fba:	2304      	movs	r3, #4
 8003fbc:	e006      	b.n	8003fcc <HAL_GPIO_Init+0x21c>
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e004      	b.n	8003fcc <HAL_GPIO_Init+0x21c>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e002      	b.n	8003fcc <HAL_GPIO_Init+0x21c>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <HAL_GPIO_Init+0x21c>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	f002 0203 	and.w	r2, r2, #3
 8003fd2:	0092      	lsls	r2, r2, #2
 8003fd4:	4093      	lsls	r3, r2
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fdc:	4934      	ldr	r1, [pc, #208]	; (80040b0 <HAL_GPIO_Init+0x300>)
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	089b      	lsrs	r3, r3, #2
 8003fe2:	3302      	adds	r3, #2
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fea:	4b39      	ldr	r3, [pc, #228]	; (80040d0 <HAL_GPIO_Init+0x320>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800400e:	4a30      	ldr	r2, [pc, #192]	; (80040d0 <HAL_GPIO_Init+0x320>)
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004014:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <HAL_GPIO_Init+0x320>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	43db      	mvns	r3, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4013      	ands	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004038:	4a25      	ldr	r2, [pc, #148]	; (80040d0 <HAL_GPIO_Init+0x320>)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800403e:	4b24      	ldr	r3, [pc, #144]	; (80040d0 <HAL_GPIO_Init+0x320>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	43db      	mvns	r3, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4013      	ands	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004062:	4a1b      	ldr	r2, [pc, #108]	; (80040d0 <HAL_GPIO_Init+0x320>)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004068:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <HAL_GPIO_Init+0x320>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	43db      	mvns	r3, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4013      	ands	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800408c:	4a10      	ldr	r2, [pc, #64]	; (80040d0 <HAL_GPIO_Init+0x320>)
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	3301      	adds	r3, #1
 8004096:	61fb      	str	r3, [r7, #28]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2b0f      	cmp	r3, #15
 800409c:	f67f ae96 	bls.w	8003dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040a0:	bf00      	nop
 80040a2:	3724      	adds	r7, #36	; 0x24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	40023800 	.word	0x40023800
 80040b0:	40013800 	.word	0x40013800
 80040b4:	40020000 	.word	0x40020000
 80040b8:	40020400 	.word	0x40020400
 80040bc:	40020800 	.word	0x40020800
 80040c0:	40020c00 	.word	0x40020c00
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40021400 	.word	0x40021400
 80040cc:	40021800 	.word	0x40021800
 80040d0:	40013c00 	.word	0x40013c00

080040d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	887b      	ldrh	r3, [r7, #2]
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040ec:	2301      	movs	r3, #1
 80040ee:	73fb      	strb	r3, [r7, #15]
 80040f0:	e001      	b.n	80040f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040f2:	2300      	movs	r3, #0
 80040f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	807b      	strh	r3, [r7, #2]
 8004110:	4613      	mov	r3, r2
 8004112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004114:	787b      	ldrb	r3, [r7, #1]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800411a:	887a      	ldrh	r2, [r7, #2]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004120:	e003      	b.n	800412a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004122:	887b      	ldrh	r3, [r7, #2]
 8004124:	041a      	lsls	r2, r3, #16
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	619a      	str	r2, [r3, #24]
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	460b      	mov	r3, r1
 8004140:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	887b      	ldrh	r3, [r7, #2]
 8004148:	401a      	ands	r2, r3
 800414a:	887b      	ldrh	r3, [r7, #2]
 800414c:	429a      	cmp	r2, r3
 800414e:	d104      	bne.n	800415a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004150:	887b      	ldrh	r3, [r7, #2]
 8004152:	041a      	lsls	r2, r3, #16
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004158:	e002      	b.n	8004160 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800415a:	887a      	ldrh	r2, [r7, #2]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	619a      	str	r2, [r3, #24]
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004176:	4b08      	ldr	r3, [pc, #32]	; (8004198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004178:	695a      	ldr	r2, [r3, #20]
 800417a:	88fb      	ldrh	r3, [r7, #6]
 800417c:	4013      	ands	r3, r2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d006      	beq.n	8004190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004182:	4a05      	ldr	r2, [pc, #20]	; (8004198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 f806 	bl	800419c <HAL_GPIO_EXTI_Callback>
  }
}
 8004190:	bf00      	nop
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40013c00 	.word	0x40013c00

0800419c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0ca      	b.n	800435e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041c8:	4b67      	ldr	r3, [pc, #412]	; (8004368 <HAL_RCC_ClockConfig+0x1b4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d90c      	bls.n	80041f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b64      	ldr	r3, [pc, #400]	; (8004368 <HAL_RCC_ClockConfig+0x1b4>)
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041de:	4b62      	ldr	r3, [pc, #392]	; (8004368 <HAL_RCC_ClockConfig+0x1b4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0b6      	b.n	800435e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d020      	beq.n	800423e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004208:	4b58      	ldr	r3, [pc, #352]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4a57      	ldr	r2, [pc, #348]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 800420e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004212:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004220:	4b52      	ldr	r3, [pc, #328]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a51      	ldr	r2, [pc, #324]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 8004226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800422a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422c:	4b4f      	ldr	r3, [pc, #316]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	494c      	ldr	r1, [pc, #304]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d044      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004252:	4b46      	ldr	r3, [pc, #280]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d119      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e07d      	b.n	800435e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d003      	beq.n	8004272 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800426e:	2b03      	cmp	r3, #3
 8004270:	d107      	bne.n	8004282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004272:	4b3e      	ldr	r3, [pc, #248]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e06d      	b.n	800435e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004282:	4b3a      	ldr	r3, [pc, #232]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e065      	b.n	800435e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004292:	4b36      	ldr	r3, [pc, #216]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f023 0203 	bic.w	r2, r3, #3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	4933      	ldr	r1, [pc, #204]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a4:	f7fd fcea 	bl	8001c7c <HAL_GetTick>
 80042a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042aa:	e00a      	b.n	80042c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ac:	f7fd fce6 	bl	8001c7c <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e04d      	b.n	800435e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	4b2a      	ldr	r3, [pc, #168]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 020c 	and.w	r2, r3, #12
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d1eb      	bne.n	80042ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d4:	4b24      	ldr	r3, [pc, #144]	; (8004368 <HAL_RCC_ClockConfig+0x1b4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d20c      	bcs.n	80042fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b21      	ldr	r3, [pc, #132]	; (8004368 <HAL_RCC_ClockConfig+0x1b4>)
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <HAL_RCC_ClockConfig+0x1b4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e030      	b.n	800435e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004308:	4b18      	ldr	r3, [pc, #96]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4915      	ldr	r1, [pc, #84]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004326:	4b11      	ldr	r3, [pc, #68]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	490d      	ldr	r1, [pc, #52]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800433a:	f000 f851 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 800433e:	4601      	mov	r1, r0
 8004340:	4b0a      	ldr	r3, [pc, #40]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	4a09      	ldr	r2, [pc, #36]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	5cd3      	ldrb	r3, [r2, r3]
 800434e:	fa21 f303 	lsr.w	r3, r1, r3
 8004352:	4a08      	ldr	r2, [pc, #32]	; (8004374 <HAL_RCC_ClockConfig+0x1c0>)
 8004354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004356:	2000      	movs	r0, #0
 8004358:	f7fe f994 	bl	8002684 <HAL_InitTick>

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40023c00 	.word	0x40023c00
 800436c:	40023800 	.word	0x40023800
 8004370:	0800b688 	.word	0x0800b688
 8004374:	20000000 	.word	0x20000000

08004378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800437c:	4b03      	ldr	r3, [pc, #12]	; (800438c <HAL_RCC_GetHCLKFreq+0x14>)
 800437e:	681b      	ldr	r3, [r3, #0]
}
 8004380:	4618      	mov	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	20000000 	.word	0x20000000

08004390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004394:	f7ff fff0 	bl	8004378 <HAL_RCC_GetHCLKFreq>
 8004398:	4601      	mov	r1, r0
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	0a9b      	lsrs	r3, r3, #10
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	4a03      	ldr	r2, [pc, #12]	; (80043b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043a6:	5cd3      	ldrb	r3, [r2, r3]
 80043a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40023800 	.word	0x40023800
 80043b4:	0800b698 	.word	0x0800b698

080043b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043bc:	f7ff ffdc 	bl	8004378 <HAL_RCC_GetHCLKFreq>
 80043c0:	4601      	mov	r1, r0
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	0b5b      	lsrs	r3, r3, #13
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	4a03      	ldr	r2, [pc, #12]	; (80043dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ce:	5cd3      	ldrb	r3, [r2, r3]
 80043d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40023800 	.word	0x40023800
 80043dc:	0800b698 	.word	0x0800b698

080043e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043fa:	4bc6      	ldr	r3, [pc, #792]	; (8004714 <HAL_RCC_GetSysClockFreq+0x334>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b0c      	cmp	r3, #12
 8004404:	f200 817e 	bhi.w	8004704 <HAL_RCC_GetSysClockFreq+0x324>
 8004408:	a201      	add	r2, pc, #4	; (adr r2, 8004410 <HAL_RCC_GetSysClockFreq+0x30>)
 800440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440e:	bf00      	nop
 8004410:	08004445 	.word	0x08004445
 8004414:	08004705 	.word	0x08004705
 8004418:	08004705 	.word	0x08004705
 800441c:	08004705 	.word	0x08004705
 8004420:	0800444b 	.word	0x0800444b
 8004424:	08004705 	.word	0x08004705
 8004428:	08004705 	.word	0x08004705
 800442c:	08004705 	.word	0x08004705
 8004430:	08004451 	.word	0x08004451
 8004434:	08004705 	.word	0x08004705
 8004438:	08004705 	.word	0x08004705
 800443c:	08004705 	.word	0x08004705
 8004440:	080045ad 	.word	0x080045ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004444:	4bb4      	ldr	r3, [pc, #720]	; (8004718 <HAL_RCC_GetSysClockFreq+0x338>)
 8004446:	613b      	str	r3, [r7, #16]
       break;
 8004448:	e15f      	b.n	800470a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800444a:	4bb4      	ldr	r3, [pc, #720]	; (800471c <HAL_RCC_GetSysClockFreq+0x33c>)
 800444c:	613b      	str	r3, [r7, #16]
      break;
 800444e:	e15c      	b.n	800470a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004450:	4bb0      	ldr	r3, [pc, #704]	; (8004714 <HAL_RCC_GetSysClockFreq+0x334>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004458:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800445a:	4bae      	ldr	r3, [pc, #696]	; (8004714 <HAL_RCC_GetSysClockFreq+0x334>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d04a      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004466:	4bab      	ldr	r3, [pc, #684]	; (8004714 <HAL_RCC_GetSysClockFreq+0x334>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	099b      	lsrs	r3, r3, #6
 800446c:	f04f 0400 	mov.w	r4, #0
 8004470:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	ea03 0501 	and.w	r5, r3, r1
 800447c:	ea04 0602 	and.w	r6, r4, r2
 8004480:	4629      	mov	r1, r5
 8004482:	4632      	mov	r2, r6
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	f04f 0400 	mov.w	r4, #0
 800448c:	0154      	lsls	r4, r2, #5
 800448e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004492:	014b      	lsls	r3, r1, #5
 8004494:	4619      	mov	r1, r3
 8004496:	4622      	mov	r2, r4
 8004498:	1b49      	subs	r1, r1, r5
 800449a:	eb62 0206 	sbc.w	r2, r2, r6
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	f04f 0400 	mov.w	r4, #0
 80044a6:	0194      	lsls	r4, r2, #6
 80044a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044ac:	018b      	lsls	r3, r1, #6
 80044ae:	1a5b      	subs	r3, r3, r1
 80044b0:	eb64 0402 	sbc.w	r4, r4, r2
 80044b4:	f04f 0100 	mov.w	r1, #0
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	00e2      	lsls	r2, r4, #3
 80044be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044c2:	00d9      	lsls	r1, r3, #3
 80044c4:	460b      	mov	r3, r1
 80044c6:	4614      	mov	r4, r2
 80044c8:	195b      	adds	r3, r3, r5
 80044ca:	eb44 0406 	adc.w	r4, r4, r6
 80044ce:	f04f 0100 	mov.w	r1, #0
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	0262      	lsls	r2, r4, #9
 80044d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80044dc:	0259      	lsls	r1, r3, #9
 80044de:	460b      	mov	r3, r1
 80044e0:	4614      	mov	r4, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	4621      	mov	r1, r4
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f04f 0400 	mov.w	r4, #0
 80044ec:	461a      	mov	r2, r3
 80044ee:	4623      	mov	r3, r4
 80044f0:	f7fc fbca 	bl	8000c88 <__aeabi_uldivmod>
 80044f4:	4603      	mov	r3, r0
 80044f6:	460c      	mov	r4, r1
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	e049      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044fc:	4b85      	ldr	r3, [pc, #532]	; (8004714 <HAL_RCC_GetSysClockFreq+0x334>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	099b      	lsrs	r3, r3, #6
 8004502:	f04f 0400 	mov.w	r4, #0
 8004506:	f240 11ff 	movw	r1, #511	; 0x1ff
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	ea03 0501 	and.w	r5, r3, r1
 8004512:	ea04 0602 	and.w	r6, r4, r2
 8004516:	4629      	mov	r1, r5
 8004518:	4632      	mov	r2, r6
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	f04f 0400 	mov.w	r4, #0
 8004522:	0154      	lsls	r4, r2, #5
 8004524:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004528:	014b      	lsls	r3, r1, #5
 800452a:	4619      	mov	r1, r3
 800452c:	4622      	mov	r2, r4
 800452e:	1b49      	subs	r1, r1, r5
 8004530:	eb62 0206 	sbc.w	r2, r2, r6
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	f04f 0400 	mov.w	r4, #0
 800453c:	0194      	lsls	r4, r2, #6
 800453e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004542:	018b      	lsls	r3, r1, #6
 8004544:	1a5b      	subs	r3, r3, r1
 8004546:	eb64 0402 	sbc.w	r4, r4, r2
 800454a:	f04f 0100 	mov.w	r1, #0
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	00e2      	lsls	r2, r4, #3
 8004554:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004558:	00d9      	lsls	r1, r3, #3
 800455a:	460b      	mov	r3, r1
 800455c:	4614      	mov	r4, r2
 800455e:	195b      	adds	r3, r3, r5
 8004560:	eb44 0406 	adc.w	r4, r4, r6
 8004564:	f04f 0100 	mov.w	r1, #0
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	02a2      	lsls	r2, r4, #10
 800456e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004572:	0299      	lsls	r1, r3, #10
 8004574:	460b      	mov	r3, r1
 8004576:	4614      	mov	r4, r2
 8004578:	4618      	mov	r0, r3
 800457a:	4621      	mov	r1, r4
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f04f 0400 	mov.w	r4, #0
 8004582:	461a      	mov	r2, r3
 8004584:	4623      	mov	r3, r4
 8004586:	f7fc fb7f 	bl	8000c88 <__aeabi_uldivmod>
 800458a:	4603      	mov	r3, r0
 800458c:	460c      	mov	r4, r1
 800458e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004590:	4b60      	ldr	r3, [pc, #384]	; (8004714 <HAL_RCC_GetSysClockFreq+0x334>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	0c1b      	lsrs	r3, r3, #16
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	3301      	adds	r3, #1
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a8:	613b      	str	r3, [r7, #16]
      break;
 80045aa:	e0ae      	b.n	800470a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045ac:	4b59      	ldr	r3, [pc, #356]	; (8004714 <HAL_RCC_GetSysClockFreq+0x334>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045b4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045b6:	4b57      	ldr	r3, [pc, #348]	; (8004714 <HAL_RCC_GetSysClockFreq+0x334>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d04a      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c2:	4b54      	ldr	r3, [pc, #336]	; (8004714 <HAL_RCC_GetSysClockFreq+0x334>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	099b      	lsrs	r3, r3, #6
 80045c8:	f04f 0400 	mov.w	r4, #0
 80045cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	ea03 0501 	and.w	r5, r3, r1
 80045d8:	ea04 0602 	and.w	r6, r4, r2
 80045dc:	4629      	mov	r1, r5
 80045de:	4632      	mov	r2, r6
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	f04f 0400 	mov.w	r4, #0
 80045e8:	0154      	lsls	r4, r2, #5
 80045ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045ee:	014b      	lsls	r3, r1, #5
 80045f0:	4619      	mov	r1, r3
 80045f2:	4622      	mov	r2, r4
 80045f4:	1b49      	subs	r1, r1, r5
 80045f6:	eb62 0206 	sbc.w	r2, r2, r6
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	f04f 0400 	mov.w	r4, #0
 8004602:	0194      	lsls	r4, r2, #6
 8004604:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004608:	018b      	lsls	r3, r1, #6
 800460a:	1a5b      	subs	r3, r3, r1
 800460c:	eb64 0402 	sbc.w	r4, r4, r2
 8004610:	f04f 0100 	mov.w	r1, #0
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	00e2      	lsls	r2, r4, #3
 800461a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800461e:	00d9      	lsls	r1, r3, #3
 8004620:	460b      	mov	r3, r1
 8004622:	4614      	mov	r4, r2
 8004624:	195b      	adds	r3, r3, r5
 8004626:	eb44 0406 	adc.w	r4, r4, r6
 800462a:	f04f 0100 	mov.w	r1, #0
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	0262      	lsls	r2, r4, #9
 8004634:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004638:	0259      	lsls	r1, r3, #9
 800463a:	460b      	mov	r3, r1
 800463c:	4614      	mov	r4, r2
 800463e:	4618      	mov	r0, r3
 8004640:	4621      	mov	r1, r4
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f04f 0400 	mov.w	r4, #0
 8004648:	461a      	mov	r2, r3
 800464a:	4623      	mov	r3, r4
 800464c:	f7fc fb1c 	bl	8000c88 <__aeabi_uldivmod>
 8004650:	4603      	mov	r3, r0
 8004652:	460c      	mov	r4, r1
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	e049      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004658:	4b2e      	ldr	r3, [pc, #184]	; (8004714 <HAL_RCC_GetSysClockFreq+0x334>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	099b      	lsrs	r3, r3, #6
 800465e:	f04f 0400 	mov.w	r4, #0
 8004662:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	ea03 0501 	and.w	r5, r3, r1
 800466e:	ea04 0602 	and.w	r6, r4, r2
 8004672:	4629      	mov	r1, r5
 8004674:	4632      	mov	r2, r6
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	f04f 0400 	mov.w	r4, #0
 800467e:	0154      	lsls	r4, r2, #5
 8004680:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004684:	014b      	lsls	r3, r1, #5
 8004686:	4619      	mov	r1, r3
 8004688:	4622      	mov	r2, r4
 800468a:	1b49      	subs	r1, r1, r5
 800468c:	eb62 0206 	sbc.w	r2, r2, r6
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	f04f 0400 	mov.w	r4, #0
 8004698:	0194      	lsls	r4, r2, #6
 800469a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800469e:	018b      	lsls	r3, r1, #6
 80046a0:	1a5b      	subs	r3, r3, r1
 80046a2:	eb64 0402 	sbc.w	r4, r4, r2
 80046a6:	f04f 0100 	mov.w	r1, #0
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	00e2      	lsls	r2, r4, #3
 80046b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046b4:	00d9      	lsls	r1, r3, #3
 80046b6:	460b      	mov	r3, r1
 80046b8:	4614      	mov	r4, r2
 80046ba:	195b      	adds	r3, r3, r5
 80046bc:	eb44 0406 	adc.w	r4, r4, r6
 80046c0:	f04f 0100 	mov.w	r1, #0
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	02a2      	lsls	r2, r4, #10
 80046ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80046ce:	0299      	lsls	r1, r3, #10
 80046d0:	460b      	mov	r3, r1
 80046d2:	4614      	mov	r4, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	4621      	mov	r1, r4
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f04f 0400 	mov.w	r4, #0
 80046de:	461a      	mov	r2, r3
 80046e0:	4623      	mov	r3, r4
 80046e2:	f7fc fad1 	bl	8000c88 <__aeabi_uldivmod>
 80046e6:	4603      	mov	r3, r0
 80046e8:	460c      	mov	r4, r1
 80046ea:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80046ec:	4b09      	ldr	r3, [pc, #36]	; (8004714 <HAL_RCC_GetSysClockFreq+0x334>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	0f1b      	lsrs	r3, r3, #28
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	613b      	str	r3, [r7, #16]
      break;
 8004702:	e002      	b.n	800470a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004704:	4b04      	ldr	r3, [pc, #16]	; (8004718 <HAL_RCC_GetSysClockFreq+0x338>)
 8004706:	613b      	str	r3, [r7, #16]
      break;
 8004708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800470a:	693b      	ldr	r3, [r7, #16]
}
 800470c:	4618      	mov	r0, r3
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004714:	40023800 	.word	0x40023800
 8004718:	00f42400 	.word	0x00f42400
 800471c:	007a1200 	.word	0x007a1200

08004720 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8083 	beq.w	8004840 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800473a:	4b95      	ldr	r3, [pc, #596]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b04      	cmp	r3, #4
 8004744:	d019      	beq.n	800477a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004746:	4b92      	ldr	r3, [pc, #584]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800474e:	2b08      	cmp	r3, #8
 8004750:	d106      	bne.n	8004760 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004752:	4b8f      	ldr	r3, [pc, #572]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800475a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800475e:	d00c      	beq.n	800477a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004760:	4b8b      	ldr	r3, [pc, #556]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004768:	2b0c      	cmp	r3, #12
 800476a:	d112      	bne.n	8004792 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800476c:	4b88      	ldr	r3, [pc, #544]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004778:	d10b      	bne.n	8004792 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800477a:	4b85      	ldr	r3, [pc, #532]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d05b      	beq.n	800483e <HAL_RCC_OscConfig+0x11e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d157      	bne.n	800483e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e216      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800479a:	d106      	bne.n	80047aa <HAL_RCC_OscConfig+0x8a>
 800479c:	4b7c      	ldr	r3, [pc, #496]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a7b      	ldr	r2, [pc, #492]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 80047a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	e01d      	b.n	80047e6 <HAL_RCC_OscConfig+0xc6>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047b2:	d10c      	bne.n	80047ce <HAL_RCC_OscConfig+0xae>
 80047b4:	4b76      	ldr	r3, [pc, #472]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a75      	ldr	r2, [pc, #468]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 80047ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	4b73      	ldr	r3, [pc, #460]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a72      	ldr	r2, [pc, #456]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 80047c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	e00b      	b.n	80047e6 <HAL_RCC_OscConfig+0xc6>
 80047ce:	4b70      	ldr	r3, [pc, #448]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a6f      	ldr	r2, [pc, #444]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 80047d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	4b6d      	ldr	r3, [pc, #436]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a6c      	ldr	r2, [pc, #432]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 80047e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d013      	beq.n	8004816 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ee:	f7fd fa45 	bl	8001c7c <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047f6:	f7fd fa41 	bl	8001c7c <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b64      	cmp	r3, #100	; 0x64
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e1db      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004808:	4b61      	ldr	r3, [pc, #388]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0xd6>
 8004814:	e014      	b.n	8004840 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004816:	f7fd fa31 	bl	8001c7c <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800481e:	f7fd fa2d 	bl	8001c7c <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b64      	cmp	r3, #100	; 0x64
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e1c7      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004830:	4b57      	ldr	r3, [pc, #348]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f0      	bne.n	800481e <HAL_RCC_OscConfig+0xfe>
 800483c:	e000      	b.n	8004840 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800483e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d06f      	beq.n	800492c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800484c:	4b50      	ldr	r3, [pc, #320]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 030c 	and.w	r3, r3, #12
 8004854:	2b00      	cmp	r3, #0
 8004856:	d017      	beq.n	8004888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004858:	4b4d      	ldr	r3, [pc, #308]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004860:	2b08      	cmp	r3, #8
 8004862:	d105      	bne.n	8004870 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004864:	4b4a      	ldr	r3, [pc, #296]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00b      	beq.n	8004888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004870:	4b47      	ldr	r3, [pc, #284]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004878:	2b0c      	cmp	r3, #12
 800487a:	d11c      	bne.n	80048b6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800487c:	4b44      	ldr	r3, [pc, #272]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d116      	bne.n	80048b6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004888:	4b41      	ldr	r3, [pc, #260]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_RCC_OscConfig+0x180>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e18f      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a0:	4b3b      	ldr	r3, [pc, #236]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	4938      	ldr	r1, [pc, #224]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b4:	e03a      	b.n	800492c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d020      	beq.n	8004900 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048be:	4b35      	ldr	r3, [pc, #212]	; (8004994 <HAL_RCC_OscConfig+0x274>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fd f9da 	bl	8001c7c <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048cc:	f7fd f9d6 	bl	8001c7c <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e170      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048de:	4b2c      	ldr	r3, [pc, #176]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ea:	4b29      	ldr	r3, [pc, #164]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4925      	ldr	r1, [pc, #148]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	600b      	str	r3, [r1, #0]
 80048fe:	e015      	b.n	800492c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004900:	4b24      	ldr	r3, [pc, #144]	; (8004994 <HAL_RCC_OscConfig+0x274>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004906:	f7fd f9b9 	bl	8001c7c <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800490e:	f7fd f9b5 	bl	8001c7c <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e14f      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d037      	beq.n	80049a8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d016      	beq.n	800496e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004940:	4b15      	ldr	r3, [pc, #84]	; (8004998 <HAL_RCC_OscConfig+0x278>)
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004946:	f7fd f999 	bl	8001c7c <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800494e:	f7fd f995 	bl	8001c7c <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e12f      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <HAL_RCC_OscConfig+0x270>)
 8004962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x22e>
 800496c:	e01c      	b.n	80049a8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800496e:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <HAL_RCC_OscConfig+0x278>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004974:	f7fd f982 	bl	8001c7c <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497a:	e00f      	b.n	800499c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800497c:	f7fd f97e 	bl	8001c7c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d908      	bls.n	800499c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e118      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4a0>
 800498e:	bf00      	nop
 8004990:	40023800 	.word	0x40023800
 8004994:	42470000 	.word	0x42470000
 8004998:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800499c:	4b8a      	ldr	r3, [pc, #552]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 800499e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e9      	bne.n	800497c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 8097 	beq.w	8004ae4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049b6:	2300      	movs	r3, #0
 80049b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ba:	4b83      	ldr	r3, [pc, #524]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10f      	bne.n	80049e6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	4b7f      	ldr	r3, [pc, #508]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	4a7e      	ldr	r2, [pc, #504]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 80049d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d4:	6413      	str	r3, [r2, #64]	; 0x40
 80049d6:	4b7c      	ldr	r3, [pc, #496]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80049e2:	2301      	movs	r3, #1
 80049e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e6:	4b79      	ldr	r3, [pc, #484]	; (8004bcc <HAL_RCC_OscConfig+0x4ac>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d118      	bne.n	8004a24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049f2:	4b76      	ldr	r3, [pc, #472]	; (8004bcc <HAL_RCC_OscConfig+0x4ac>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a75      	ldr	r2, [pc, #468]	; (8004bcc <HAL_RCC_OscConfig+0x4ac>)
 80049f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049fe:	f7fd f93d 	bl	8001c7c <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a06:	f7fd f939 	bl	8001c7c <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e0d3      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a18:	4b6c      	ldr	r3, [pc, #432]	; (8004bcc <HAL_RCC_OscConfig+0x4ac>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0f0      	beq.n	8004a06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d106      	bne.n	8004a3a <HAL_RCC_OscConfig+0x31a>
 8004a2c:	4b66      	ldr	r3, [pc, #408]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a30:	4a65      	ldr	r2, [pc, #404]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	6713      	str	r3, [r2, #112]	; 0x70
 8004a38:	e01c      	b.n	8004a74 <HAL_RCC_OscConfig+0x354>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b05      	cmp	r3, #5
 8004a40:	d10c      	bne.n	8004a5c <HAL_RCC_OscConfig+0x33c>
 8004a42:	4b61      	ldr	r3, [pc, #388]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a46:	4a60      	ldr	r2, [pc, #384]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004a48:	f043 0304 	orr.w	r3, r3, #4
 8004a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a4e:	4b5e      	ldr	r3, [pc, #376]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a52:	4a5d      	ldr	r2, [pc, #372]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	6713      	str	r3, [r2, #112]	; 0x70
 8004a5a:	e00b      	b.n	8004a74 <HAL_RCC_OscConfig+0x354>
 8004a5c:	4b5a      	ldr	r3, [pc, #360]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a60:	4a59      	ldr	r2, [pc, #356]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004a62:	f023 0301 	bic.w	r3, r3, #1
 8004a66:	6713      	str	r3, [r2, #112]	; 0x70
 8004a68:	4b57      	ldr	r3, [pc, #348]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6c:	4a56      	ldr	r2, [pc, #344]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004a6e:	f023 0304 	bic.w	r3, r3, #4
 8004a72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d015      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7c:	f7fd f8fe 	bl	8001c7c <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a82:	e00a      	b.n	8004a9a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a84:	f7fd f8fa 	bl	8001c7c <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e092      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a9a:	4b4b      	ldr	r3, [pc, #300]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0ee      	beq.n	8004a84 <HAL_RCC_OscConfig+0x364>
 8004aa6:	e014      	b.n	8004ad2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa8:	f7fd f8e8 	bl	8001c7c <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab0:	f7fd f8e4 	bl	8001c7c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e07c      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac6:	4b40      	ldr	r3, [pc, #256]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1ee      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ad2:	7dfb      	ldrb	r3, [r7, #23]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d105      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ad8:	4b3b      	ldr	r3, [pc, #236]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	4a3a      	ldr	r2, [pc, #232]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d068      	beq.n	8004bbe <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aec:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 030c 	and.w	r3, r3, #12
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d060      	beq.n	8004bba <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d145      	bne.n	8004b8c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b00:	4b33      	ldr	r3, [pc, #204]	; (8004bd0 <HAL_RCC_OscConfig+0x4b0>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b06:	f7fd f8b9 	bl	8001c7c <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b0e:	f7fd f8b5 	bl	8001c7c <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e04f      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b20:	4b29      	ldr	r3, [pc, #164]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1f0      	bne.n	8004b0e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	019b      	lsls	r3, r3, #6
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	3b01      	subs	r3, #1
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	061b      	lsls	r3, r3, #24
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	071b      	lsls	r3, r3, #28
 8004b58:	491b      	ldr	r1, [pc, #108]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b5e:	4b1c      	ldr	r3, [pc, #112]	; (8004bd0 <HAL_RCC_OscConfig+0x4b0>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fd f88a 	bl	8001c7c <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fd f886 	bl	8001c7c <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e020      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7e:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0x44c>
 8004b8a:	e018      	b.n	8004bbe <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8c:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <HAL_RCC_OscConfig+0x4b0>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b92:	f7fd f873 	bl	8001c7c <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b9a:	f7fd f86f 	bl	8001c7c <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e009      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bac:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <HAL_RCC_OscConfig+0x4a8>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1f0      	bne.n	8004b9a <HAL_RCC_OscConfig+0x47a>
 8004bb8:	e001      	b.n	8004bbe <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	40007000 	.word	0x40007000
 8004bd0:	42470060 	.word	0x42470060

08004bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e01d      	b.n	8004c22 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fd fb50 	bl	80022a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4619      	mov	r1, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	f000 fc78 	bl	8005508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0201 	orr.w	r2, r2, #1
 8004c40:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b06      	cmp	r3, #6
 8004c52:	d007      	beq.n	8004c64 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e01d      	b.n	8004cc0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d106      	bne.n	8004c9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f815 	bl	8004cc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	3304      	adds	r3, #4
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	f000 fc29 	bl	8005508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2201      	movs	r2, #1
 8004cec:	6839      	ldr	r1, [r7, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f001 f81e 	bl	8005d30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a15      	ldr	r2, [pc, #84]	; (8004d50 <HAL_TIM_PWM_Start+0x74>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d004      	beq.n	8004d08 <HAL_TIM_PWM_Start+0x2c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <HAL_TIM_PWM_Start+0x78>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d101      	bne.n	8004d0c <HAL_TIM_PWM_Start+0x30>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e000      	b.n	8004d0e <HAL_TIM_PWM_Start+0x32>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b06      	cmp	r3, #6
 8004d32:	d007      	beq.n	8004d44 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40010400 	.word	0x40010400

08004d58 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2200      	movs	r2, #0
 8004d68:	6839      	ldr	r1, [r7, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 ffe0 	bl	8005d30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a22      	ldr	r2, [pc, #136]	; (8004e00 <HAL_TIM_PWM_Stop+0xa8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d004      	beq.n	8004d84 <HAL_TIM_PWM_Stop+0x2c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a21      	ldr	r2, [pc, #132]	; (8004e04 <HAL_TIM_PWM_Stop+0xac>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d101      	bne.n	8004d88 <HAL_TIM_PWM_Stop+0x30>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <HAL_TIM_PWM_Stop+0x32>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d017      	beq.n	8004dbe <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6a1a      	ldr	r2, [r3, #32]
 8004d94:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10f      	bne.n	8004dbe <HAL_TIM_PWM_Stop+0x66>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6a1a      	ldr	r2, [r3, #32]
 8004da4:	f240 4344 	movw	r3, #1092	; 0x444
 8004da8:	4013      	ands	r3, r2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d107      	bne.n	8004dbe <HAL_TIM_PWM_Stop+0x66>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6a1a      	ldr	r2, [r3, #32]
 8004dc4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10f      	bne.n	8004dee <HAL_TIM_PWM_Stop+0x96>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6a1a      	ldr	r2, [r3, #32]
 8004dd4:	f240 4344 	movw	r3, #1092	; 0x444
 8004dd8:	4013      	ands	r3, r2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d107      	bne.n	8004dee <HAL_TIM_PWM_Stop+0x96>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0201 	bic.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40010400 	.word	0x40010400

08004e08 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e01d      	b.n	8004e56 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f815 	bl	8004e5e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f000 fb5e 	bl	8005508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d122      	bne.n	8004ece <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d11b      	bne.n	8004ece <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f06f 0202 	mvn.w	r2, #2
 8004e9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fb08 	bl	80054ca <HAL_TIM_IC_CaptureCallback>
 8004eba:	e005      	b.n	8004ec8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fafa 	bl	80054b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fb0b 	bl	80054de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d122      	bne.n	8004f22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d11b      	bne.n	8004f22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f06f 0204 	mvn.w	r2, #4
 8004ef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fade 	bl	80054ca <HAL_TIM_IC_CaptureCallback>
 8004f0e:	e005      	b.n	8004f1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fad0 	bl	80054b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fae1 	bl	80054de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d122      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d11b      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f06f 0208 	mvn.w	r2, #8
 8004f46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fab4 	bl	80054ca <HAL_TIM_IC_CaptureCallback>
 8004f62:	e005      	b.n	8004f70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 faa6 	bl	80054b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fab7 	bl	80054de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b10      	cmp	r3, #16
 8004f82:	d122      	bne.n	8004fca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	2b10      	cmp	r3, #16
 8004f90:	d11b      	bne.n	8004fca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f06f 0210 	mvn.w	r2, #16
 8004f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2208      	movs	r2, #8
 8004fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fa8a 	bl	80054ca <HAL_TIM_IC_CaptureCallback>
 8004fb6:	e005      	b.n	8004fc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fa7c 	bl	80054b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fa8d 	bl	80054de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d10e      	bne.n	8004ff6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d107      	bne.n	8004ff6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f06f 0201 	mvn.w	r2, #1
 8004fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fc fd39 	bl	8001a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005000:	2b80      	cmp	r3, #128	; 0x80
 8005002:	d10e      	bne.n	8005022 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500e:	2b80      	cmp	r3, #128	; 0x80
 8005010:	d107      	bne.n	8005022 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800501a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fefb 	bl	8005e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	2b40      	cmp	r3, #64	; 0x40
 800502e:	d10e      	bne.n	800504e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503a:	2b40      	cmp	r3, #64	; 0x40
 800503c:	d107      	bne.n	800504e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fa52 	bl	80054f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b20      	cmp	r3, #32
 800505a:	d10e      	bne.n	800507a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b20      	cmp	r3, #32
 8005068:	d107      	bne.n	800507a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f06f 0220 	mvn.w	r2, #32
 8005072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fec5 	bl	8005e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800507a:	bf00      	nop
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_TIM_IC_ConfigChannel+0x1a>
 8005098:	2302      	movs	r3, #2
 800509a:	e08a      	b.n	80051b2 <HAL_TIM_IC_ConfigChannel+0x130>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d11b      	bne.n	80050ea <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	6819      	ldr	r1, [r3, #0]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f000 fc71 	bl	80059a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699a      	ldr	r2, [r3, #24]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 020c 	bic.w	r2, r2, #12
 80050d4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6999      	ldr	r1, [r3, #24]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	619a      	str	r2, [r3, #24]
 80050e8:	e05a      	b.n	80051a0 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d11c      	bne.n	800512a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	6819      	ldr	r1, [r3, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f000 fcf5 	bl	8005aee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005112:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6999      	ldr	r1, [r3, #24]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	021a      	lsls	r2, r3, #8
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	619a      	str	r2, [r3, #24]
 8005128:	e03a      	b.n	80051a0 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d11b      	bne.n	8005168 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	6819      	ldr	r1, [r3, #0]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f000 fd42 	bl	8005bc8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69da      	ldr	r2, [r3, #28]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 020c 	bic.w	r2, r2, #12
 8005152:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	69d9      	ldr	r1, [r3, #28]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	61da      	str	r2, [r3, #28]
 8005166:	e01b      	b.n	80051a0 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	6819      	ldr	r1, [r3, #0]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f000 fd62 	bl	8005c40 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69da      	ldr	r2, [r3, #28]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800518a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69d9      	ldr	r1, [r3, #28]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	021a      	lsls	r2, r3, #8
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e0b4      	b.n	8005340 <HAL_TIM_PWM_ConfigChannel+0x184>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b0c      	cmp	r3, #12
 80051ea:	f200 809f 	bhi.w	800532c <HAL_TIM_PWM_ConfigChannel+0x170>
 80051ee:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	08005229 	.word	0x08005229
 80051f8:	0800532d 	.word	0x0800532d
 80051fc:	0800532d 	.word	0x0800532d
 8005200:	0800532d 	.word	0x0800532d
 8005204:	08005269 	.word	0x08005269
 8005208:	0800532d 	.word	0x0800532d
 800520c:	0800532d 	.word	0x0800532d
 8005210:	0800532d 	.word	0x0800532d
 8005214:	080052ab 	.word	0x080052ab
 8005218:	0800532d 	.word	0x0800532d
 800521c:	0800532d 	.word	0x0800532d
 8005220:	0800532d 	.word	0x0800532d
 8005224:	080052eb 	.word	0x080052eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fa0a 	bl	8005648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0208 	orr.w	r2, r2, #8
 8005242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0204 	bic.w	r2, r2, #4
 8005252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6999      	ldr	r1, [r3, #24]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	691a      	ldr	r2, [r3, #16]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	619a      	str	r2, [r3, #24]
      break;
 8005266:	e062      	b.n	800532e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68b9      	ldr	r1, [r7, #8]
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fa5a 	bl	8005728 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699a      	ldr	r2, [r3, #24]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6999      	ldr	r1, [r3, #24]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	021a      	lsls	r2, r3, #8
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	619a      	str	r2, [r3, #24]
      break;
 80052a8:	e041      	b.n	800532e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 faaf 	bl	8005814 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0208 	orr.w	r2, r2, #8
 80052c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69da      	ldr	r2, [r3, #28]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0204 	bic.w	r2, r2, #4
 80052d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69d9      	ldr	r1, [r3, #28]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	61da      	str	r2, [r3, #28]
      break;
 80052e8:	e021      	b.n	800532e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fb03 	bl	80058fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69d9      	ldr	r1, [r3, #28]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	021a      	lsls	r2, r3, #8
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	61da      	str	r2, [r3, #28]
      break;
 800532a:	e000      	b.n	800532e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800532c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIM_ConfigClockSource+0x18>
 800535c:	2302      	movs	r3, #2
 800535e:	e0a6      	b.n	80054ae <HAL_TIM_ConfigClockSource+0x166>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800537e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005386:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b40      	cmp	r3, #64	; 0x40
 8005396:	d067      	beq.n	8005468 <HAL_TIM_ConfigClockSource+0x120>
 8005398:	2b40      	cmp	r3, #64	; 0x40
 800539a:	d80b      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x6c>
 800539c:	2b10      	cmp	r3, #16
 800539e:	d073      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0x140>
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d802      	bhi.n	80053aa <HAL_TIM_ConfigClockSource+0x62>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d06f      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80053a8:	e078      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d06c      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0x140>
 80053ae:	2b30      	cmp	r3, #48	; 0x30
 80053b0:	d06a      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80053b2:	e073      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053b4:	2b70      	cmp	r3, #112	; 0x70
 80053b6:	d00d      	beq.n	80053d4 <HAL_TIM_ConfigClockSource+0x8c>
 80053b8:	2b70      	cmp	r3, #112	; 0x70
 80053ba:	d804      	bhi.n	80053c6 <HAL_TIM_ConfigClockSource+0x7e>
 80053bc:	2b50      	cmp	r3, #80	; 0x50
 80053be:	d033      	beq.n	8005428 <HAL_TIM_ConfigClockSource+0xe0>
 80053c0:	2b60      	cmp	r3, #96	; 0x60
 80053c2:	d041      	beq.n	8005448 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80053c4:	e06a      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ca:	d066      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x152>
 80053cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d0:	d017      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80053d2:	e063      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	6899      	ldr	r1, [r3, #8]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f000 fc84 	bl	8005cf0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	609a      	str	r2, [r3, #8]
      break;
 8005400:	e04c      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6899      	ldr	r1, [r3, #8]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f000 fc6d 	bl	8005cf0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005424:	609a      	str	r2, [r3, #8]
      break;
 8005426:	e039      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6818      	ldr	r0, [r3, #0]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	6859      	ldr	r1, [r3, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	461a      	mov	r2, r3
 8005436:	f000 fb2b 	bl	8005a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2150      	movs	r1, #80	; 0x50
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fc3a 	bl	8005cba <TIM_ITRx_SetConfig>
      break;
 8005446:	e029      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	6859      	ldr	r1, [r3, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	461a      	mov	r2, r3
 8005456:	f000 fb87 	bl	8005b68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2160      	movs	r1, #96	; 0x60
 8005460:	4618      	mov	r0, r3
 8005462:	f000 fc2a 	bl	8005cba <TIM_ITRx_SetConfig>
      break;
 8005466:	e019      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6859      	ldr	r1, [r3, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	461a      	mov	r2, r3
 8005476:	f000 fb0b 	bl	8005a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2140      	movs	r1, #64	; 0x40
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fc1a 	bl	8005cba <TIM_ITRx_SetConfig>
      break;
 8005486:	e009      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4619      	mov	r1, r3
 8005492:	4610      	mov	r0, r2
 8005494:	f000 fc11 	bl	8005cba <TIM_ITRx_SetConfig>
      break;
 8005498:	e000      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800549a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a40      	ldr	r2, [pc, #256]	; (800561c <TIM_Base_SetConfig+0x114>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d013      	beq.n	8005548 <TIM_Base_SetConfig+0x40>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005526:	d00f      	beq.n	8005548 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a3d      	ldr	r2, [pc, #244]	; (8005620 <TIM_Base_SetConfig+0x118>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00b      	beq.n	8005548 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a3c      	ldr	r2, [pc, #240]	; (8005624 <TIM_Base_SetConfig+0x11c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d007      	beq.n	8005548 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a3b      	ldr	r2, [pc, #236]	; (8005628 <TIM_Base_SetConfig+0x120>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d003      	beq.n	8005548 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a3a      	ldr	r2, [pc, #232]	; (800562c <TIM_Base_SetConfig+0x124>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d108      	bne.n	800555a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a2f      	ldr	r2, [pc, #188]	; (800561c <TIM_Base_SetConfig+0x114>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d02b      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005568:	d027      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2c      	ldr	r2, [pc, #176]	; (8005620 <TIM_Base_SetConfig+0x118>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d023      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a2b      	ldr	r2, [pc, #172]	; (8005624 <TIM_Base_SetConfig+0x11c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d01f      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a2a      	ldr	r2, [pc, #168]	; (8005628 <TIM_Base_SetConfig+0x120>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d01b      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a29      	ldr	r2, [pc, #164]	; (800562c <TIM_Base_SetConfig+0x124>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d017      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a28      	ldr	r2, [pc, #160]	; (8005630 <TIM_Base_SetConfig+0x128>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d013      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a27      	ldr	r2, [pc, #156]	; (8005634 <TIM_Base_SetConfig+0x12c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00f      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a26      	ldr	r2, [pc, #152]	; (8005638 <TIM_Base_SetConfig+0x130>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00b      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a25      	ldr	r2, [pc, #148]	; (800563c <TIM_Base_SetConfig+0x134>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d007      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a24      	ldr	r2, [pc, #144]	; (8005640 <TIM_Base_SetConfig+0x138>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d003      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a23      	ldr	r2, [pc, #140]	; (8005644 <TIM_Base_SetConfig+0x13c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d108      	bne.n	80055cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a0a      	ldr	r2, [pc, #40]	; (800561c <TIM_Base_SetConfig+0x114>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_Base_SetConfig+0xf8>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a0c      	ldr	r2, [pc, #48]	; (800562c <TIM_Base_SetConfig+0x124>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d103      	bne.n	8005608 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	615a      	str	r2, [r3, #20]
}
 800560e:	bf00      	nop
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40010000 	.word	0x40010000
 8005620:	40000400 	.word	0x40000400
 8005624:	40000800 	.word	0x40000800
 8005628:	40000c00 	.word	0x40000c00
 800562c:	40010400 	.word	0x40010400
 8005630:	40014000 	.word	0x40014000
 8005634:	40014400 	.word	0x40014400
 8005638:	40014800 	.word	0x40014800
 800563c:	40001800 	.word	0x40001800
 8005640:	40001c00 	.word	0x40001c00
 8005644:	40002000 	.word	0x40002000

08005648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0201 	bic.w	r2, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0303 	bic.w	r3, r3, #3
 800567e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f023 0302 	bic.w	r3, r3, #2
 8005690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a20      	ldr	r2, [pc, #128]	; (8005720 <TIM_OC1_SetConfig+0xd8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d003      	beq.n	80056ac <TIM_OC1_SetConfig+0x64>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a1f      	ldr	r2, [pc, #124]	; (8005724 <TIM_OC1_SetConfig+0xdc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d10c      	bne.n	80056c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f023 0308 	bic.w	r3, r3, #8
 80056b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f023 0304 	bic.w	r3, r3, #4
 80056c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a15      	ldr	r2, [pc, #84]	; (8005720 <TIM_OC1_SetConfig+0xd8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d003      	beq.n	80056d6 <TIM_OC1_SetConfig+0x8e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a14      	ldr	r2, [pc, #80]	; (8005724 <TIM_OC1_SetConfig+0xdc>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d111      	bne.n	80056fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	621a      	str	r2, [r3, #32]
}
 8005714:	bf00      	nop
 8005716:	371c      	adds	r7, #28
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	40010000 	.word	0x40010000
 8005724:	40010400 	.word	0x40010400

08005728 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f023 0210 	bic.w	r2, r3, #16
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	021b      	lsls	r3, r3, #8
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f023 0320 	bic.w	r3, r3, #32
 8005772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a22      	ldr	r2, [pc, #136]	; (800580c <TIM_OC2_SetConfig+0xe4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d003      	beq.n	8005790 <TIM_OC2_SetConfig+0x68>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a21      	ldr	r2, [pc, #132]	; (8005810 <TIM_OC2_SetConfig+0xe8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d10d      	bne.n	80057ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a17      	ldr	r2, [pc, #92]	; (800580c <TIM_OC2_SetConfig+0xe4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_OC2_SetConfig+0x94>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a16      	ldr	r2, [pc, #88]	; (8005810 <TIM_OC2_SetConfig+0xe8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d113      	bne.n	80057e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40010000 	.word	0x40010000
 8005810:	40010400 	.word	0x40010400

08005814 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0303 	bic.w	r3, r3, #3
 800584a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800585c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a21      	ldr	r2, [pc, #132]	; (80058f4 <TIM_OC3_SetConfig+0xe0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d003      	beq.n	800587a <TIM_OC3_SetConfig+0x66>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a20      	ldr	r2, [pc, #128]	; (80058f8 <TIM_OC3_SetConfig+0xe4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d10d      	bne.n	8005896 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005880:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a16      	ldr	r2, [pc, #88]	; (80058f4 <TIM_OC3_SetConfig+0xe0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d003      	beq.n	80058a6 <TIM_OC3_SetConfig+0x92>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <TIM_OC3_SetConfig+0xe4>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d113      	bne.n	80058ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	621a      	str	r2, [r3, #32]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	40010000 	.word	0x40010000
 80058f8:	40010400 	.word	0x40010400

080058fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	031b      	lsls	r3, r3, #12
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a12      	ldr	r2, [pc, #72]	; (80059a0 <TIM_OC4_SetConfig+0xa4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_OC4_SetConfig+0x68>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a11      	ldr	r2, [pc, #68]	; (80059a4 <TIM_OC4_SetConfig+0xa8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d109      	bne.n	8005978 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800596a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	019b      	lsls	r3, r3, #6
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40010000 	.word	0x40010000
 80059a4:	40010400 	.word	0x40010400

080059a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	f023 0201 	bic.w	r2, r3, #1
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a28      	ldr	r2, [pc, #160]	; (8005a74 <TIM_TI1_SetConfig+0xcc>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01b      	beq.n	8005a0e <TIM_TI1_SetConfig+0x66>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059dc:	d017      	beq.n	8005a0e <TIM_TI1_SetConfig+0x66>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4a25      	ldr	r2, [pc, #148]	; (8005a78 <TIM_TI1_SetConfig+0xd0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <TIM_TI1_SetConfig+0x66>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4a24      	ldr	r2, [pc, #144]	; (8005a7c <TIM_TI1_SetConfig+0xd4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00f      	beq.n	8005a0e <TIM_TI1_SetConfig+0x66>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4a23      	ldr	r2, [pc, #140]	; (8005a80 <TIM_TI1_SetConfig+0xd8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00b      	beq.n	8005a0e <TIM_TI1_SetConfig+0x66>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a22      	ldr	r2, [pc, #136]	; (8005a84 <TIM_TI1_SetConfig+0xdc>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d007      	beq.n	8005a0e <TIM_TI1_SetConfig+0x66>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4a21      	ldr	r2, [pc, #132]	; (8005a88 <TIM_TI1_SetConfig+0xe0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_TI1_SetConfig+0x66>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4a20      	ldr	r2, [pc, #128]	; (8005a8c <TIM_TI1_SetConfig+0xe4>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d101      	bne.n	8005a12 <TIM_TI1_SetConfig+0x6a>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <TIM_TI1_SetConfig+0x6c>
 8005a12:	2300      	movs	r3, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f023 0303 	bic.w	r3, r3, #3
 8005a1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	e003      	b.n	8005a32 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f043 0301 	orr.w	r3, r3, #1
 8005a30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f023 030a 	bic.w	r3, r3, #10
 8005a4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f003 030a 	and.w	r3, r3, #10
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40010000 	.word	0x40010000
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40000800 	.word	0x40000800
 8005a80:	40000c00 	.word	0x40000c00
 8005a84:	40010400 	.word	0x40010400
 8005a88:	40014000 	.word	0x40014000
 8005a8c:	40001800 	.word	0x40001800

08005a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f023 0201 	bic.w	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f023 030a 	bic.w	r3, r3, #10
 8005acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	621a      	str	r2, [r3, #32]
}
 8005ae2:	bf00      	nop
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b087      	sub	sp, #28
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
 8005afa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	f023 0210 	bic.w	r2, r3, #16
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	021b      	lsls	r3, r3, #8
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	031b      	lsls	r3, r3, #12
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	621a      	str	r2, [r3, #32]
}
 8005b5c:	bf00      	nop
 8005b5e:	371c      	adds	r7, #28
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	f023 0210 	bic.w	r2, r3, #16
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	031b      	lsls	r3, r3, #12
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ba4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	621a      	str	r2, [r3, #32]
}
 8005bbc:	bf00      	nop
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f023 0303 	bic.w	r3, r3, #3
 8005bf4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005c18:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	021b      	lsls	r3, r3, #8
 8005c1e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	621a      	str	r2, [r3, #32]
}
 8005c34:	bf00      	nop
 8005c36:	371c      	adds	r7, #28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c7e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	031b      	lsls	r3, r3, #12
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005c92:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	031b      	lsls	r3, r3, #12
 8005c98:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b085      	sub	sp, #20
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	f043 0307 	orr.w	r3, r3, #7
 8005cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	609a      	str	r2, [r3, #8]
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	021a      	lsls	r2, r3, #8
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	609a      	str	r2, [r3, #8]
}
 8005d24:	bf00      	nop
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f003 031f 	and.w	r3, r3, #31
 8005d42:	2201      	movs	r2, #1
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1a      	ldr	r2, [r3, #32]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	43db      	mvns	r3, r3
 8005d52:	401a      	ands	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1a      	ldr	r2, [r3, #32]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f003 031f 	and.w	r3, r3, #31
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	fa01 f303 	lsl.w	r3, r1, r3
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	621a      	str	r2, [r3, #32]
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b085      	sub	sp, #20
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e032      	b.n	8005df8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dca:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e03f      	b.n	8005ebe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7fc fb7a 	bl	800254c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2224      	movs	r2, #36	; 0x24
 8005e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 faf5 	bl	8006460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695a      	ldr	r2, [r3, #20]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68da      	ldr	r2, [r3, #12]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	d130      	bne.n	8005f42 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <HAL_UART_Transmit_IT+0x26>
 8005ee6:	88fb      	ldrh	r3, [r7, #6]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e029      	b.n	8005f44 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d101      	bne.n	8005efe <HAL_UART_Transmit_IT+0x38>
 8005efa:	2302      	movs	r3, #2
 8005efc:	e022      	b.n	8005f44 <HAL_UART_Transmit_IT+0x7e>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	88fa      	ldrh	r2, [r7, #6]
 8005f10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	88fa      	ldrh	r2, [r7, #6]
 8005f16:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2221      	movs	r2, #33	; 0x21
 8005f22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f3c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e000      	b.n	8005f44 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005f42:	2302      	movs	r3, #2
  }
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	d140      	bne.n	8005fec <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <HAL_UART_Receive_IT+0x26>
 8005f70:	88fb      	ldrh	r3, [r7, #6]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e039      	b.n	8005fee <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_UART_Receive_IT+0x38>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e032      	b.n	8005fee <HAL_UART_Receive_IT+0x9e>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	88fa      	ldrh	r2, [r7, #6]
 8005f9a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	88fa      	ldrh	r2, [r7, #6]
 8005fa0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2222      	movs	r2, #34	; 0x22
 8005fac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fc6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695a      	ldr	r2, [r3, #20]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0201 	orr.w	r2, r2, #1
 8005fd6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0220 	orr.w	r2, r2, #32
 8005fe6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e000      	b.n	8005fee <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005fec:	2302      	movs	r3, #2
  }
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
	...

08005ffc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800601c:	2300      	movs	r3, #0
 800601e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10d      	bne.n	800604e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <HAL_UART_IRQHandler+0x52>
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f988 	bl	800635c <UART_Receive_IT>
      return;
 800604c:	e0cc      	b.n	80061e8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 80ab 	beq.w	80061ac <HAL_UART_IRQHandler+0x1b0>
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d105      	bne.n	800606c <HAL_UART_IRQHandler+0x70>
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 80a0 	beq.w	80061ac <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <HAL_UART_IRQHandler+0x90>
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607c:	2b00      	cmp	r3, #0
 800607e:	d005      	beq.n	800608c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006084:	f043 0201 	orr.w	r2, r3, #1
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <HAL_UART_IRQHandler+0xb0>
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d005      	beq.n	80060ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a4:	f043 0202 	orr.w	r2, r3, #2
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <HAL_UART_IRQHandler+0xd0>
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c4:	f043 0204 	orr.w	r2, r3, #4
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <HAL_UART_IRQHandler+0xf0>
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e4:	f043 0208 	orr.w	r2, r3, #8
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d078      	beq.n	80061e6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f003 0320 	and.w	r3, r3, #32
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <HAL_UART_IRQHandler+0x112>
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f927 	bl	800635c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006118:	2b40      	cmp	r3, #64	; 0x40
 800611a:	bf0c      	ite	eq
 800611c:	2301      	moveq	r3, #1
 800611e:	2300      	movne	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006128:	f003 0308 	and.w	r3, r3, #8
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <HAL_UART_IRQHandler+0x13a>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d031      	beq.n	800619a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f870 	bl	800621c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006146:	2b40      	cmp	r3, #64	; 0x40
 8006148:	d123      	bne.n	8006192 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006158:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615e:	2b00      	cmp	r3, #0
 8006160:	d013      	beq.n	800618a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006166:	4a22      	ldr	r2, [pc, #136]	; (80061f0 <HAL_UART_IRQHandler+0x1f4>)
 8006168:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800616e:	4618      	mov	r0, r3
 8006170:	f7fd fdfb 	bl	8003d6a <HAL_DMA_Abort_IT>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d016      	beq.n	80061a8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006184:	4610      	mov	r0, r2
 8006186:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006188:	e00e      	b.n	80061a8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f83c 	bl	8006208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006190:	e00a      	b.n	80061a8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f838 	bl	8006208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006198:	e006      	b.n	80061a8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f834 	bl	8006208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80061a6:	e01e      	b.n	80061e6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a8:	bf00      	nop
    return;
 80061aa:	e01c      	b.n	80061e6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d008      	beq.n	80061c8 <HAL_UART_IRQHandler+0x1cc>
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f85d 	bl	8006280 <UART_Transmit_IT>
    return;
 80061c6:	e00f      	b.n	80061e8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <HAL_UART_IRQHandler+0x1ec>
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f8a5 	bl	800632c <UART_EndTransmit_IT>
    return;
 80061e2:	bf00      	nop
 80061e4:	e000      	b.n	80061e8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80061e6:	bf00      	nop
  }
}
 80061e8:	3720      	adds	r7, #32
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	08006259 	.word	0x08006259

080061f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006232:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695a      	ldr	r2, [r3, #20]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0201 	bic.w	r2, r2, #1
 8006242:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006264:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f7ff ffc8 	bl	8006208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006278:	bf00      	nop
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b21      	cmp	r3, #33	; 0x21
 8006292:	d144      	bne.n	800631e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800629c:	d11a      	bne.n	80062d4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062b2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d105      	bne.n	80062c8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	1c9a      	adds	r2, r3, #2
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	621a      	str	r2, [r3, #32]
 80062c6:	e00e      	b.n	80062e6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	621a      	str	r2, [r3, #32]
 80062d2:	e008      	b.n	80062e6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	1c59      	adds	r1, r3, #1
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6211      	str	r1, [r2, #32]
 80062de:	781a      	ldrb	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	4619      	mov	r1, r3
 80062f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10f      	bne.n	800631a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006308:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006318:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	e000      	b.n	8006320 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800631e:	2302      	movs	r3, #2
  }
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006342:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff ff51 	bl	80061f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b22      	cmp	r3, #34	; 0x22
 800636e:	d171      	bne.n	8006454 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006378:	d123      	bne.n	80063c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10e      	bne.n	80063a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	b29b      	uxth	r3, r3
 8006390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639e:	1c9a      	adds	r2, r3, #2
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	629a      	str	r2, [r3, #40]	; 0x28
 80063a4:	e029      	b.n	80063fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	629a      	str	r2, [r3, #40]	; 0x28
 80063c0:	e01b      	b.n	80063fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10a      	bne.n	80063e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6858      	ldr	r0, [r3, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d4:	1c59      	adds	r1, r3, #1
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6291      	str	r1, [r2, #40]	; 0x28
 80063da:	b2c2      	uxtb	r2, r0
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	e00c      	b.n	80063fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ec:	1c58      	adds	r0, r3, #1
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	6288      	str	r0, [r1, #40]	; 0x28
 80063f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29b      	uxth	r3, r3
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	4619      	mov	r1, r3
 8006408:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800640a:	2b00      	cmp	r3, #0
 800640c:	d120      	bne.n	8006450 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0220 	bic.w	r2, r2, #32
 800641c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800642c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695a      	ldr	r2, [r3, #20]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0201 	bic.w	r2, r2, #1
 800643c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7fb fbfe 	bl	8001c48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	e002      	b.n	8006456 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	e000      	b.n	8006456 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006454:	2302      	movs	r3, #2
  }
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006460:	b5b0      	push	{r4, r5, r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80064a0:	f023 030c 	bic.w	r3, r3, #12
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6812      	ldr	r2, [r2, #0]
 80064a8:	68f9      	ldr	r1, [r7, #12]
 80064aa:	430b      	orrs	r3, r1
 80064ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699a      	ldr	r2, [r3, #24]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064cc:	f040 80e4 	bne.w	8006698 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4aab      	ldr	r2, [pc, #684]	; (8006784 <UART_SetConfig+0x324>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d004      	beq.n	80064e4 <UART_SetConfig+0x84>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4aaa      	ldr	r2, [pc, #680]	; (8006788 <UART_SetConfig+0x328>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d16c      	bne.n	80065be <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80064e4:	f7fd ff68 	bl	80043b8 <HAL_RCC_GetPCLK2Freq>
 80064e8:	4602      	mov	r2, r0
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	009a      	lsls	r2, r3, #2
 80064f2:	441a      	add	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fe:	4aa3      	ldr	r2, [pc, #652]	; (800678c <UART_SetConfig+0x32c>)
 8006500:	fba2 2303 	umull	r2, r3, r2, r3
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	011c      	lsls	r4, r3, #4
 8006508:	f7fd ff56 	bl	80043b8 <HAL_RCC_GetPCLK2Freq>
 800650c:	4602      	mov	r2, r0
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009a      	lsls	r2, r3, #2
 8006516:	441a      	add	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006522:	f7fd ff49 	bl	80043b8 <HAL_RCC_GetPCLK2Freq>
 8006526:	4602      	mov	r2, r0
 8006528:	4613      	mov	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	009a      	lsls	r2, r3, #2
 8006530:	441a      	add	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	fbb2 f3f3 	udiv	r3, r2, r3
 800653c:	4a93      	ldr	r2, [pc, #588]	; (800678c <UART_SetConfig+0x32c>)
 800653e:	fba2 2303 	umull	r2, r3, r2, r3
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	2264      	movs	r2, #100	; 0x64
 8006546:	fb02 f303 	mul.w	r3, r2, r3
 800654a:	1aeb      	subs	r3, r5, r3
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	3332      	adds	r3, #50	; 0x32
 8006550:	4a8e      	ldr	r2, [pc, #568]	; (800678c <UART_SetConfig+0x32c>)
 8006552:	fba2 2303 	umull	r2, r3, r2, r3
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800655e:	441c      	add	r4, r3
 8006560:	f7fd ff2a 	bl	80043b8 <HAL_RCC_GetPCLK2Freq>
 8006564:	4602      	mov	r2, r0
 8006566:	4613      	mov	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	009a      	lsls	r2, r3, #2
 800656e:	441a      	add	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	fbb2 f5f3 	udiv	r5, r2, r3
 800657a:	f7fd ff1d 	bl	80043b8 <HAL_RCC_GetPCLK2Freq>
 800657e:	4602      	mov	r2, r0
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	009a      	lsls	r2, r3, #2
 8006588:	441a      	add	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	fbb2 f3f3 	udiv	r3, r2, r3
 8006594:	4a7d      	ldr	r2, [pc, #500]	; (800678c <UART_SetConfig+0x32c>)
 8006596:	fba2 2303 	umull	r2, r3, r2, r3
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	2264      	movs	r2, #100	; 0x64
 800659e:	fb02 f303 	mul.w	r3, r2, r3
 80065a2:	1aeb      	subs	r3, r5, r3
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	3332      	adds	r3, #50	; 0x32
 80065a8:	4a78      	ldr	r2, [pc, #480]	; (800678c <UART_SetConfig+0x32c>)
 80065aa:	fba2 2303 	umull	r2, r3, r2, r3
 80065ae:	095b      	lsrs	r3, r3, #5
 80065b0:	f003 0207 	and.w	r2, r3, #7
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4422      	add	r2, r4
 80065ba:	609a      	str	r2, [r3, #8]
 80065bc:	e154      	b.n	8006868 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80065be:	f7fd fee7 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 80065c2:	4602      	mov	r2, r0
 80065c4:	4613      	mov	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	009a      	lsls	r2, r3, #2
 80065cc:	441a      	add	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d8:	4a6c      	ldr	r2, [pc, #432]	; (800678c <UART_SetConfig+0x32c>)
 80065da:	fba2 2303 	umull	r2, r3, r2, r3
 80065de:	095b      	lsrs	r3, r3, #5
 80065e0:	011c      	lsls	r4, r3, #4
 80065e2:	f7fd fed5 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 80065e6:	4602      	mov	r2, r0
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	009a      	lsls	r2, r3, #2
 80065f0:	441a      	add	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	fbb2 f5f3 	udiv	r5, r2, r3
 80065fc:	f7fd fec8 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 8006600:	4602      	mov	r2, r0
 8006602:	4613      	mov	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	009a      	lsls	r2, r3, #2
 800660a:	441a      	add	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	fbb2 f3f3 	udiv	r3, r2, r3
 8006616:	4a5d      	ldr	r2, [pc, #372]	; (800678c <UART_SetConfig+0x32c>)
 8006618:	fba2 2303 	umull	r2, r3, r2, r3
 800661c:	095b      	lsrs	r3, r3, #5
 800661e:	2264      	movs	r2, #100	; 0x64
 8006620:	fb02 f303 	mul.w	r3, r2, r3
 8006624:	1aeb      	subs	r3, r5, r3
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	3332      	adds	r3, #50	; 0x32
 800662a:	4a58      	ldr	r2, [pc, #352]	; (800678c <UART_SetConfig+0x32c>)
 800662c:	fba2 2303 	umull	r2, r3, r2, r3
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006638:	441c      	add	r4, r3
 800663a:	f7fd fea9 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 800663e:	4602      	mov	r2, r0
 8006640:	4613      	mov	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	009a      	lsls	r2, r3, #2
 8006648:	441a      	add	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	fbb2 f5f3 	udiv	r5, r2, r3
 8006654:	f7fd fe9c 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 8006658:	4602      	mov	r2, r0
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	009a      	lsls	r2, r3, #2
 8006662:	441a      	add	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	fbb2 f3f3 	udiv	r3, r2, r3
 800666e:	4a47      	ldr	r2, [pc, #284]	; (800678c <UART_SetConfig+0x32c>)
 8006670:	fba2 2303 	umull	r2, r3, r2, r3
 8006674:	095b      	lsrs	r3, r3, #5
 8006676:	2264      	movs	r2, #100	; 0x64
 8006678:	fb02 f303 	mul.w	r3, r2, r3
 800667c:	1aeb      	subs	r3, r5, r3
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	3332      	adds	r3, #50	; 0x32
 8006682:	4a42      	ldr	r2, [pc, #264]	; (800678c <UART_SetConfig+0x32c>)
 8006684:	fba2 2303 	umull	r2, r3, r2, r3
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	f003 0207 	and.w	r2, r3, #7
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4422      	add	r2, r4
 8006694:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8006696:	e0e7      	b.n	8006868 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a39      	ldr	r2, [pc, #228]	; (8006784 <UART_SetConfig+0x324>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d004      	beq.n	80066ac <UART_SetConfig+0x24c>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a38      	ldr	r2, [pc, #224]	; (8006788 <UART_SetConfig+0x328>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d171      	bne.n	8006790 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80066ac:	f7fd fe84 	bl	80043b8 <HAL_RCC_GetPCLK2Freq>
 80066b0:	4602      	mov	r2, r0
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009a      	lsls	r2, r3, #2
 80066ba:	441a      	add	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c6:	4a31      	ldr	r2, [pc, #196]	; (800678c <UART_SetConfig+0x32c>)
 80066c8:	fba2 2303 	umull	r2, r3, r2, r3
 80066cc:	095b      	lsrs	r3, r3, #5
 80066ce:	011c      	lsls	r4, r3, #4
 80066d0:	f7fd fe72 	bl	80043b8 <HAL_RCC_GetPCLK2Freq>
 80066d4:	4602      	mov	r2, r0
 80066d6:	4613      	mov	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	009a      	lsls	r2, r3, #2
 80066de:	441a      	add	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	fbb2 f5f3 	udiv	r5, r2, r3
 80066ea:	f7fd fe65 	bl	80043b8 <HAL_RCC_GetPCLK2Freq>
 80066ee:	4602      	mov	r2, r0
 80066f0:	4613      	mov	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	009a      	lsls	r2, r3, #2
 80066f8:	441a      	add	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	fbb2 f3f3 	udiv	r3, r2, r3
 8006704:	4a21      	ldr	r2, [pc, #132]	; (800678c <UART_SetConfig+0x32c>)
 8006706:	fba2 2303 	umull	r2, r3, r2, r3
 800670a:	095b      	lsrs	r3, r3, #5
 800670c:	2264      	movs	r2, #100	; 0x64
 800670e:	fb02 f303 	mul.w	r3, r2, r3
 8006712:	1aeb      	subs	r3, r5, r3
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	3332      	adds	r3, #50	; 0x32
 8006718:	4a1c      	ldr	r2, [pc, #112]	; (800678c <UART_SetConfig+0x32c>)
 800671a:	fba2 2303 	umull	r2, r3, r2, r3
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006724:	441c      	add	r4, r3
 8006726:	f7fd fe47 	bl	80043b8 <HAL_RCC_GetPCLK2Freq>
 800672a:	4602      	mov	r2, r0
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	009a      	lsls	r2, r3, #2
 8006734:	441a      	add	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	fbb2 f5f3 	udiv	r5, r2, r3
 8006740:	f7fd fe3a 	bl	80043b8 <HAL_RCC_GetPCLK2Freq>
 8006744:	4602      	mov	r2, r0
 8006746:	4613      	mov	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	009a      	lsls	r2, r3, #2
 800674e:	441a      	add	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	fbb2 f3f3 	udiv	r3, r2, r3
 800675a:	4a0c      	ldr	r2, [pc, #48]	; (800678c <UART_SetConfig+0x32c>)
 800675c:	fba2 2303 	umull	r2, r3, r2, r3
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	2264      	movs	r2, #100	; 0x64
 8006764:	fb02 f303 	mul.w	r3, r2, r3
 8006768:	1aeb      	subs	r3, r5, r3
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	3332      	adds	r3, #50	; 0x32
 800676e:	4a07      	ldr	r2, [pc, #28]	; (800678c <UART_SetConfig+0x32c>)
 8006770:	fba2 2303 	umull	r2, r3, r2, r3
 8006774:	095b      	lsrs	r3, r3, #5
 8006776:	f003 020f 	and.w	r2, r3, #15
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4422      	add	r2, r4
 8006780:	609a      	str	r2, [r3, #8]
 8006782:	e071      	b.n	8006868 <UART_SetConfig+0x408>
 8006784:	40011000 	.word	0x40011000
 8006788:	40011400 	.word	0x40011400
 800678c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006790:	f7fd fdfe 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 8006794:	4602      	mov	r2, r0
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009a      	lsls	r2, r3, #2
 800679e:	441a      	add	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067aa:	4a31      	ldr	r2, [pc, #196]	; (8006870 <UART_SetConfig+0x410>)
 80067ac:	fba2 2303 	umull	r2, r3, r2, r3
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	011c      	lsls	r4, r3, #4
 80067b4:	f7fd fdec 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 80067b8:	4602      	mov	r2, r0
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009a      	lsls	r2, r3, #2
 80067c2:	441a      	add	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	fbb2 f5f3 	udiv	r5, r2, r3
 80067ce:	f7fd fddf 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 80067d2:	4602      	mov	r2, r0
 80067d4:	4613      	mov	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	009a      	lsls	r2, r3, #2
 80067dc:	441a      	add	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e8:	4a21      	ldr	r2, [pc, #132]	; (8006870 <UART_SetConfig+0x410>)
 80067ea:	fba2 2303 	umull	r2, r3, r2, r3
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	2264      	movs	r2, #100	; 0x64
 80067f2:	fb02 f303 	mul.w	r3, r2, r3
 80067f6:	1aeb      	subs	r3, r5, r3
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	3332      	adds	r3, #50	; 0x32
 80067fc:	4a1c      	ldr	r2, [pc, #112]	; (8006870 <UART_SetConfig+0x410>)
 80067fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006808:	441c      	add	r4, r3
 800680a:	f7fd fdc1 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 800680e:	4602      	mov	r2, r0
 8006810:	4613      	mov	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	009a      	lsls	r2, r3, #2
 8006818:	441a      	add	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	fbb2 f5f3 	udiv	r5, r2, r3
 8006824:	f7fd fdb4 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 8006828:	4602      	mov	r2, r0
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009a      	lsls	r2, r3, #2
 8006832:	441a      	add	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	fbb2 f3f3 	udiv	r3, r2, r3
 800683e:	4a0c      	ldr	r2, [pc, #48]	; (8006870 <UART_SetConfig+0x410>)
 8006840:	fba2 2303 	umull	r2, r3, r2, r3
 8006844:	095b      	lsrs	r3, r3, #5
 8006846:	2264      	movs	r2, #100	; 0x64
 8006848:	fb02 f303 	mul.w	r3, r2, r3
 800684c:	1aeb      	subs	r3, r5, r3
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	3332      	adds	r3, #50	; 0x32
 8006852:	4a07      	ldr	r2, [pc, #28]	; (8006870 <UART_SetConfig+0x410>)
 8006854:	fba2 2303 	umull	r2, r3, r2, r3
 8006858:	095b      	lsrs	r3, r3, #5
 800685a:	f003 020f 	and.w	r2, r3, #15
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4422      	add	r2, r4
 8006864:	609a      	str	r2, [r3, #8]
}
 8006866:	e7ff      	b.n	8006868 <UART_SetConfig+0x408>
 8006868:	bf00      	nop
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bdb0      	pop	{r4, r5, r7, pc}
 8006870:	51eb851f 	.word	0x51eb851f

08006874 <CAN_Sniffer_Initialize>:
uint32_t sniffer_tick = 0;

/* Initialize variables to a known state and verify the proper callbacks have been  *
 * assigned.                                                                        */
void CAN_Sniffer_Initialize( PCAN_SNIFFER_PACKET_MANAGER dev )
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	/* Clear the PID count */
    dev->num_pids = 0;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	705a      	strb	r2, [r3, #1]

    /* Clear the active filters */
    for( uint8_t i = 0; i < MAX_NUM_FILTERS; i++ )
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
 8006886:	e008      	b.n	800689a <CAN_Sniffer_Initialize+0x26>
    	active_filters[i] = RESERVED_FILTER;
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	4a15      	ldr	r2, [pc, #84]	; (80068e0 <CAN_Sniffer_Initialize+0x6c>)
 800688c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006890:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for( uint8_t i = 0; i < MAX_NUM_FILTERS; i++ )
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	3301      	adds	r3, #1
 8006898:	73fb      	strb	r3, [r7, #15]
 800689a:	7bfb      	ldrb	r3, [r7, #15]
 800689c:	2b18      	cmp	r3, #24
 800689e:	d9f3      	bls.n	8006888 <CAN_Sniffer_Initialize+0x14>

    /* Set the stream pointer to NULL */
    for( uint8_t i = 0; i < NUM_CAN_SNIFF; i++ )
 80068a0:	2300      	movs	r3, #0
 80068a2:	73bb      	strb	r3, [r7, #14]
 80068a4:	e008      	b.n	80068b8 <CAN_Sniffer_Initialize+0x44>
    	dev->stream[i] = NULL;
 80068a6:	7bba      	ldrb	r2, [r7, #14]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3202      	adds	r2, #2
 80068ac:	2100      	movs	r1, #0
 80068ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( uint8_t i = 0; i < NUM_CAN_SNIFF; i++ )
 80068b2:	7bbb      	ldrb	r3, [r7, #14]
 80068b4:	3301      	adds	r3, #1
 80068b6:	73bb      	strb	r3, [r7, #14]
 80068b8:	7bbb      	ldrb	r3, [r7, #14]
 80068ba:	2b18      	cmp	r3, #24
 80068bc:	d9f3      	bls.n	80068a6 <CAN_Sniffer_Initialize+0x32>

    /* Verify the CAN bus filter callback has been assigned */
    if( dev->filter != NULL )
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d006      	beq.n	80068d4 <CAN_Sniffer_Initialize+0x60>
		dev->status |= CAN_SNIFF_INIT;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	f043 0301 	orr.w	r3, r3, #1
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	701a      	strb	r2, [r3, #0]
}
 80068d4:	bf00      	nop
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	200009a4 	.word	0x200009a4

080068e4 <add_filter>:

/* Ties the CAN bus hardware peripheral to the library and will       *
 * optimize CAN bus filter usage and ensure only one filter is used   *
 * per arbitration ID.                                                */
static void add_filter( PCAN_SNIFFER_PACKET_MANAGER dev, uint16_t id )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	807b      	strh	r3, [r7, #2]
    if( (dev->status & CAN_SNIFF_INIT) == 0 )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d023      	beq.n	8006944 <add_filter+0x60>
        return;

    /* Check what filters are currently active */
    for( uint8_t i = 0; i < MAX_NUM_FILTERS; i++ )
 80068fc:	2300      	movs	r3, #0
 80068fe:	73fb      	strb	r3, [r7, #15]
 8006900:	e01c      	b.n	800693c <add_filter+0x58>
    {
        /* If the filter ID is already present, then there is no need  *
         * to add another filter. So we can break out of this function */
        if( active_filters[i] == id ) { return; }
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	4a12      	ldr	r2, [pc, #72]	; (8006950 <add_filter+0x6c>)
 8006906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800690a:	887a      	ldrh	r2, [r7, #2]
 800690c:	429a      	cmp	r2, r3
 800690e:	d01b      	beq.n	8006948 <add_filter+0x64>

        /* Increment until an open slot is available and add the new   *
         * filter to the device.                                       */
        else if( active_filters[i] == RESERVED_FILTER )
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	4a0f      	ldr	r2, [pc, #60]	; (8006950 <add_filter+0x6c>)
 8006914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800691c:	4293      	cmp	r3, r2
 800691e:	d10a      	bne.n	8006936 <add_filter+0x52>
        {
        	/* Copy the ID to the filter slot */
            active_filters[i] = id;
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	490b      	ldr	r1, [pc, #44]	; (8006950 <add_filter+0x6c>)
 8006924:	887a      	ldrh	r2, [r7, #2]
 8006926:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

            /* Request the filter from the hardware peripheral.       *
             * TODO: Error handle, what if the hardware fails or if   *
             * the hardware runs out of mailboxes?                    */
            dev->filter( id );
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	887a      	ldrh	r2, [r7, #2]
 8006930:	4610      	mov	r0, r2
 8006932:	4798      	blx	r3

            return;
 8006934:	e009      	b.n	800694a <add_filter+0x66>
    for( uint8_t i = 0; i < MAX_NUM_FILTERS; i++ )
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	3301      	adds	r3, #1
 800693a:	73fb      	strb	r3, [r7, #15]
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	2b18      	cmp	r3, #24
 8006940:	d9df      	bls.n	8006902 <add_filter+0x1e>
 8006942:	e002      	b.n	800694a <add_filter+0x66>
        return;
 8006944:	bf00      	nop
 8006946:	e000      	b.n	800694a <add_filter+0x66>
        if( active_filters[i] == id ) { return; }
 8006948:	bf00      	nop
        }
    }
}
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	200009a4 	.word	0x200009a4

08006954 <CAN_Sniffer_PID_Supported>:

/* Verify that that the PID is supported. */
PID_SUPPORTED_STATUS CAN_Sniffer_PID_Supported( PTR_PID_DATA pid )
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
    switch( pid->pid )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	885b      	ldrh	r3, [r3, #2]
 8006960:	b29b      	uxth	r3, r3
 8006962:	2b5c      	cmp	r3, #92	; 0x5c
 8006964:	d00b      	beq.n	800697e <CAN_Sniffer_PID_Supported+0x2a>
 8006966:	2b5c      	cmp	r3, #92	; 0x5c
 8006968:	dc04      	bgt.n	8006974 <CAN_Sniffer_PID_Supported+0x20>
 800696a:	2b0c      	cmp	r3, #12
 800696c:	d007      	beq.n	800697e <CAN_Sniffer_PID_Supported+0x2a>
 800696e:	2b5a      	cmp	r3, #90	; 0x5a
 8006970:	d005      	beq.n	800697e <CAN_Sniffer_PID_Supported+0x2a>
 8006972:	e006      	b.n	8006982 <CAN_Sniffer_PID_Supported+0x2e>
 8006974:	2b6f      	cmp	r3, #111	; 0x6f
 8006976:	d002      	beq.n	800697e <CAN_Sniffer_PID_Supported+0x2a>
 8006978:	f5b3 7fe4 	cmp.w	r3, #456	; 0x1c8
 800697c:	d101      	bne.n	8006982 <CAN_Sniffer_PID_Supported+0x2e>
        #endif

        #ifdef SNIFF_GAUGE_BRIGHTNESS_PID
        case SNIFF_GAUGE_BRIGHTNESS_PID:
        #endif
            return PID_SUPPORTED;
 800697e:	2301      	movs	r3, #1
 8006980:	e000      	b.n	8006984 <CAN_Sniffer_PID_Supported+0x30>

        #endif

        default:
            return PID_NOT_SUPPORTED;
 8006982:	2300      	movs	r3, #0
    }
}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <CAN_Sniffer_Add_PID>:
/* Add a PID to the packet manager to be streamed. This will return   *
 * @PID_SUPPORTED_STATUS to verify if the PID was or was not added.   *
 * Upon adding a supported PID, the library will request a hardware   *
 * filter if necessary (see add_filter)                               */
PID_SUPPORTED_STATUS CAN_Sniffer_Add_PID( PCAN_SNIFFER_PACKET_MANAGER dev, PTR_PID_DATA pid )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
	/* Check to see if the PID can be sniffed by the library          */
	if( CAN_Sniffer_PID_Supported( pid ) == PID_SUPPORTED )
 800699a:	6838      	ldr	r0, [r7, #0]
 800699c:	f7ff ffda 	bl	8006954 <CAN_Sniffer_PID_Supported>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d149      	bne.n	8006a3a <CAN_Sniffer_Add_PID+0xaa>
	{
		/* Determine what arbitration ID needs to be monitored to     *
		 * obtain the PID data.	                                      */
		switch( pid->pid )
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	885b      	ldrh	r3, [r3, #2]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2b5c      	cmp	r3, #92	; 0x5c
 80069ae:	d01c      	beq.n	80069ea <CAN_Sniffer_Add_PID+0x5a>
 80069b0:	2b5c      	cmp	r3, #92	; 0x5c
 80069b2:	dc04      	bgt.n	80069be <CAN_Sniffer_Add_PID+0x2e>
 80069b4:	2b0c      	cmp	r3, #12
 80069b6:	d008      	beq.n	80069ca <CAN_Sniffer_Add_PID+0x3a>
 80069b8:	2b5a      	cmp	r3, #90	; 0x5a
 80069ba:	d00e      	beq.n	80069da <CAN_Sniffer_Add_PID+0x4a>
 80069bc:	e02d      	b.n	8006a1a <CAN_Sniffer_Add_PID+0x8a>
 80069be:	2b6f      	cmp	r3, #111	; 0x6f
 80069c0:	d01b      	beq.n	80069fa <CAN_Sniffer_Add_PID+0x6a>
 80069c2:	f5b3 7fe4 	cmp.w	r3, #456	; 0x1c8
 80069c6:	d020      	beq.n	8006a0a <CAN_Sniffer_Add_PID+0x7a>
 80069c8:	e027      	b.n	8006a1a <CAN_Sniffer_Add_PID+0x8a>
		{
            #ifdef FORD_FOCUS_STRS_2013_2018

			#ifdef SNIFF_ENGINE_RPM_PID
			case SNIFF_ENGINE_RPM_PID:
				add_filter( dev, SNIFF_ENGINE_RPM_ID );
 80069ca:	2190      	movs	r1, #144	; 0x90
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff ff89 	bl	80068e4 <add_filter>
				pid->base_unit = PID_UNITS_RPM;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2206      	movs	r2, #6
 80069d6:	715a      	strb	r2, [r3, #5]
				break;
 80069d8:	e01f      	b.n	8006a1a <CAN_Sniffer_Add_PID+0x8a>
			#endif

			#ifdef SNIFF_ACCEL_PEDAL_POS_PID
			case SNIFF_ACCEL_PEDAL_POS_PID:
				add_filter( dev, SNIFF_ACCEL_PEDAL_POS_ID );
 80069da:	2180      	movs	r1, #128	; 0x80
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7ff ff81 	bl	80068e4 <add_filter>
				pid->base_unit = PID_UNITS_PERCENT;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2201      	movs	r2, #1
 80069e6:	715a      	strb	r2, [r3, #5]
				break;
 80069e8:	e017      	b.n	8006a1a <CAN_Sniffer_Add_PID+0x8a>
			#endif

			#ifdef SNIFF_ENGINE_OIL_TEMP_PID
			case SNIFF_ENGINE_OIL_TEMP_PID:
				add_filter( dev, SNIFF_ENGINE_OIL_TEMP_ID );
 80069ea:	21f8      	movs	r1, #248	; 0xf8
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff ff79 	bl	80068e4 <add_filter>
				pid->base_unit = PID_UNITS_CELCIUS;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2202      	movs	r2, #2
 80069f6:	715a      	strb	r2, [r3, #5]
				break;
 80069f8:	e00f      	b.n	8006a1a <CAN_Sniffer_Add_PID+0x8a>
			#endif

			#ifdef SNIFF_BOOST_PRESSURE_PID
			case SNIFF_BOOST_PRESSURE_PID:
				add_filter( dev, SNIFF_BOOST_PRESSURE_ID );
 80069fa:	21f8      	movs	r1, #248	; 0xf8
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff ff71 	bl	80068e4 <add_filter>
				pid->base_unit = PID_UNITS_KPA;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2204      	movs	r2, #4
 8006a06:	715a      	strb	r2, [r3, #5]
				break;
 8006a08:	e007      	b.n	8006a1a <CAN_Sniffer_Add_PID+0x8a>
			#endif

            #ifdef SNIFF_GAUGE_BRIGHTNESS_PID
            case SNIFF_GAUGE_BRIGHTNESS_PID:
                add_filter( dev, SNIFF_GAUGE_BRIGHTNESS_ID );
 8006a0a:	21c8      	movs	r1, #200	; 0xc8
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff ff69 	bl	80068e4 <add_filter>
                pid->base_unit = PID_UNITS_PERCENT;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2201      	movs	r2, #1
 8006a16:	715a      	strb	r2, [r3, #5]
                break;
 8006a18:	bf00      	nop
            #endif

            #endif
		}

		dev->stream[dev->num_pids] = pid;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	785b      	ldrb	r3, [r3, #1]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3202      	adds	r2, #2
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		/* Increment the number of PIDs being streamed */
		dev->num_pids++;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	705a      	strb	r2, [r3, #1]

		/* PID is supported and the filter is configured */
		return PID_SUPPORTED;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e000      	b.n	8006a3c <CAN_Sniffer_Add_PID+0xac>
	}

	/* This PID is not supported, no filters were added */
	else { return PID_NOT_SUPPORTED; }
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <CAN_Sniffer_Add_Packet>:

void CAN_Sniffer_Add_Packet( PCAN_SNIFFER_PACKET_MANAGER dev, uint16_t arbitration_id, uint8_t* packet_data )
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	817b      	strh	r3, [r7, #10]
	/* Check all of the PIDs */
    for( uint8_t i = 0; i < dev->num_pids; i++ )
 8006a52:	2300      	movs	r3, #0
 8006a54:	75fb      	strb	r3, [r7, #23]
 8006a56:	e0f1      	b.n	8006c3c <CAN_Sniffer_Add_Packet+0x1f8>
    {
    	if( dev->stream[i] != NULL )
 8006a58:	7dfa      	ldrb	r2, [r7, #23]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3202      	adds	r2, #2
 8006a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 80e7 	beq.w	8006c36 <CAN_Sniffer_Add_Packet+0x1f2>
    	{
            uint8_t timestamp_flag = 1;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	75bb      	strb	r3, [r7, #22]

			switch( arbitration_id )
 8006a6c:	897b      	ldrh	r3, [r7, #10]
 8006a6e:	2b90      	cmp	r3, #144	; 0x90
 8006a70:	d00a      	beq.n	8006a88 <CAN_Sniffer_Add_Packet+0x44>
 8006a72:	2b90      	cmp	r3, #144	; 0x90
 8006a74:	dc02      	bgt.n	8006a7c <CAN_Sniffer_Add_Packet+0x38>
 8006a76:	2b80      	cmp	r3, #128	; 0x80
 8006a78:	d032      	beq.n	8006ae0 <CAN_Sniffer_Add_Packet+0x9c>
 8006a7a:	e0c7      	b.n	8006c0c <CAN_Sniffer_Add_Packet+0x1c8>
 8006a7c:	2bc8      	cmp	r3, #200	; 0xc8
 8006a7e:	f000 80a2 	beq.w	8006bc6 <CAN_Sniffer_Add_Packet+0x182>
 8006a82:	2bf8      	cmp	r3, #248	; 0xf8
 8006a84:	d059      	beq.n	8006b3a <CAN_Sniffer_Add_Packet+0xf6>
 8006a86:	e0c1      	b.n	8006c0c <CAN_Sniffer_Add_Packet+0x1c8>
                #ifdef FORD_FOCUS_STRS_2013_2018

                #ifdef SNIFF_ENGINE_RPM_PID
				case SNIFF_ENGINE_RPM_ID:
					/* Engine RPM */
					if( (dev->stream[i]->pid == MODE1_ENGINE_RPM) && (dev->stream[i]->mode == MODE1) )
 8006a88:	7dfa      	ldrb	r2, [r7, #23]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3202      	adds	r2, #2
 8006a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a92:	885b      	ldrh	r3, [r3, #2]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b0c      	cmp	r3, #12
 8006a98:	f040 80bb 	bne.w	8006c12 <CAN_Sniffer_Add_Packet+0x1ce>
 8006a9c:	7dfa      	ldrb	r2, [r7, #23]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3202      	adds	r2, #2
 8006aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	f040 80b1 	bne.w	8006c12 <CAN_Sniffer_Add_Packet+0x1ce>
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5])) * (float)2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	021b      	lsls	r3, r3, #8
 8006ab8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	3205      	adds	r2, #5
 8006ac0:	7812      	ldrb	r2, [r2, #0]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	ee07 3a90 	vmov	s15, r3
 8006ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006acc:	7dfa      	ldrb	r2, [r7, #23]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3202      	adds	r2, #2
 8006ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006ada:	edc3 7a02 	vstr	s15, [r3, #8]
					break;
 8006ade:	e098      	b.n	8006c12 <CAN_Sniffer_Add_Packet+0x1ce>
                #endif

                #ifdef SNIFF_ACCEL_PEDAL_POS_PID
				case SNIFF_ACCEL_PEDAL_POS_ID:
					/* Accelerator Pedal */
					if( (dev->stream[i]->pid == MODE1_REL_ACCELERATOR_PEDAL_POS) && (dev->stream[i]->mode == MODE1) )
 8006ae0:	7dfa      	ldrb	r2, [r7, #23]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3202      	adds	r2, #2
 8006ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aea:	885b      	ldrh	r3, [r3, #2]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b5a      	cmp	r3, #90	; 0x5a
 8006af0:	f040 8091 	bne.w	8006c16 <CAN_Sniffer_Add_Packet+0x1d2>
 8006af4:	7dfa      	ldrb	r2, [r7, #23]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	3202      	adds	r2, #2
 8006afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	f040 8087 	bne.w	8006c16 <CAN_Sniffer_Add_Packet+0x1d2>
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1])) / (float)10;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	021b      	lsls	r3, r3, #8
 8006b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	3201      	adds	r2, #1
 8006b16:	7812      	ldrb	r2, [r2, #0]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b22:	7dfa      	ldrb	r2, [r7, #23]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	3202      	adds	r2, #2
 8006b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006b30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b34:	edc3 7a02 	vstr	s15, [r3, #8]
					break;
 8006b38:	e06d      	b.n	8006c16 <CAN_Sniffer_Add_Packet+0x1d2>
                #endif

                #ifdef SNIFF_ENGINE_OIL_TEMP_PID
				case SNIFF_ENGINE_OIL_TEMP_ID:
					/* Engine Oil Temperature */
					if( (dev->stream[i]->pid == MODE1_ENGINE_OIL_TEMPERATURE) && (dev->stream[i]->mode == MODE1) ) {
 8006b3a:	7dfa      	ldrb	r2, [r7, #23]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3202      	adds	r2, #2
 8006b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b44:	885b      	ldrh	r3, [r3, #2]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	2b5c      	cmp	r3, #92	; 0x5c
 8006b4a:	d11b      	bne.n	8006b84 <CAN_Sniffer_Add_Packet+0x140>
 8006b4c:	7dfa      	ldrb	r2, [r7, #23]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3202      	adds	r2, #2
 8006b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d112      	bne.n	8006b84 <CAN_Sniffer_Add_Packet+0x140>
					    dev->stream[i]->pid_value = (float)packet_data[7] - (float)60;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3307      	adds	r3, #7
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	ee07 3a90 	vmov	s15, r3
 8006b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6c:	7dfa      	ldrb	r2, [r7, #23]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3202      	adds	r2, #2
 8006b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b76:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8006c54 <CAN_Sniffer_Add_Packet+0x210>
 8006b7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b7e:	edc3 7a02 	vstr	s15, [r3, #8]

					/* Boost Pressure */
					else if( (dev->stream[i]->pid == MODE1_TURBO_INLET_PRESSURE) && (dev->stream[i]->mode == MODE1) ) {
						dev->stream[i]->pid_value = (float)packet_data[5];
					}
					break;
 8006b82:	e04a      	b.n	8006c1a <CAN_Sniffer_Add_Packet+0x1d6>
					else if( (dev->stream[i]->pid == MODE1_TURBO_INLET_PRESSURE) && (dev->stream[i]->mode == MODE1) ) {
 8006b84:	7dfa      	ldrb	r2, [r7, #23]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	3202      	adds	r2, #2
 8006b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8e:	885b      	ldrh	r3, [r3, #2]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b6f      	cmp	r3, #111	; 0x6f
 8006b94:	d141      	bne.n	8006c1a <CAN_Sniffer_Add_Packet+0x1d6>
 8006b96:	7dfa      	ldrb	r2, [r7, #23]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3202      	adds	r2, #2
 8006b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d138      	bne.n	8006c1a <CAN_Sniffer_Add_Packet+0x1d6>
						dev->stream[i]->pid_value = (float)packet_data[5];
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	3305      	adds	r3, #5
 8006bac:	7819      	ldrb	r1, [r3, #0]
 8006bae:	7dfa      	ldrb	r2, [r7, #23]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3202      	adds	r2, #2
 8006bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb8:	ee07 1a90 	vmov	s15, r1
 8006bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc0:	edc3 7a02 	vstr	s15, [r3, #8]
					break;
 8006bc4:	e029      	b.n	8006c1a <CAN_Sniffer_Add_Packet+0x1d6>
                #endif

                #ifdef SNIFF_GAUGE_BRIGHTNESS_PID
				case SNIFF_GAUGE_BRIGHTNESS_ID:
				    if( (dev->stream[i]->pid == SNIFF_GAUGE_BRIGHTNESS) && (dev->stream[i]->mode == SNIFF) )
 8006bc6:	7dfa      	ldrb	r2, [r7, #23]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3202      	adds	r2, #2
 8006bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd0:	885b      	ldrh	r3, [r3, #2]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	f5b3 7fe4 	cmp.w	r3, #456	; 0x1c8
 8006bd8:	d121      	bne.n	8006c1e <CAN_Sniffer_Add_Packet+0x1da>
 8006bda:	7dfa      	ldrb	r2, [r7, #23]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3202      	adds	r2, #2
 8006be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2bde      	cmp	r3, #222	; 0xde
 8006bea:	d118      	bne.n	8006c1e <CAN_Sniffer_Add_Packet+0x1da>
				        dev->stream[i]->pid_value = (float)(packet_data[0] & 0x1F);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 011f 	and.w	r1, r3, #31
 8006bf4:	7dfa      	ldrb	r2, [r7, #23]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3202      	adds	r2, #2
 8006bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfe:	ee07 1a90 	vmov	s15, r1
 8006c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c06:	edc3 7a02 	vstr	s15, [r3, #8]
				    break;
 8006c0a:	e008      	b.n	8006c1e <CAN_Sniffer_Add_Packet+0x1da>
                #endif

                #endif

                default:
                    timestamp_flag = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	75bb      	strb	r3, [r7, #22]
                    break;
 8006c10:	e006      	b.n	8006c20 <CAN_Sniffer_Add_Packet+0x1dc>
					break;
 8006c12:	bf00      	nop
 8006c14:	e004      	b.n	8006c20 <CAN_Sniffer_Add_Packet+0x1dc>
					break;
 8006c16:	bf00      	nop
 8006c18:	e002      	b.n	8006c20 <CAN_Sniffer_Add_Packet+0x1dc>
					break;
 8006c1a:	bf00      	nop
 8006c1c:	e000      	b.n	8006c20 <CAN_Sniffer_Add_Packet+0x1dc>
				    break;
 8006c1e:	bf00      	nop
			}

            if( timestamp_flag )
 8006c20:	7dbb      	ldrb	r3, [r7, #22]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d007      	beq.n	8006c36 <CAN_Sniffer_Add_Packet+0x1f2>
                dev->stream[i]->timestamp = sniffer_tick;
 8006c26:	7dfa      	ldrb	r2, [r7, #23]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3202      	adds	r2, #2
 8006c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c30:	4a09      	ldr	r2, [pc, #36]	; (8006c58 <CAN_Sniffer_Add_Packet+0x214>)
 8006c32:	6812      	ldr	r2, [r2, #0]
 8006c34:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < dev->num_pids; i++ )
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	75fb      	strb	r3, [r7, #23]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	785b      	ldrb	r3, [r3, #1]
 8006c40:	7dfa      	ldrb	r2, [r7, #23]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	f4ff af08 	bcc.w	8006a58 <CAN_Sniffer_Add_Packet+0x14>
    	}
    }
}
 8006c48:	bf00      	nop
 8006c4a:	371c      	adds	r7, #28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	42700000 	.word	0x42700000
 8006c58:	20000248 	.word	0x20000248

08006c5c <CAN_Sniffer_tick>:

void CAN_Sniffer_tick( void )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
    sniffer_tick++;
 8006c60:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <CAN_Sniffer_tick+0x18>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3301      	adds	r3, #1
 8006c66:	4a03      	ldr	r2, [pc, #12]	; (8006c74 <CAN_Sniffer_tick+0x18>)
 8006c68:	6013      	str	r3, [r2, #0]
}
 8006c6a:	bf00      	nop
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	20000248 	.word	0x20000248

08006c78 <map>:
DD_CAN_FILTER filter                      = null;

DIGITALDASH_INIT_STATUS DigitalDash_Config_Null_Check( void );

static uint32_t map(uint32_t in, uint32_t inMin, uint32_t inMax, uint32_t outMin, uint32_t outMax)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	603b      	str	r3, [r7, #0]
    return (((in - inMin)*(outMax - outMin))/(inMax - inMin)) + outMin;
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	69b9      	ldr	r1, [r7, #24]
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	1a8a      	subs	r2, r1, r2
 8006c92:	fb02 f203 	mul.w	r2, r2, r3
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	1acb      	subs	r3, r1, r3
 8006c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	4413      	add	r3, r2
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <DigitalDash_Reset_PID>:

static void DigitalDash_Reset_PID( PTR_PID_DATA pid )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
    pid->acquisition_type = PID_UNASSIGNED;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	741a      	strb	r2, [r3, #16]
    pid->pid_value        = 0;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f04f 0200 	mov.w	r2, #0
 8006cc4:	609a      	str	r2, [r3, #8]
    pid->timestamp        = 0;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	60da      	str	r2, [r3, #12]
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <DigitalDash_Reset_PID_Stream>:

/* Clear ALL of the PIDs, this should only be called when the *
 * entire Digital Dash is reset                               */
static void DigitalDash_Reset_PID_Stream( void )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
	num_pids = 0x00000000;
 8006cde:	4b27      	ldr	r3, [pc, #156]	; (8006d7c <DigitalDash_Reset_PID_Stream+0xa4>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	601a      	str	r2, [r3, #0]

	for( uint8_t index = 0; index < DD_MAX_PIDS; index++ )
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	71fb      	strb	r3, [r7, #7]
 8006ce8:	e03f      	b.n	8006d6a <DigitalDash_Reset_PID_Stream+0x92>
	{
		stream[index].pid = 0x00;
 8006cea:	79fa      	ldrb	r2, [r7, #7]
 8006cec:	4924      	ldr	r1, [pc, #144]	; (8006d80 <DigitalDash_Reset_PID_Stream+0xa8>)
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	440b      	add	r3, r1
 8006cf8:	3302      	adds	r3, #2
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	801a      	strh	r2, [r3, #0]
		stream[index].pid_unit = PID_UNITS_NOT_APPLICABLE;
 8006cfe:	79fa      	ldrb	r2, [r7, #7]
 8006d00:	491f      	ldr	r1, [pc, #124]	; (8006d80 <DigitalDash_Reset_PID_Stream+0xa8>)
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	2200      	movs	r2, #0
 8006d10:	701a      	strb	r2, [r3, #0]
		stream[index].base_unit = PID_UNITS_NOT_APPLICABLE;
 8006d12:	79fa      	ldrb	r2, [r7, #7]
 8006d14:	491a      	ldr	r1, [pc, #104]	; (8006d80 <DigitalDash_Reset_PID_Stream+0xa8>)
 8006d16:	4613      	mov	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	440b      	add	r3, r1
 8006d20:	3305      	adds	r3, #5
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
		stream[index].acquisition_type = PID_UNASSIGNED;
 8006d26:	79fa      	ldrb	r2, [r7, #7]
 8006d28:	4915      	ldr	r1, [pc, #84]	; (8006d80 <DigitalDash_Reset_PID_Stream+0xa8>)
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	440b      	add	r3, r1
 8006d34:	3310      	adds	r3, #16
 8006d36:	2200      	movs	r2, #0
 8006d38:	701a      	strb	r2, [r3, #0]
		stream[index].pid_value = 0;
 8006d3a:	79fa      	ldrb	r2, [r7, #7]
 8006d3c:	4910      	ldr	r1, [pc, #64]	; (8006d80 <DigitalDash_Reset_PID_Stream+0xa8>)
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	440b      	add	r3, r1
 8006d48:	3308      	adds	r3, #8
 8006d4a:	f04f 0200 	mov.w	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]
		stream[index].timestamp = 0;
 8006d50:	79fa      	ldrb	r2, [r7, #7]
 8006d52:	490b      	ldr	r1, [pc, #44]	; (8006d80 <DigitalDash_Reset_PID_Stream+0xa8>)
 8006d54:	4613      	mov	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	440b      	add	r3, r1
 8006d5e:	330c      	adds	r3, #12
 8006d60:	2200      	movs	r2, #0
 8006d62:	601a      	str	r2, [r3, #0]
	for( uint8_t index = 0; index < DD_MAX_PIDS; index++ )
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	3301      	adds	r3, #1
 8006d68:	71fb      	strb	r3, [r7, #7]
 8006d6a:	79fb      	ldrb	r3, [r7, #7]
 8006d6c:	2b18      	cmp	r3, #24
 8006d6e:	d9bc      	bls.n	8006cea <DigitalDash_Reset_PID_Stream+0x12>
	}
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	2000024c 	.word	0x2000024c
 8006d80:	20000250 	.word	0x20000250

08006d84 <DigitalDash_Add_PID_To_Stream>:
 * assigned to data acquisition of the PID must also save the        *
 * pointer and update the value any time it has new data.            *
 * Lib_digital_dash will also be required to track the number of     *
 * requesters per PID to ensure no stream gets cut prematurely.      */
static PTR_PID_DATA DigitalDash_Add_PID_To_Stream( PTR_PID_DATA pid )
{
 8006d84:	b5b0      	push	{r4, r5, r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	/* Declare a NULL pointer */
	PTR_PID_DATA ptr = NULL;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60bb      	str	r3, [r7, #8]

	/* Iterate through every currently streamed PID and check if the *
	 * PID is being streamed                                         */
	for( uint8_t i = 0; i <= num_pids; i++ )
 8006d90:	2300      	movs	r3, #0
 8006d92:	73fb      	strb	r3, [r7, #15]
 8006d94:	e03c      	b.n	8006e10 <DigitalDash_Add_PID_To_Stream+0x8c>
	{
		/* If so, return the pointer */
		if( stream[i].pid == pid->pid  &&
 8006d96:	7bfa      	ldrb	r2, [r7, #15]
 8006d98:	4950      	ldr	r1, [pc, #320]	; (8006edc <DigitalDash_Add_PID_To_Stream+0x158>)
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	440b      	add	r3, r1
 8006da4:	3302      	adds	r3, #2
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	885b      	ldrh	r3, [r3, #2]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d12a      	bne.n	8006e0a <DigitalDash_Add_PID_To_Stream+0x86>
				stream[i].mode == pid->mode )
 8006db4:	7bfa      	ldrb	r2, [r7, #15]
 8006db6:	4949      	ldr	r1, [pc, #292]	; (8006edc <DigitalDash_Add_PID_To_Stream+0x158>)
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	440b      	add	r3, r1
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	b2db      	uxtb	r3, r3
		if( stream[i].pid == pid->pid  &&
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d11c      	bne.n	8006e0a <DigitalDash_Add_PID_To_Stream+0x86>
		{
			/* Increment the number of devices */
			stream[i].devices++;
 8006dd0:	7bfa      	ldrb	r2, [r7, #15]
 8006dd2:	4942      	ldr	r1, [pc, #264]	; (8006edc <DigitalDash_Add_PID_To_Stream+0x158>)
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	440b      	add	r3, r1
 8006dde:	3311      	adds	r3, #17
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	3301      	adds	r3, #1
 8006de6:	b2d8      	uxtb	r0, r3
 8006de8:	493c      	ldr	r1, [pc, #240]	; (8006edc <DigitalDash_Add_PID_To_Stream+0x158>)
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	440b      	add	r3, r1
 8006df4:	3311      	adds	r3, #17
 8006df6:	4602      	mov	r2, r0
 8006df8:	701a      	strb	r2, [r3, #0]
			return &stream[i];
 8006dfa:	7bfa      	ldrb	r2, [r7, #15]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4a35      	ldr	r2, [pc, #212]	; (8006edc <DigitalDash_Add_PID_To_Stream+0x158>)
 8006e06:	4413      	add	r3, r2
 8006e08:	e064      	b.n	8006ed4 <DigitalDash_Add_PID_To_Stream+0x150>
	for( uint8_t i = 0; i <= num_pids; i++ )
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	73fb      	strb	r3, [r7, #15]
 8006e10:	7bfa      	ldrb	r2, [r7, #15]
 8006e12:	4b33      	ldr	r3, [pc, #204]	; (8006ee0 <DigitalDash_Add_PID_To_Stream+0x15c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d9bd      	bls.n	8006d96 <DigitalDash_Add_PID_To_Stream+0x12>
		}
	}

	/* Clear any data the PID has */
	DigitalDash_Reset_PID( pid );
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7ff ff48 	bl	8006cb0 <DigitalDash_Reset_PID>

	/* Copy the PID to the next available stream slot */
	stream[num_pids] = *pid;
 8006e20:	4b2f      	ldr	r3, [pc, #188]	; (8006ee0 <DigitalDash_Add_PID_To_Stream+0x15c>)
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	492d      	ldr	r1, [pc, #180]	; (8006edc <DigitalDash_Add_PID_To_Stream+0x158>)
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	18ca      	adds	r2, r1, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4614      	mov	r4, r2
 8006e34:	461d      	mov	r5, r3
 8006e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e3a:	682b      	ldr	r3, [r5, #0]
 8006e3c:	6023      	str	r3, [r4, #0]

	/* Increment the number of devices */
	stream[num_pids].devices++;
 8006e3e:	4b28      	ldr	r3, [pc, #160]	; (8006ee0 <DigitalDash_Add_PID_To_Stream+0x15c>)
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	4926      	ldr	r1, [pc, #152]	; (8006edc <DigitalDash_Add_PID_To_Stream+0x158>)
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	3311      	adds	r3, #17
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	3301      	adds	r3, #1
 8006e56:	b2d8      	uxtb	r0, r3
 8006e58:	4920      	ldr	r1, [pc, #128]	; (8006edc <DigitalDash_Add_PID_To_Stream+0x158>)
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	440b      	add	r3, r1
 8006e64:	3311      	adds	r3, #17
 8006e66:	4602      	mov	r2, r0
 8006e68:	701a      	strb	r2, [r3, #0]

	/* Get the pointer of that slot */
	ptr = &stream[num_pids];
 8006e6a:	4b1d      	ldr	r3, [pc, #116]	; (8006ee0 <DigitalDash_Add_PID_To_Stream+0x15c>)
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4a19      	ldr	r2, [pc, #100]	; (8006edc <DigitalDash_Add_PID_To_Stream+0x158>)
 8006e78:	4413      	add	r3, r2
 8006e7a:	60bb      	str	r3, [r7, #8]

	/* Increment the number of PIDs */
	num_pids++;
 8006e7c:	4b18      	ldr	r3, [pc, #96]	; (8006ee0 <DigitalDash_Add_PID_To_Stream+0x15c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3301      	adds	r3, #1
 8006e82:	4a17      	ldr	r2, [pc, #92]	; (8006ee0 <DigitalDash_Add_PID_To_Stream+0x15c>)
 8006e84:	6013      	str	r3, [r2, #0]

	/* Get the base units */
	ptr->base_unit = get_pid_base_unit( ptr->mode , pid->pid );
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	885b      	ldrh	r3, [r3, #2]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	4619      	mov	r1, r3
 8006e94:	4610      	mov	r0, r2
 8006e96:	f002 f917 	bl	80090c8 <get_pid_base_unit>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	715a      	strb	r2, [r3, #5]

	#ifdef LIB_CAN_BUS_SNIFFER_H_
	/* Add the PID to the sniffer if supported */
	if( CAN_Sniffer_Add_PID( &sniffer, ptr ) == PID_SUPPORTED ) {
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	480f      	ldr	r0, [pc, #60]	; (8006ee4 <DigitalDash_Add_PID_To_Stream+0x160>)
 8006ea6:	f7ff fd73 	bl	8006990 <CAN_Sniffer_Add_PID>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d104      	bne.n	8006eba <DigitalDash_Add_PID_To_Stream+0x136>
		ptr->acquisition_type = PID_ASSIGNED_TO_CAN_SNIFFER;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	741a      	strb	r2, [r3, #16]
		return ptr;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	e00c      	b.n	8006ed4 <DigitalDash_Add_PID_To_Stream+0x150>
	}
	#endif

	#ifdef LIB_OBDII_H_
	/* Add the PID to the OBDII stream if supported */
	if( OBDII_add_PID_request( &obdii, ptr ) == OBDII_OK ) {
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	480a      	ldr	r0, [pc, #40]	; (8006ee8 <DigitalDash_Add_PID_To_Stream+0x164>)
 8006ebe:	f001 f977 	bl	80081b0 <OBDII_add_PID_request>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d104      	bne.n	8006ed2 <DigitalDash_Add_PID_To_Stream+0x14e>
		ptr->acquisition_type = PID_ASSIGNED_TO_OBDII;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	741a      	strb	r2, [r3, #16]
		return ptr;
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	e000      	b.n	8006ed4 <DigitalDash_Add_PID_To_Stream+0x150>
	}
	#endif

	/* TODO: This should not be reached. For now, the data will just *
	 * never update.                                                 */
	return ptr;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bdb0      	pop	{r4, r5, r7, pc}
 8006edc:	20000250 	.word	0x20000250
 8006ee0:	2000024c 	.word	0x2000024c
 8006ee4:	200006c0 	.word	0x200006c0
 8006ee8:	200005c0 	.word	0x200005c0

08006eec <DigitalDash_Reset_App>:

/* Clear all variables except the function callbacks */
void DigitalDash_Reset_App( void )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
    app_flags               = 0x00000000;
 8006ef0:	4b0f      	ldr	r3, [pc, #60]	; (8006f30 <DigitalDash_Reset_App+0x44>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]
    state                   = DD_OP_OFF;
 8006ef6:	4b0f      	ldr	r3, [pc, #60]	; (8006f34 <DigitalDash_Reset_App+0x48>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	701a      	strb	r2, [r3, #0]
    Brightness              = 0x00;
 8006efc:	4b0e      	ldr	r3, [pc, #56]	; (8006f38 <DigitalDash_Reset_App+0x4c>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	701a      	strb	r2, [r3, #0]
    Set_Brightness          = LCD_MAX_BRIGHTNESS;
 8006f02:	4b0e      	ldr	r3, [pc, #56]	; (8006f3c <DigitalDash_Reset_App+0x50>)
 8006f04:	22ff      	movs	r2, #255	; 0xff
 8006f06:	701a      	strb	r2, [r3, #0]
    digitaldash_delay       = 0x00000000;
 8006f08:	4b0d      	ldr	r3, [pc, #52]	; (8006f40 <DigitalDash_Reset_App+0x54>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	601a      	str	r2, [r3, #0]
    digitaldash_bklt_wtchdg = 0x00000000;
 8006f0e:	4b0d      	ldr	r3, [pc, #52]	; (8006f44 <DigitalDash_Reset_App+0x58>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]
    digitaldash_app_wtchdg  = 0xFFFFFFFF;
 8006f14:	4b0c      	ldr	r3, [pc, #48]	; (8006f48 <DigitalDash_Reset_App+0x5c>)
 8006f16:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1a:	601a      	str	r2, [r3, #0]
    ke_uart_count           = 0x00000000;
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <DigitalDash_Reset_App+0x60>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	601a      	str	r2, [r3, #0]
    DigitalDash_Reset_PID_Stream();
 8006f22:	f7ff fed9 	bl	8006cd8 <DigitalDash_Reset_PID_Stream>
    DigitalDash_Config_Null_Check();
 8006f26:	f000 f8ff 	bl	8007128 <DigitalDash_Config_Null_Check>
}
 8006f2a:	bf00      	nop
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20000444 	.word	0x20000444
 8006f34:	20000448 	.word	0x20000448
 8006f38:	20000730 	.word	0x20000730
 8006f3c:	20000020 	.word	0x20000020
 8006f40:	20000734 	.word	0x20000734
 8006f44:	20000028 	.word	0x20000028
 8006f48:	20000024 	.word	0x20000024
 8006f4c:	2000073c 	.word	0x2000073c

08006f50 <Update_LCD_Brightness>:

#ifdef BKLT_CTRL_ACTIVE
/* Set the LCD brightness if needed */
static void Update_LCD_Brightness( uint8_t value )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	4603      	mov	r3, r0
 8006f58:	71fb      	strb	r3, [r7, #7]
	/* Verify enough packets have been rx'd */
	if( ke_uart_count < KE_UART_THRESHOLD )
 8006f5a:	4b0d      	ldr	r3, [pc, #52]	; (8006f90 <Update_LCD_Brightness+0x40>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b27      	cmp	r3, #39	; 0x27
 8006f60:	d801      	bhi.n	8006f66 <Update_LCD_Brightness+0x16>
		value = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	71fb      	strb	r3, [r7, #7]

    /* Check if the brightness value needs to be update */
    if( Brightness != value )
 8006f66:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <Update_LCD_Brightness+0x44>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	79fa      	ldrb	r2, [r7, #7]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d00b      	beq.n	8006f88 <Update_LCD_Brightness+0x38>
    {
        /* Update the brightness */
        Brightness = value;
 8006f70:	4a08      	ldr	r2, [pc, #32]	; (8006f94 <Update_LCD_Brightness+0x44>)
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	7013      	strb	r3, [r2, #0]

        /* The brightness has been set */
        Set_Brightness = value;
 8006f76:	4a08      	ldr	r2, [pc, #32]	; (8006f98 <Update_LCD_Brightness+0x48>)
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	7013      	strb	r3, [r2, #0]

        /* Call the HAL function to update the brightness */
        set_backlight( Brightness );
 8006f7c:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <Update_LCD_Brightness+0x4c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a04      	ldr	r2, [pc, #16]	; (8006f94 <Update_LCD_Brightness+0x44>)
 8006f82:	7812      	ldrb	r2, [r2, #0]
 8006f84:	4610      	mov	r0, r2
 8006f86:	4798      	blx	r3
    }
}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	2000073c 	.word	0x2000073c
 8006f94:	20000730 	.word	0x20000730
 8006f98:	20000020 	.word	0x20000020
 8006f9c:	20000750 	.word	0x20000750

08006fa0 <Refresh_LCD>:

/* Reset the backlight watchdog and verify the LCD is on */
static void Refresh_LCD( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
    /* Reset the backlight timeout */
    digitaldash_bklt_wtchdg = LCD_BKLT_TIMEOUT;
 8006fa4:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <Refresh_LCD+0x18>)
 8006fa6:	22fa      	movs	r2, #250	; 0xfa
 8006fa8:	601a      	str	r2, [r3, #0]

    /* Verify the LCD is at the desired brightness */
    Update_LCD_Brightness( Set_Brightness );
 8006faa:	4b04      	ldr	r3, [pc, #16]	; (8006fbc <Refresh_LCD+0x1c>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7ff ffce 	bl	8006f50 <Update_LCD_Brightness>
}
 8006fb4:	bf00      	nop
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20000028 	.word	0x20000028
 8006fbc:	20000020 	.word	0x20000020

08006fc0 <update_app_flag>:
#endif

/* Update the application flags */
static void update_app_flag( DIGITALDASH_FLAG flag, uint8_t value )
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	460a      	mov	r2, r1
 8006fca:	71fb      	strb	r3, [r7, #7]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	71bb      	strb	r3, [r7, #6]
    if( value )
 8006fd0:	79bb      	ldrb	r3, [r7, #6]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <update_app_flag+0x2c>
        BITSET( app_flags, flag);
 8006fd6:	79fb      	ldrb	r3, [r7, #7]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	fa02 f303 	lsl.w	r3, r2, r3
 8006fde:	461a      	mov	r2, r3
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <update_app_flag+0x50>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	4a0a      	ldr	r2, [pc, #40]	; (8007010 <update_app_flag+0x50>)
 8006fe8:	6013      	str	r3, [r2, #0]
    else
        BITCLEAR( app_flags, flag);
}
 8006fea:	e00a      	b.n	8007002 <update_app_flag+0x42>
        BITCLEAR( app_flags, flag);
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff4:	43db      	mvns	r3, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	4b05      	ldr	r3, [pc, #20]	; (8007010 <update_app_flag+0x50>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	4a04      	ldr	r2, [pc, #16]	; (8007010 <update_app_flag+0x50>)
 8007000:	6013      	str	r3, [r2, #0]
}
 8007002:	bf00      	nop
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	20000444 	.word	0x20000444

08007014 <dd_update_sd_card_state>:

/* The main application shall call this function to indicate *
 * when the SD card state changes                            */
void dd_update_sd_card_state( SD_CARD_STATE state )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	71fb      	strb	r3, [r7, #7]
    update_app_flag( DD_FLG_SD_CARD, state );
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	4619      	mov	r1, r3
 8007022:	2000      	movs	r0, #0
 8007024:	f7ff ffcc 	bl	8006fc0 <update_app_flag>
}
 8007028:	bf00      	nop
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <digitaldash_get_flag>:
    return app_flags;
}

/* Return a single Digital Dash flag */
uint8_t digitaldash_get_flag( DIGITALDASH_FLAG flag )
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	71fb      	strb	r3, [r7, #7]
    return (( BITCHECK(app_flags, flag) == 0 ) ? 0 : 1);
 800703a:	79fb      	ldrb	r3, [r7, #7]
 800703c:	2201      	movs	r2, #1
 800703e:	fa02 f303 	lsl.w	r3, r2, r3
 8007042:	461a      	mov	r2, r3
 8007044:	4b06      	ldr	r3, [pc, #24]	; (8007060 <digitaldash_get_flag+0x30>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4013      	ands	r3, r2
 800704a:	2b00      	cmp	r3, #0
 800704c:	bf14      	ite	ne
 800704e:	2301      	movne	r3, #1
 8007050:	2300      	moveq	r3, #0
 8007052:	b2db      	uxtb	r3, r3
}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	20000444 	.word	0x20000444

08007064 <DigitalDash_Add_UART_byte>:

void DigitalDash_Add_UART_byte( uint8_t byte )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	4603      	mov	r3, r0
 800706c:	71fb      	strb	r3, [r7, #7]
    /* Reset the watchdog. The timeout value is the max time between frames */
    digitaldash_app_wtchdg = OS_FRAME_TIMEOUT;
 800706e:	4b0c      	ldr	r3, [pc, #48]	; (80070a0 <DigitalDash_Add_UART_byte+0x3c>)
 8007070:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007074:	601a      	str	r2, [r3, #0]

    #ifdef BKLT_CTRL_ACTIVE
        Refresh_LCD();
 8007076:	f7ff ff93 	bl	8006fa0 <Refresh_LCD>
    #endif

    if( num_pids > 0x00 )
 800707a:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <DigitalDash_Add_UART_byte+0x40>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d004      	beq.n	800708c <DigitalDash_Add_UART_byte+0x28>
    	ke_uart_count++;
 8007082:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <DigitalDash_Add_UART_byte+0x44>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3301      	adds	r3, #1
 8007088:	4a07      	ldr	r2, [pc, #28]	; (80070a8 <DigitalDash_Add_UART_byte+0x44>)
 800708a:	6013      	str	r3, [r2, #0]

	#ifdef LIB_KE_PROTOCOL_H_
    /* Add the UART byte to the KE packet manager */
    KE_Add_UART_Byte( &rasp_pi, byte );
 800708c:	79fb      	ldrb	r3, [r7, #7]
 800708e:	4619      	mov	r1, r3
 8007090:	4806      	ldr	r0, [pc, #24]	; (80070ac <DigitalDash_Add_UART_byte+0x48>)
 8007092:	f000 fd97 	bl	8007bc4 <KE_Add_UART_Byte>
	#endif
}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	20000024 	.word	0x20000024
 80070a4:	2000024c 	.word	0x2000024c
 80070a8:	2000073c 	.word	0x2000073c
 80070ac:	2000044c 	.word	0x2000044c

080070b0 <DigitalDash_Add_CAN_Packet>:

/* Copy the CAN packets to the relevant libraries */
void DigitalDash_Add_CAN_Packet( uint16_t id, uint8_t* data )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	6039      	str	r1, [r7, #0]
 80070ba:	80fb      	strh	r3, [r7, #6]
	#ifdef LIB_OBDII_H_
    OBDII_Add_Packet( &obdii, id, data );
 80070bc:	88fb      	ldrh	r3, [r7, #6]
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	4619      	mov	r1, r3
 80070c2:	480e      	ldr	r0, [pc, #56]	; (80070fc <DigitalDash_Add_CAN_Packet+0x4c>)
 80070c4:	f001 f99e 	bl	8008404 <OBDII_Add_Packet>
	#endif

	#ifdef LIB_CAN_BUS_SNIFFER_H_
    CAN_Sniffer_Add_Packet( &sniffer, id, data );
 80070c8:	88fb      	ldrh	r3, [r7, #6]
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	4619      	mov	r1, r3
 80070ce:	480c      	ldr	r0, [pc, #48]	; (8007100 <DigitalDash_Add_CAN_Packet+0x50>)
 80070d0:	f7ff fcb8 	bl	8006a44 <CAN_Sniffer_Add_Packet>
	#endif

    #ifdef LIB_OBDII_H_
    /* TODO: 7E0 is the common tester ID, but others could be used */
    if( id == 0x7E0 )
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 80070da:	d10a      	bne.n	80070f2 <DigitalDash_Add_CAN_Packet+0x42>
    {
        tester_present = TESTER_PRESENT_DELAY;
 80070dc:	4b09      	ldr	r3, [pc, #36]	; (8007104 <DigitalDash_Add_CAN_Packet+0x54>)
 80070de:	f242 7210 	movw	r2, #10000	; 0x2710
 80070e2:	601a      	str	r2, [r3, #0]

        update_app_flag( DD_TESTER_PRESENT, TESTER_PRESENT );
 80070e4:	2100      	movs	r1, #0
 80070e6:	2009      	movs	r0, #9
 80070e8:	f7ff ff6a 	bl	8006fc0 <update_app_flag>

        #ifdef LIB_OBDII_H_
        OBDII_Pause( &obdii );
 80070ec:	4803      	ldr	r0, [pc, #12]	; (80070fc <DigitalDash_Add_CAN_Packet+0x4c>)
 80070ee:	f001 f826 	bl	800813e <OBDII_Pause>
        #endif
    }
    #endif
}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	200005c0 	.word	0x200005c0
 8007100:	200006c0 	.word	0x200006c0
 8007104:	20000738 	.word	0x20000738

08007108 <active_cooling>:

/* Callback to request active cooling, right now this is configured *
 * as a pass-through callback to main. But, logic can be added in   *
 * the future if desired.                                           */
void active_cooling( uint8_t level ) { fan( level ); }
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	4603      	mov	r3, r0
 8007110:	71fb      	strb	r3, [r7, #7]
 8007112:	4b04      	ldr	r3, [pc, #16]	; (8007124 <active_cooling+0x1c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	79fa      	ldrb	r2, [r7, #7]
 8007118:	4610      	mov	r0, r2
 800711a:	4798      	blx	r3
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	20000754 	.word	0x20000754

08007128 <DigitalDash_Config_Null_Check>:

DIGITALDASH_INIT_STATUS DigitalDash_Config_Null_Check( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
    /* Clear the initialized flag */
    update_app_flag( DD_FLG_INIT, DD_NOT_INITIALIZED );
 800712c:	2100      	movs	r1, #0
 800712e:	2002      	movs	r0, #2
 8007130:	f7ff ff46 	bl	8006fc0 <update_app_flag>

    if( get_sd_card_state == null )
 8007134:	4b1b      	ldr	r3, [pc, #108]	; (80071a4 <DigitalDash_Config_Null_Check+0x7c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <DigitalDash_Config_Null_Check+0x18>
        return DIGITALDASH_INIT_SD_PTR_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e02e      	b.n	800719e <DigitalDash_Config_Null_Check+0x76>
    if( ke_tx == null )
 8007140:	4b19      	ldr	r3, [pc, #100]	; (80071a8 <DigitalDash_Config_Null_Check+0x80>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <DigitalDash_Config_Null_Check+0x24>
        return DIGITALDASH_INIT_KE_PTR_ERROR;
 8007148:	2302      	movs	r3, #2
 800714a:	e028      	b.n	800719e <DigitalDash_Config_Null_Check+0x76>
    if( ecu_tx == null )
 800714c:	4b17      	ldr	r3, [pc, #92]	; (80071ac <DigitalDash_Config_Null_Check+0x84>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <DigitalDash_Config_Null_Check+0x30>
        return DIGITALDASH_INIT_ECU_PTR_ERROR;
 8007154:	2303      	movs	r3, #3
 8007156:	e022      	b.n	800719e <DigitalDash_Config_Null_Check+0x76>
	#ifdef BKLT_CTRL_ACTIVE
    if( set_backlight == null )
 8007158:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <DigitalDash_Config_Null_Check+0x88>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <DigitalDash_Config_Null_Check+0x3c>
        return DIGITALDASH_INIT_BKLT_PTR_ERROR;
 8007160:	2304      	movs	r3, #4
 8007162:	e01c      	b.n	800719e <DigitalDash_Config_Null_Check+0x76>
	#endif
    if( fan == null )
 8007164:	4b13      	ldr	r3, [pc, #76]	; (80071b4 <DigitalDash_Config_Null_Check+0x8c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <DigitalDash_Config_Null_Check+0x48>
        return DIGITALDASH_INIT_FAN_PTR_ERROR;
 800716c:	2305      	movs	r3, #5
 800716e:	e016      	b.n	800719e <DigitalDash_Config_Null_Check+0x76>
    if( host == null )
 8007170:	4b11      	ldr	r3, [pc, #68]	; (80071b8 <DigitalDash_Config_Null_Check+0x90>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <DigitalDash_Config_Null_Check+0x54>
        return DIGITALDASH_INIT_HOST_PTR_ERROR;
 8007178:	2306      	movs	r3, #6
 800717a:	e010      	b.n	800719e <DigitalDash_Config_Null_Check+0x76>
    if( usb == null )
 800717c:	4b0f      	ldr	r3, [pc, #60]	; (80071bc <DigitalDash_Config_Null_Check+0x94>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <DigitalDash_Config_Null_Check+0x60>
        return DIGITALDASH_INIT_USB_PTR_ERROR;
 8007184:	2307      	movs	r3, #7
 8007186:	e00a      	b.n	800719e <DigitalDash_Config_Null_Check+0x76>
    if( filter == null )
 8007188:	4b0d      	ldr	r3, [pc, #52]	; (80071c0 <DigitalDash_Config_Null_Check+0x98>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <DigitalDash_Config_Null_Check+0x6c>
        return DIGITALDASH_INIT_CAN_FILT_PTR_ERROR;
 8007190:	2308      	movs	r3, #8
 8007192:	e004      	b.n	800719e <DigitalDash_Config_Null_Check+0x76>

    /* Set the intialized flag */
    update_app_flag( DD_FLG_INIT, DD_INITIALIZED );
 8007194:	2101      	movs	r1, #1
 8007196:	2002      	movs	r0, #2
 8007198:	f7ff ff12 	bl	8006fc0 <update_app_flag>

    return DIGITALDASH_INIT_OK;
 800719c:	230a      	movs	r3, #10
}
 800719e:	4618      	mov	r0, r3
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20000744 	.word	0x20000744
 80071a8:	20000748 	.word	0x20000748
 80071ac:	2000074c 	.word	0x2000074c
 80071b0:	20000750 	.word	0x20000750
 80071b4:	20000754 	.word	0x20000754
 80071b8:	20000758 	.word	0x20000758
 80071bc:	2000075c 	.word	0x2000075c
 80071c0:	20000760 	.word	0x20000760

080071c4 <digitaldash_init>:

DIGITALDASH_INIT_STATUS digitaldash_init( PDIGITALDASH_CONFIG config )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
	/* Reset the Digital Dash */
	DigitalDash_Reset_App();
 80071cc:	f7ff fe8e 	bl	8006eec <DigitalDash_Reset_App>

    /* Clear the initialized flag */
    update_app_flag( DD_FLG_INIT, DD_NOT_INITIALIZED );
 80071d0:	2100      	movs	r1, #0
 80071d2:	2002      	movs	r0, #2
 80071d4:	f7ff fef4 	bl	8006fc0 <update_app_flag>

#ifdef SD_CARD_ACTIVE
    if( config->dd_get_sd_card_state == null )
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <digitaldash_init+0x20>
        return DIGITALDASH_INIT_SD_PTR_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e08c      	b.n	80072fe <digitaldash_init+0x13a>
    get_sd_card_state = config->dd_get_sd_card_state;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a47      	ldr	r2, [pc, #284]	; (8007308 <digitaldash_init+0x144>)
 80071ea:	6013      	str	r3, [r2, #0]
#endif

#ifdef KE_ACTIVE
    if( config->dd_ke_tx == null )
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <digitaldash_init+0x34>
        return DIGITALDASH_INIT_KE_PTR_ERROR;
 80071f4:	2302      	movs	r3, #2
 80071f6:	e082      	b.n	80072fe <digitaldash_init+0x13a>
    ke_tx = config->dd_ke_tx;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	4a43      	ldr	r2, [pc, #268]	; (800730c <digitaldash_init+0x148>)
 80071fe:	6013      	str	r3, [r2, #0]
#endif

#ifdef ECU_ACTIVE
    if( config->dd_ecu_tx == null )
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <digitaldash_init+0x48>
        return DIGITALDASH_INIT_ECU_PTR_ERROR;
 8007208:	2303      	movs	r3, #3
 800720a:	e078      	b.n	80072fe <digitaldash_init+0x13a>
    ecu_tx = config->dd_ecu_tx;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	4a3f      	ldr	r2, [pc, #252]	; (8007310 <digitaldash_init+0x14c>)
 8007212:	6013      	str	r3, [r2, #0]
#endif

#ifdef BKLT_CTRL_ACTIVE
    if( config->dd_set_backlight == null )
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <digitaldash_init+0x5c>
        return DIGITALDASH_INIT_BKLT_PTR_ERROR;
 800721c:	2304      	movs	r3, #4
 800721e:	e06e      	b.n	80072fe <digitaldash_init+0x13a>
    set_backlight = config->dd_set_backlight;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	4a3b      	ldr	r2, [pc, #236]	; (8007314 <digitaldash_init+0x150>)
 8007226:	6013      	str	r3, [r2, #0]
#endif

#ifdef FAN_CTRL_ACTIVE
    if( config->dd_fan_ctrl == null )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <digitaldash_init+0x70>
        return DIGITALDASH_INIT_FAN_PTR_ERROR;
 8007230:	2305      	movs	r3, #5
 8007232:	e064      	b.n	80072fe <digitaldash_init+0x13a>
    fan = config->dd_fan_ctrl;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	4a37      	ldr	r2, [pc, #220]	; (8007318 <digitaldash_init+0x154>)
 800723a:	6013      	str	r3, [r2, #0]
#endif

#ifdef HOST_CTRL_ACTIVE
    if( config->dd_host_ctrl == null )
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <digitaldash_init+0x84>
        return DIGITALDASH_INIT_HOST_PTR_ERROR;
 8007244:	2306      	movs	r3, #6
 8007246:	e05a      	b.n	80072fe <digitaldash_init+0x13a>
    host = config->dd_host_ctrl;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	4a33      	ldr	r2, [pc, #204]	; (800731c <digitaldash_init+0x158>)
 800724e:	6013      	str	r3, [r2, #0]
#endif

#ifdef USB_CTRL_ACTIVE
    if( config->dd_usb == null )
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <digitaldash_init+0x98>
        return DIGITALDASH_INIT_USB_PTR_ERROR;
 8007258:	2307      	movs	r3, #7
 800725a:	e050      	b.n	80072fe <digitaldash_init+0x13a>
    usb = config->dd_usb;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	4a2f      	ldr	r2, [pc, #188]	; (8007320 <digitaldash_init+0x15c>)
 8007262:	6013      	str	r3, [r2, #0]
#endif

#ifdef CAN_FILT_ACTIVE
    if( config->dd_filter == null )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <digitaldash_init+0xac>
        return DIGITALDASH_INIT_CAN_FILT_PTR_ERROR;
 800726c:	2308      	movs	r3, #8
 800726e:	e046      	b.n	80072fe <digitaldash_init+0x13a>
    filter = config->dd_filter;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	4a2b      	ldr	r2, [pc, #172]	; (8007324 <digitaldash_init+0x160>)
 8007276:	6013      	str	r3, [r2, #0]
#endif

    /* lib_ke_protocol initialization */
    rasp_pi.init.transmit = ke_tx;                                  /* Function call to transmit UART data to the host */
 8007278:	4b24      	ldr	r3, [pc, #144]	; (800730c <digitaldash_init+0x148>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a2a      	ldr	r2, [pc, #168]	; (8007328 <digitaldash_init+0x164>)
 800727e:	6413      	str	r3, [r2, #64]	; 0x40
    rasp_pi.init.req_pid = &DigitalDash_Add_PID_To_Stream;          /* Function call to request a PID */
 8007280:	4b29      	ldr	r3, [pc, #164]	; (8007328 <digitaldash_init+0x164>)
 8007282:	4a2a      	ldr	r2, [pc, #168]	; (800732c <digitaldash_init+0x168>)
 8007284:	645a      	str	r2, [r3, #68]	; 0x44
    rasp_pi.init.cooling = &active_cooling;
 8007286:	4b28      	ldr	r3, [pc, #160]	; (8007328 <digitaldash_init+0x164>)
 8007288:	4a29      	ldr	r2, [pc, #164]	; (8007330 <digitaldash_init+0x16c>)
 800728a:	649a      	str	r2, [r3, #72]	; 0x48
    rasp_pi.init.firmware_version_major  = FIRMWARE_VERSION_MAJOR;  /* Firmware version */
 800728c:	4b26      	ldr	r3, [pc, #152]	; (8007328 <digitaldash_init+0x164>)
 800728e:	2201      	movs	r2, #1
 8007290:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    rasp_pi.init.firmware_version_minor  = FIRMWARE_VERSION_MINOR;  /* Firmware version */
 8007294:	4b24      	ldr	r3, [pc, #144]	; (8007328 <digitaldash_init+0x164>)
 8007296:	2200      	movs	r2, #0
 8007298:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    rasp_pi.init.firmware_version_hotfix = FIRMWARE_VERSION_HOTFIX; /* Firmware version */
 800729c:	4b22      	ldr	r3, [pc, #136]	; (8007328 <digitaldash_init+0x164>)
 800729e:	2205      	movs	r2, #5
 80072a0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

    /* Initialize the KE library */
    if( KE_Initialize( &rasp_pi ) != KE_OK )
 80072a4:	4820      	ldr	r0, [pc, #128]	; (8007328 <digitaldash_init+0x164>)
 80072a6:	f000 fadf 	bl	8007868 <KE_Initialize>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	d001      	beq.n	80072b4 <digitaldash_init+0xf0>
        return DIGITALDASH_INIT_KE_INIT_ERROR;
 80072b0:	2309      	movs	r3, #9
 80072b2:	e024      	b.n	80072fe <digitaldash_init+0x13a>

    #ifdef LIB_OBDII_H_
    /* lib_obdii initialization */
    obdii.init.transmit       = ecu_tx;               /* Function call to transmit OBDII data to the vehicle */
 80072b4:	4b16      	ldr	r3, [pc, #88]	; (8007310 <digitaldash_init+0x14c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a1e      	ldr	r2, [pc, #120]	; (8007334 <digitaldash_init+0x170>)
 80072ba:	6553      	str	r3, [r2, #84]	; 0x54
    obdii.init.timeout        = ECU_TIMEOUT;          /* Time(ms) before lib_obdii will retry a transmission */
 80072bc:	4b1d      	ldr	r3, [pc, #116]	; (8007334 <digitaldash_init+0x170>)
 80072be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80072c2:	651a      	str	r2, [r3, #80]	; 0x50
    obdii.init.arbitration_ID = ECU_TX_ID;            /* Transmit ID on the CAN bus */
 80072c4:	4b1b      	ldr	r3, [pc, #108]	; (8007334 <digitaldash_init+0x170>)
 80072c6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80072ca:	659a      	str	r2, [r3, #88]	; 0x58
    obdii.init.IDE            = OBDII_STD_IDE;        /* 11-bit or 29-bit identifier */
 80072cc:	4b19      	ldr	r3, [pc, #100]	; (8007334 <digitaldash_init+0x170>)
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Initialize the OBDII library */
    OBDII_Initialize( &obdii );
 80072d4:	4817      	ldr	r0, [pc, #92]	; (8007334 <digitaldash_init+0x170>)
 80072d6:	f000 ff4f 	bl	8008178 <OBDII_Initialize>
    #endif

    #ifdef USE_LIB_CAN_BUS_SNIFFER
    /* lib_can_bus_sniffer initialization */
    sniffer.filter = filter;
 80072da:	4b12      	ldr	r3, [pc, #72]	; (8007324 <digitaldash_init+0x160>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a16      	ldr	r2, [pc, #88]	; (8007338 <digitaldash_init+0x174>)
 80072e0:	6053      	str	r3, [r2, #4]
    CAN_Sniffer_Initialize(&sniffer);
 80072e2:	4815      	ldr	r0, [pc, #84]	; (8007338 <digitaldash_init+0x174>)
 80072e4:	f7ff fac6 	bl	8006874 <CAN_Sniffer_Initialize>
    #endif

    #ifdef SNIFF_GAUGE_BRIGHTNESS_SUPPORTED
    /* Start obtaining the gauge brightness */
    gauge_brightness = DigitalDash_Add_PID_To_Stream( &gauge_brightness_req );
 80072e8:	4814      	ldr	r0, [pc, #80]	; (800733c <digitaldash_init+0x178>)
 80072ea:	f7ff fd4b 	bl	8006d84 <DigitalDash_Add_PID_To_Stream>
 80072ee:	4602      	mov	r2, r0
 80072f0:	4b13      	ldr	r3, [pc, #76]	; (8007340 <digitaldash_init+0x17c>)
 80072f2:	601a      	str	r2, [r3, #0]
    #endif

    /* Set the initialized flag */
    update_app_flag( DD_FLG_INIT, DD_INITIALIZED );
 80072f4:	2101      	movs	r1, #1
 80072f6:	2002      	movs	r0, #2
 80072f8:	f7ff fe62 	bl	8006fc0 <update_app_flag>

    return DIGITALDASH_INIT_OK;
 80072fc:	230a      	movs	r3, #10
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000744 	.word	0x20000744
 800730c:	20000748 	.word	0x20000748
 8007310:	2000074c 	.word	0x2000074c
 8007314:	20000750 	.word	0x20000750
 8007318:	20000754 	.word	0x20000754
 800731c:	20000758 	.word	0x20000758
 8007320:	2000075c 	.word	0x2000075c
 8007324:	20000760 	.word	0x20000760
 8007328:	2000044c 	.word	0x2000044c
 800732c:	08006d85 	.word	0x08006d85
 8007330:	08007109 	.word	0x08007109
 8007334:	200005c0 	.word	0x200005c0
 8007338:	200006c0 	.word	0x200006c0
 800733c:	2000000c 	.word	0x2000000c
 8007340:	2000072c 	.word	0x2000072c

08007344 <host_power>:

static void host_power( HOST_PWR_STATE host_state )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	71fb      	strb	r3, [r7, #7]
    if( digitaldash_get_flag( DD_FLG_HOST_PWR ) != host_state )
 800734e:	2001      	movs	r0, #1
 8007350:	f7ff fe6e 	bl	8007030 <digitaldash_get_flag>
 8007354:	4603      	mov	r3, r0
 8007356:	461a      	mov	r2, r3
 8007358:	79fb      	ldrb	r3, [r7, #7]
 800735a:	4293      	cmp	r3, r2
 800735c:	d01f      	beq.n	800739e <host_power+0x5a>
    {
#if FORCE_USB_ON
        usb( USB_PWR_ENABLED );
 800735e:	4b12      	ldr	r3, [pc, #72]	; (80073a8 <host_power+0x64>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2001      	movs	r0, #1
 8007364:	4798      	blx	r3

        /* Indicate the new state of the host */
        update_app_flag( DD_USB_PWR, USB_PWR_ENABLED );
 8007366:	2101      	movs	r1, #1
 8007368:	2008      	movs	r0, #8
 800736a:	f7ff fe29 	bl	8006fc0 <update_app_flag>
        /* Indicate the new state of the host */
        update_app_flag( DD_USB_PWR, host_state );
#endif

        /* Enable or disable power */
        host( host_state );
 800736e:	4b0f      	ldr	r3, [pc, #60]	; (80073ac <host_power+0x68>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	79fa      	ldrb	r2, [r7, #7]
 8007374:	4610      	mov	r0, r2
 8007376:	4798      	blx	r3

        /* Indicate the new state of the host */
        update_app_flag( DD_FLG_HOST_PWR, host_state );
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	4619      	mov	r1, r3
 800737c:	2001      	movs	r0, #1
 800737e:	f7ff fe1f 	bl	8006fc0 <update_app_flag>

        /* TODO: allow shutdown time */
       if( host_state == HOST_PWR_ENABLED ) {
 8007382:	79fb      	ldrb	r3, [r7, #7]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d107      	bne.n	8007398 <host_power+0x54>
    	   /* Power is enabled, and the host is booting */
    	   state = DD_OP_BOOTING;
 8007388:	4b09      	ldr	r3, [pc, #36]	; (80073b0 <host_power+0x6c>)
 800738a:	2202      	movs	r2, #2
 800738c:	701a      	strb	r2, [r3, #0]

    	   /* Set the boot time if power on */
		   digitaldash_app_wtchdg = OS_BOOT_TIME_MAX;
 800738e:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <host_power+0x70>)
 8007390:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007394:	601a      	str	r2, [r3, #0]
       } else {
    	   state = DD_OP_OFF;
       }
    }
}
 8007396:	e002      	b.n	800739e <host_power+0x5a>
    	   state = DD_OP_OFF;
 8007398:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <host_power+0x6c>)
 800739a:	2200      	movs	r2, #0
 800739c:	701a      	strb	r2, [r3, #0]
}
 800739e:	bf00      	nop
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	2000075c 	.word	0x2000075c
 80073ac:	20000758 	.word	0x20000758
 80073b0:	20000448 	.word	0x20000448
 80073b4:	20000024 	.word	0x20000024

080073b8 <DigitalDash_PowerCylce>:

static void DigitalDash_PowerCylce()
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
    /* Turn off the host */
    host_power( HOST_PWR_DISABLED );
 80073bc:	2000      	movs	r0, #0
 80073be:	f7ff ffc1 	bl	8007344 <host_power>

    /* Let the power rails settle */
    digitaldash_delay = POWER_CYCLE_TIME;
 80073c2:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <DigitalDash_PowerCylce+0x18>)
 80073c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073c8:	601a      	str	r2, [r3, #0]
}
 80073ca:	bf00      	nop
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20000734 	.word	0x20000734

080073d4 <digitaldash_service>:

DIGITALDASH_STATUS digitaldash_service( void )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af02      	add	r7, sp, #8
    if( digitaldash_get_flag( DD_FLG_INIT ) == DD_INITIALIZED )
 80073da:	2002      	movs	r0, #2
 80073dc:	f7ff fe28 	bl	8007030 <digitaldash_get_flag>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d157      	bne.n	8007496 <digitaldash_service+0xc2>
    {
        /* If a delay was requested by the Digital Dash application, block all other functions *
         * until the delay is complete. This will NOT block any other application code         */
        if( digitaldash_delay > 0 ) { /* Do nothing */ }
 80073e6:	4b2e      	ldr	r3, [pc, #184]	; (80074a0 <digitaldash_service+0xcc>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d112      	bne.n	8007414 <digitaldash_service+0x40>
        
        /* First, check to see if the host is ready to boot by verifying the SD card is *
         * inserted. This only needs to be checked when the OS is on the SD card. If    *
         * the device has an EMMC, this check can be skipped.                           */
        #ifdef SD_CARD_ACTIVE
        else if( digitaldash_get_flag( DD_FLG_SD_CARD ) == SD_NOT_PRESENT )
 80073ee:	2000      	movs	r0, #0
 80073f0:	f7ff fe1e 	bl	8007030 <digitaldash_get_flag>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d103      	bne.n	8007402 <digitaldash_service+0x2e>
            get_sd_card_state();
 80073fa:	4b2a      	ldr	r3, [pc, #168]	; (80074a4 <digitaldash_service+0xd0>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4798      	blx	r3
 8007400:	e008      	b.n	8007414 <digitaldash_service+0x40>
        #endif

        /* All hardware is present, so the Digital Dash is ready to be powered on.      *
         * Enable power to the host, and begin a timer to make sure the device properly *
         * boots and does not hang.                                                     */
        else if( digitaldash_get_flag( DD_FLG_HOST_PWR ) == HOST_PWR_DISABLED )
 8007402:	2001      	movs	r0, #1
 8007404:	f7ff fe14 	bl	8007030 <digitaldash_get_flag>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <digitaldash_service+0x40>
            host_power( HOST_PWR_ENABLED );
 800740e:	2001      	movs	r0, #1
 8007410:	f7ff ff98 	bl	8007344 <host_power>

        /* If the application timer expires, reset the hardware                        */
        if( digitaldash_app_wtchdg <= 0 )
 8007414:	4b24      	ldr	r3, [pc, #144]	; (80074a8 <digitaldash_service+0xd4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <digitaldash_service+0x4c>
            DigitalDash_PowerCylce();
 800741c:	f7ff ffcc 	bl	80073b8 <DigitalDash_PowerCylce>

		#ifdef BKLT_CTRL_ACTIVE
        /* Turn off the LCD if no messages are received by LCD_BKLT_TIMEOUT */
        if( digitaldash_bklt_wtchdg <= 0 )
 8007420:	4b22      	ldr	r3, [pc, #136]	; (80074ac <digitaldash_service+0xd8>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d106      	bne.n	8007436 <digitaldash_service+0x62>
        {
        	/* Reset the UART count */
        	ke_uart_count = 0;
 8007428:	4b21      	ldr	r3, [pc, #132]	; (80074b0 <digitaldash_service+0xdc>)
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]

            Update_LCD_Brightness(0);
 800742e:	2000      	movs	r0, #0
 8007430:	f7ff fd8e 	bl	8006f50 <Update_LCD_Brightness>
 8007434:	e027      	b.n	8007486 <digitaldash_service+0xb2>
        } else {
            #ifdef SNIFF_GAUGE_BRIGHTNESS_SUPPORTED
            /* TODO - Adjustments may be needed with real world testing */
            /* Map the gauge brightness to the LCD driver */
            uint32_t brightness_adjusted = map( gauge_brightness->pid_value,
 8007436:	4b1f      	ldr	r3, [pc, #124]	; (80074b4 <digitaldash_service+0xe0>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	edd3 7a02 	vldr	s15, [r3, #8]
 800743e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007442:	23ff      	movs	r3, #255	; 0xff
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	2314      	movs	r3, #20
 8007448:	221f      	movs	r2, #31
 800744a:	2101      	movs	r1, #1
 800744c:	ee17 0a90 	vmov	r0, s15
 8007450:	f7ff fc12 	bl	8006c78 <map>
 8007454:	6078      	str	r0, [r7, #4]
                    FORD_MIN_BRIGHTNESS, FORD_MAX_BRIGHTNESS,
                    LCD_MIN_BRIGHTNESS, LCD_MAX_BRIGHTNESS );

            /* Default to max brightness if no data has been RX'd */
            if( gauge_brightness->timestamp == 0 )
 8007456:	4b17      	ldr	r3, [pc, #92]	; (80074b4 <digitaldash_service+0xe0>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <digitaldash_service+0x92>
                brightness_adjusted = LCD_MAX_BRIGHTNESS;
 8007460:	23ff      	movs	r3, #255	; 0xff
 8007462:	607b      	str	r3, [r7, #4]
 8007464:	e00a      	b.n	800747c <digitaldash_service+0xa8>

            /* Make sure the brightness is within the supported range. */
            else if( brightness_adjusted <= LCD_MIN_BRIGHTNESS )
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b14      	cmp	r3, #20
 800746a:	d802      	bhi.n	8007472 <digitaldash_service+0x9e>
                brightness_adjusted = LCD_MIN_BRIGHTNESS;
 800746c:	2314      	movs	r3, #20
 800746e:	607b      	str	r3, [r7, #4]
 8007470:	e004      	b.n	800747c <digitaldash_service+0xa8>

            /* Make sure the brightness is within the supported range. */
            else if( brightness_adjusted >= LCD_MAX_BRIGHTNESS )
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2bfe      	cmp	r3, #254	; 0xfe
 8007476:	d901      	bls.n	800747c <digitaldash_service+0xa8>
                brightness_adjusted = LCD_MAX_BRIGHTNESS;
 8007478:	23ff      	movs	r3, #255	; 0xff
 800747a:	607b      	str	r3, [r7, #4]

            Update_LCD_Brightness( brightness_adjusted );
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff fd65 	bl	8006f50 <Update_LCD_Brightness>
            #endif
        }
		#endif

        /* Service the KE protocol manager */
        KE_Service( &rasp_pi );
 8007486:	480c      	ldr	r0, [pc, #48]	; (80074b8 <digitaldash_service+0xe4>)
 8007488:	f000 fa0e 	bl	80078a8 <KE_Service>

        #ifdef USE_LIB_OBDII
        /* Service the OBDII protocol manager */
        OBDII_Service( &obdii );
 800748c:	480b      	ldr	r0, [pc, #44]	; (80074bc <digitaldash_service+0xe8>)
 800748e:	f000 febd 	bl	800820c <OBDII_Service>
        #endif

        return DIGITALDASH_OK;
 8007492:	2302      	movs	r3, #2
 8007494:	e000      	b.n	8007498 <digitaldash_service+0xc4>
    }

    /* The Digital Dash has not been initialized yet. */
    else
    {
        return DIGITALDASH_NOT_INIT;
 8007496:	2301      	movs	r3, #1
    }
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20000734 	.word	0x20000734
 80074a4:	20000744 	.word	0x20000744
 80074a8:	20000024 	.word	0x20000024
 80074ac:	20000028 	.word	0x20000028
 80074b0:	2000073c 	.word	0x2000073c
 80074b4:	2000072c 	.word	0x2000072c
 80074b8:	2000044c 	.word	0x2000044c
 80074bc:	200005c0 	.word	0x200005c0

080074c0 <digitaldash_tick>:

void digitaldash_tick( void )
{
 80074c0:	b590      	push	{r4, r7, lr}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
    #ifdef SPOOF_DATA
    spoof_count = (spoof_count + 1) % SPOOF_INTERVAL_T;
 80074c6:	4b7c      	ldr	r3, [pc, #496]	; (80076b8 <digitaldash_tick+0x1f8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	1c59      	adds	r1, r3, #1
 80074cc:	4b7b      	ldr	r3, [pc, #492]	; (80076bc <digitaldash_tick+0x1fc>)
 80074ce:	fba3 2301 	umull	r2, r3, r3, r1
 80074d2:	08da      	lsrs	r2, r3, #3
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	009a      	lsls	r2, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	1aca      	subs	r2, r1, r3
 80074e0:	4b75      	ldr	r3, [pc, #468]	; (80076b8 <digitaldash_tick+0x1f8>)
 80074e2:	601a      	str	r2, [r3, #0]
    if( spoof_count == 0 )
 80074e4:	4b74      	ldr	r3, [pc, #464]	; (80076b8 <digitaldash_tick+0x1f8>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f040 816c 	bne.w	80077c6 <digitaldash_tick+0x306>
    {
        for( uint8_t i = 0; i < num_pids; i++ )
 80074ee:	2300      	movs	r3, #0
 80074f0:	71fb      	strb	r3, [r7, #7]
 80074f2:	e162      	b.n	80077ba <digitaldash_tick+0x2fa>
        {
            if( (stream[i].mode == MODE1) & (stream[i].pid == MODE1_ENGINE_RPM) )
 80074f4:	79fa      	ldrb	r2, [r7, #7]
 80074f6:	4972      	ldr	r1, [pc, #456]	; (80076c0 <digitaldash_tick+0x200>)
 80074f8:	4613      	mov	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	440b      	add	r3, r1
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b01      	cmp	r3, #1
 8007508:	bf0c      	ite	eq
 800750a:	2301      	moveq	r3, #1
 800750c:	2300      	movne	r3, #0
 800750e:	b2d9      	uxtb	r1, r3
 8007510:	79fa      	ldrb	r2, [r7, #7]
 8007512:	486b      	ldr	r0, [pc, #428]	; (80076c0 <digitaldash_tick+0x200>)
 8007514:	4613      	mov	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4403      	add	r3, r0
 800751e:	3302      	adds	r3, #2
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	2b0c      	cmp	r3, #12
 8007526:	bf0c      	ite	eq
 8007528:	2301      	moveq	r3, #1
 800752a:	2300      	movne	r3, #0
 800752c:	b2db      	uxtb	r3, r3
 800752e:	400b      	ands	r3, r1
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d045      	beq.n	80075c2 <digitaldash_tick+0x102>
            {
                stream[i].timestamp++;
 8007536:	79fa      	ldrb	r2, [r7, #7]
 8007538:	4961      	ldr	r1, [pc, #388]	; (80076c0 <digitaldash_tick+0x200>)
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	440b      	add	r3, r1
 8007544:	330c      	adds	r3, #12
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	1c59      	adds	r1, r3, #1
 800754a:	485d      	ldr	r0, [pc, #372]	; (80076c0 <digitaldash_tick+0x200>)
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4403      	add	r3, r0
 8007556:	330c      	adds	r3, #12
 8007558:	6019      	str	r1, [r3, #0]
                stream[i].pid_value++;
 800755a:	79fa      	ldrb	r2, [r7, #7]
 800755c:	4958      	ldr	r1, [pc, #352]	; (80076c0 <digitaldash_tick+0x200>)
 800755e:	4613      	mov	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	440b      	add	r3, r1
 8007568:	3308      	adds	r3, #8
 800756a:	edd3 7a00 	vldr	s15, [r3]
 800756e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007572:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007576:	4952      	ldr	r1, [pc, #328]	; (80076c0 <digitaldash_tick+0x200>)
 8007578:	4613      	mov	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	440b      	add	r3, r1
 8007582:	3308      	adds	r3, #8
 8007584:	edc3 7a00 	vstr	s15, [r3]
                if( stream[i].pid_value >= 8000 )
 8007588:	79fa      	ldrb	r2, [r7, #7]
 800758a:	494d      	ldr	r1, [pc, #308]	; (80076c0 <digitaldash_tick+0x200>)
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	440b      	add	r3, r1
 8007596:	3308      	adds	r3, #8
 8007598:	edd3 7a00 	vldr	s15, [r3]
 800759c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80076c4 <digitaldash_tick+0x204>
 80075a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a8:	f2c0 8104 	blt.w	80077b4 <digitaldash_tick+0x2f4>
                    stream[i].pid_value = 900;
 80075ac:	79fa      	ldrb	r2, [r7, #7]
 80075ae:	4944      	ldr	r1, [pc, #272]	; (80076c0 <digitaldash_tick+0x200>)
 80075b0:	4613      	mov	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	440b      	add	r3, r1
 80075ba:	3308      	adds	r3, #8
 80075bc:	4a42      	ldr	r2, [pc, #264]	; (80076c8 <digitaldash_tick+0x208>)
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	e0f8      	b.n	80077b4 <digitaldash_tick+0x2f4>
            } else if ( (stream[i].mode == MODE1) & (stream[i].pid == MODE1_TURBO_INLET_PRESSURE) )
 80075c2:	79fa      	ldrb	r2, [r7, #7]
 80075c4:	493e      	ldr	r1, [pc, #248]	; (80076c0 <digitaldash_tick+0x200>)
 80075c6:	4613      	mov	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	440b      	add	r3, r1
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	bf0c      	ite	eq
 80075d8:	2301      	moveq	r3, #1
 80075da:	2300      	movne	r3, #0
 80075dc:	b2d9      	uxtb	r1, r3
 80075de:	79fa      	ldrb	r2, [r7, #7]
 80075e0:	4837      	ldr	r0, [pc, #220]	; (80076c0 <digitaldash_tick+0x200>)
 80075e2:	4613      	mov	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4403      	add	r3, r0
 80075ec:	3302      	adds	r3, #2
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	2b6f      	cmp	r3, #111	; 0x6f
 80075f4:	bf0c      	ite	eq
 80075f6:	2301      	moveq	r3, #1
 80075f8:	2300      	movne	r3, #0
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	400b      	ands	r3, r1
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d065      	beq.n	80076d0 <digitaldash_tick+0x210>
            {
                stream[i].timestamp++;
 8007604:	79fa      	ldrb	r2, [r7, #7]
 8007606:	492e      	ldr	r1, [pc, #184]	; (80076c0 <digitaldash_tick+0x200>)
 8007608:	4613      	mov	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	440b      	add	r3, r1
 8007612:	330c      	adds	r3, #12
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	1c59      	adds	r1, r3, #1
 8007618:	4829      	ldr	r0, [pc, #164]	; (80076c0 <digitaldash_tick+0x200>)
 800761a:	4613      	mov	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4403      	add	r3, r0
 8007624:	330c      	adds	r3, #12
 8007626:	6019      	str	r1, [r3, #0]
                stream[i].pid_value = stream[i].pid_value + 0.05;
 8007628:	79fa      	ldrb	r2, [r7, #7]
 800762a:	4925      	ldr	r1, [pc, #148]	; (80076c0 <digitaldash_tick+0x200>)
 800762c:	4613      	mov	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	440b      	add	r3, r1
 8007636:	3308      	adds	r3, #8
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f7f8 ffa4 	bl	8000588 <__aeabi_f2d>
 8007640:	a31b      	add	r3, pc, #108	; (adr r3, 80076b0 <digitaldash_tick+0x1f0>)
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	f7f8 fe41 	bl	80002cc <__adddf3>
 800764a:	4603      	mov	r3, r0
 800764c:	460c      	mov	r4, r1
 800764e:	461a      	mov	r2, r3
 8007650:	4623      	mov	r3, r4
 8007652:	79fc      	ldrb	r4, [r7, #7]
 8007654:	4610      	mov	r0, r2
 8007656:	4619      	mov	r1, r3
 8007658:	f7f9 fac6 	bl	8000be8 <__aeabi_d2f>
 800765c:	4601      	mov	r1, r0
 800765e:	4a18      	ldr	r2, [pc, #96]	; (80076c0 <digitaldash_tick+0x200>)
 8007660:	4623      	mov	r3, r4
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4423      	add	r3, r4
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	3308      	adds	r3, #8
 800766c:	6019      	str	r1, [r3, #0]
                if( stream[i].pid_value >= 255 )
 800766e:	79fa      	ldrb	r2, [r7, #7]
 8007670:	4913      	ldr	r1, [pc, #76]	; (80076c0 <digitaldash_tick+0x200>)
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	440b      	add	r3, r1
 800767c:	3308      	adds	r3, #8
 800767e:	edd3 7a00 	vldr	s15, [r3]
 8007682:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80076cc <digitaldash_tick+0x20c>
 8007686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800768a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800768e:	f2c0 8091 	blt.w	80077b4 <digitaldash_tick+0x2f4>
                    stream[i].pid_value = 0;
 8007692:	79fa      	ldrb	r2, [r7, #7]
 8007694:	490a      	ldr	r1, [pc, #40]	; (80076c0 <digitaldash_tick+0x200>)
 8007696:	4613      	mov	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	440b      	add	r3, r1
 80076a0:	3308      	adds	r3, #8
 80076a2:	f04f 0200 	mov.w	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]
 80076a8:	e084      	b.n	80077b4 <digitaldash_tick+0x2f4>
 80076aa:	bf00      	nop
 80076ac:	f3af 8000 	nop.w
 80076b0:	9999999a 	.word	0x9999999a
 80076b4:	3fa99999 	.word	0x3fa99999
 80076b8:	20000740 	.word	0x20000740
 80076bc:	51eb851f 	.word	0x51eb851f
 80076c0:	20000250 	.word	0x20000250
 80076c4:	45fa0000 	.word	0x45fa0000
 80076c8:	44610000 	.word	0x44610000
 80076cc:	437f0000 	.word	0x437f0000
            } else if ( (stream[i].mode == MODE1) & (stream[i].pid == MODE1_ENGINE_OIL_TEMPERATURE) )
 80076d0:	79fa      	ldrb	r2, [r7, #7]
 80076d2:	495d      	ldr	r1, [pc, #372]	; (8007848 <digitaldash_tick+0x388>)
 80076d4:	4613      	mov	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	440b      	add	r3, r1
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	bf0c      	ite	eq
 80076e6:	2301      	moveq	r3, #1
 80076e8:	2300      	movne	r3, #0
 80076ea:	b2d9      	uxtb	r1, r3
 80076ec:	79fa      	ldrb	r2, [r7, #7]
 80076ee:	4856      	ldr	r0, [pc, #344]	; (8007848 <digitaldash_tick+0x388>)
 80076f0:	4613      	mov	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4403      	add	r3, r0
 80076fa:	3302      	adds	r3, #2
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	2b5c      	cmp	r3, #92	; 0x5c
 8007702:	bf0c      	ite	eq
 8007704:	2301      	moveq	r3, #1
 8007706:	2300      	movne	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	400b      	ands	r3, r1
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d050      	beq.n	80077b4 <digitaldash_tick+0x2f4>
            {
                stream[i].timestamp++;
 8007712:	79fa      	ldrb	r2, [r7, #7]
 8007714:	494c      	ldr	r1, [pc, #304]	; (8007848 <digitaldash_tick+0x388>)
 8007716:	4613      	mov	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	440b      	add	r3, r1
 8007720:	330c      	adds	r3, #12
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	1c59      	adds	r1, r3, #1
 8007726:	4848      	ldr	r0, [pc, #288]	; (8007848 <digitaldash_tick+0x388>)
 8007728:	4613      	mov	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4403      	add	r3, r0
 8007732:	330c      	adds	r3, #12
 8007734:	6019      	str	r1, [r3, #0]
                stream[i].pid_value = stream[i].pid_value + 0.05;
 8007736:	79fa      	ldrb	r2, [r7, #7]
 8007738:	4943      	ldr	r1, [pc, #268]	; (8007848 <digitaldash_tick+0x388>)
 800773a:	4613      	mov	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	440b      	add	r3, r1
 8007744:	3308      	adds	r3, #8
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4618      	mov	r0, r3
 800774a:	f7f8 ff1d 	bl	8000588 <__aeabi_f2d>
 800774e:	a33c      	add	r3, pc, #240	; (adr r3, 8007840 <digitaldash_tick+0x380>)
 8007750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007754:	f7f8 fdba 	bl	80002cc <__adddf3>
 8007758:	4603      	mov	r3, r0
 800775a:	460c      	mov	r4, r1
 800775c:	461a      	mov	r2, r3
 800775e:	4623      	mov	r3, r4
 8007760:	79fc      	ldrb	r4, [r7, #7]
 8007762:	4610      	mov	r0, r2
 8007764:	4619      	mov	r1, r3
 8007766:	f7f9 fa3f 	bl	8000be8 <__aeabi_d2f>
 800776a:	4601      	mov	r1, r0
 800776c:	4a36      	ldr	r2, [pc, #216]	; (8007848 <digitaldash_tick+0x388>)
 800776e:	4623      	mov	r3, r4
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4423      	add	r3, r4
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	3308      	adds	r3, #8
 800777a:	6019      	str	r1, [r3, #0]
                if( stream[i].pid_value >= 200 )
 800777c:	79fa      	ldrb	r2, [r7, #7]
 800777e:	4932      	ldr	r1, [pc, #200]	; (8007848 <digitaldash_tick+0x388>)
 8007780:	4613      	mov	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	440b      	add	r3, r1
 800778a:	3308      	adds	r3, #8
 800778c:	edd3 7a00 	vldr	s15, [r3]
 8007790:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800784c <digitaldash_tick+0x38c>
 8007794:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800779c:	db0a      	blt.n	80077b4 <digitaldash_tick+0x2f4>
                    stream[i].pid_value = 0;
 800779e:	79fa      	ldrb	r2, [r7, #7]
 80077a0:	4929      	ldr	r1, [pc, #164]	; (8007848 <digitaldash_tick+0x388>)
 80077a2:	4613      	mov	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	440b      	add	r3, r1
 80077ac:	3308      	adds	r3, #8
 80077ae:	f04f 0200 	mov.w	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]
        for( uint8_t i = 0; i < num_pids; i++ )
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	3301      	adds	r3, #1
 80077b8:	71fb      	strb	r3, [r7, #7]
 80077ba:	79fa      	ldrb	r2, [r7, #7]
 80077bc:	4b24      	ldr	r3, [pc, #144]	; (8007850 <digitaldash_tick+0x390>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	f4ff ae97 	bcc.w	80074f4 <digitaldash_tick+0x34>
            }
        }
    }
    #endif

    if( digitaldash_delay > 0 )
 80077c6:	4b23      	ldr	r3, [pc, #140]	; (8007854 <digitaldash_tick+0x394>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d004      	beq.n	80077d8 <digitaldash_tick+0x318>
        digitaldash_delay--;
 80077ce:	4b21      	ldr	r3, [pc, #132]	; (8007854 <digitaldash_tick+0x394>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	4a1f      	ldr	r2, [pc, #124]	; (8007854 <digitaldash_tick+0x394>)
 80077d6:	6013      	str	r3, [r2, #0]

    if( digitaldash_app_wtchdg > 0 )
 80077d8:	4b1f      	ldr	r3, [pc, #124]	; (8007858 <digitaldash_tick+0x398>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d004      	beq.n	80077ea <digitaldash_tick+0x32a>
        digitaldash_app_wtchdg--;
 80077e0:	4b1d      	ldr	r3, [pc, #116]	; (8007858 <digitaldash_tick+0x398>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	4a1c      	ldr	r2, [pc, #112]	; (8007858 <digitaldash_tick+0x398>)
 80077e8:	6013      	str	r3, [r2, #0]

    if( digitaldash_bklt_wtchdg > 0 )
 80077ea:	4b1c      	ldr	r3, [pc, #112]	; (800785c <digitaldash_tick+0x39c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d004      	beq.n	80077fc <digitaldash_tick+0x33c>
        digitaldash_bklt_wtchdg--;
 80077f2:	4b1a      	ldr	r3, [pc, #104]	; (800785c <digitaldash_tick+0x39c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3b01      	subs	r3, #1
 80077f8:	4a18      	ldr	r2, [pc, #96]	; (800785c <digitaldash_tick+0x39c>)
 80077fa:	6013      	str	r3, [r2, #0]

    #ifdef USE_LIB_OBDII
    if( tester_present > 0 ) {
 80077fc:	4b18      	ldr	r3, [pc, #96]	; (8007860 <digitaldash_tick+0x3a0>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d005      	beq.n	8007810 <digitaldash_tick+0x350>
        tester_present--;
 8007804:	4b16      	ldr	r3, [pc, #88]	; (8007860 <digitaldash_tick+0x3a0>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3b01      	subs	r3, #1
 800780a:	4a15      	ldr	r2, [pc, #84]	; (8007860 <digitaldash_tick+0x3a0>)
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	e00c      	b.n	800782a <digitaldash_tick+0x36a>
    }
    /* Check if a tester was previously present */
    else if( digitaldash_get_flag( DD_TESTER_PRESENT ) == TESTER_PRESENT )
 8007810:	2009      	movs	r0, #9
 8007812:	f7ff fc0d 	bl	8007030 <digitaldash_get_flag>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d106      	bne.n	800782a <digitaldash_tick+0x36a>
    {
        /* The timer expired, therefore it is assumed no tester is present */
        update_app_flag( DD_TESTER_PRESENT, NO_TESTER_PRESENT );
 800781c:	2101      	movs	r1, #1
 800781e:	2009      	movs	r0, #9
 8007820:	f7ff fbce 	bl	8006fc0 <update_app_flag>

        #ifdef LIB_OBDII_H_
        /* Allow OBDII communication now that it is the only device present */
        OBDII_Continue( &obdii );
 8007824:	480f      	ldr	r0, [pc, #60]	; (8007864 <digitaldash_tick+0x3a4>)
 8007826:	f000 fc76 	bl	8008116 <OBDII_Continue>
        #endif
    }
    #endif

    KE_tick();
 800782a:	f000 fbe5 	bl	8007ff8 <KE_tick>

    #ifdef USE_LIB_OBDII
    OBDII_tick();
 800782e:	f001 fb8d 	bl	8008f4c <OBDII_tick>
    #endif

    #ifdef USE_LIB_CAN_BUS_SNIFFER
    CAN_Sniffer_tick();
 8007832:	f7ff fa13 	bl	8006c5c <CAN_Sniffer_tick>
    #endif
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	bd90      	pop	{r4, r7, pc}
 800783e:	bf00      	nop
 8007840:	9999999a 	.word	0x9999999a
 8007844:	3fa99999 	.word	0x3fa99999
 8007848:	20000250 	.word	0x20000250
 800784c:	43480000 	.word	0x43480000
 8007850:	2000024c 	.word	0x2000024c
 8007854:	20000734 	.word	0x20000734
 8007858:	20000024 	.word	0x20000024
 800785c:	20000028 	.word	0x20000028
 8007860:	20000738 	.word	0x20000738
 8007864:	200005c0 	.word	0x200005c0

08007868 <KE_Initialize>:
{
    return dev->diagnostic.tx_abort_count;
}

KE_STATUS KE_Initialize( PKE_PACKET_MANAGER dev )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
    dev->status_flags = 0;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    clear_diagnostics( dev );
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fbdb 	bl	8008034 <clear_diagnostics>
    flush_tx_buffer( dev );
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fbeb 	bl	800805a <flush_tx_buffer>
    flush_rx_buffer( dev );
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fbfb 	bl	8008080 <flush_rx_buffer>
    clear_pid_entries( dev );
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fc0b 	bl	80080a6 <clear_pid_entries>
    dev->ke_time = ke_tick;
 8007890:	4b04      	ldr	r3, [pc, #16]	; (80078a4 <KE_Initialize+0x3c>)
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	63da      	str	r2, [r3, #60]	; 0x3c
    return KE_OK;
 8007898:	2308      	movs	r3, #8
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20000764 	.word	0x20000764

080078a8 <KE_Service>:

KE_STATUS KE_Service( PKE_PACKET_MANAGER dev )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
    /*********************************************************
     * Packet has been received and is ready for
     * processing.
     *********************************************************/
    if( dev->status_flags & KE_PCKT_CMPLT )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00f      	beq.n	80078de <KE_Service+0x36>
    {
        KE_Process_Packet(dev);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f87e 	bl	80079c0 <KE_Process_Packet>

        dev->status_flags &= ~KE_PCKT_CMPLT;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078ca:	f023 0302 	bic.w	r3, r3, #2
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

        reset_idle_time( dev );
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fb9c 	bl	8008014 <reset_idle_time>
 80078dc:	e044      	b.n	8007968 <KE_Service+0xc0>
    }

    /* See if the stream is active */
    else if( dev->status_flags & KE_STREAM_ACTIVE )
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078e4:	f003 0310 	and.w	r3, r3, #16
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d03d      	beq.n	8007968 <KE_Service+0xc0>
    {
        /* If so, see if a packet has been sent and is awaiting acknowledgment */
        if( dev->status_flags & KE_PENDING_ACK )
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078f2:	f003 0304 	and.w	r3, r3, #4
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d016      	beq.n	8007928 <KE_Service+0x80>
        {
            /* Verify the message hasn't timed out */
            if( ke_tick > (dev->ke_time + KE_TIMEOUT) )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fe:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8007902:	4b2e      	ldr	r3, [pc, #184]	; (80079bc <KE_Service+0x114>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d22e      	bcs.n	8007968 <KE_Service+0xc0>
            {
                /* If so, clear the pending ack flag in order to re-send the data */
                dev->status_flags &= ~KE_PENDING_ACK;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007910:	f023 0304 	bic.w	r3, r3, #4
 8007914:	b29a      	uxth	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

                /* Abort the tx message and increment the transmission abort counter */
                dev->diagnostic.tx_abort_count++;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007920:	1c5a      	adds	r2, r3, #1
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	651a      	str	r2, [r3, #80]	; 0x50
 8007926:	e01f      	b.n	8007968 <KE_Service+0xc0>
            }
        } else {

            reset_idle_time( dev );
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fb73 	bl	8008014 <reset_idle_time>

            dev->status_flags |= KE_NEW_DATA;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

            if( dev->status_flags & KE_NEW_DATA )
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00c      	beq.n	8007968 <KE_Service+0xc0>
            {
                /* There are no pending message, send the new data */
                Generate_TX_Message(dev, KE_PID_STREAM_REPORT);
 800794e:	2109      	movs	r1, #9
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f9ef 	bl	8007d34 <Generate_TX_Message>

                dev->status_flags |= KE_PENDING_ACK;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800795c:	f043 0304 	orr.w	r3, r3, #4
 8007960:	b29a      	uxth	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            }
        }
    }

    if( dev->status_flags & KE_PID_UPDATED )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800796e:	f003 0320 	and.w	r3, r3, #32
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <KE_Service+0xe4>
    {
        dev->status_flags &= ~KE_PID_UPDATED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800797c:	f023 0320 	bic.w	r3, r3, #32
 8007980:	b29a      	uxth	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        return KE_PID_REQ_UPDATE;
 8007988:	2305      	movs	r3, #5
 800798a:	e012      	b.n	80079b2 <KE_Service+0x10a>
    } else if ( dev->status_flags & KE_SYSTEM_REBOOT )
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <KE_Service+0x108>
    {
        dev->status_flags &= ~KE_SYSTEM_REBOOT;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        return KE_REBOOT;
 80079ac:	2306      	movs	r3, #6
 80079ae:	e000      	b.n	80079b2 <KE_Service+0x10a>
    } else {
        return KE_OK;
 80079b0:	2308      	movs	r3, #8
    }
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20000764 	.word	0x20000764

080079c0 <KE_Process_Packet>:

static KE_STATUS KE_Process_Packet( PKE_PACKET_MANAGER dev )
{
 80079c0:	b590      	push	{r4, r7, lr}
 80079c2:	b089      	sub	sp, #36	; 0x24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
    switch( dev->rx_buffer[KE_PCKT_CMD_POS] )
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 80079ce:	3b01      	subs	r3, #1
 80079d0:	2b14      	cmp	r3, #20
 80079d2:	f200 80ea 	bhi.w	8007baa <KE_Process_Packet+0x1ea>
 80079d6:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <KE_Process_Packet+0x1c>)
 80079d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079dc:	08007a31 	.word	0x08007a31
 80079e0:	08007baf 	.word	0x08007baf
 80079e4:	08007ab9 	.word	0x08007ab9
 80079e8:	08007a81 	.word	0x08007a81
 80079ec:	08007ac3 	.word	0x08007ac3
 80079f0:	08007bab 	.word	0x08007bab
 80079f4:	08007bab 	.word	0x08007bab
 80079f8:	08007bab 	.word	0x08007bab
 80079fc:	08007bab 	.word	0x08007bab
 8007a00:	08007bab 	.word	0x08007bab
 8007a04:	08007bab 	.word	0x08007bab
 8007a08:	08007bab 	.word	0x08007bab
 8007a0c:	08007bab 	.word	0x08007bab
 8007a10:	08007bab 	.word	0x08007bab
 8007a14:	08007bab 	.word	0x08007bab
 8007a18:	08007bab 	.word	0x08007bab
 8007a1c:	08007bab 	.word	0x08007bab
 8007a20:	08007bab 	.word	0x08007bab
 8007a24:	08007bab 	.word	0x08007bab
 8007a28:	08007a5f 	.word	0x08007a5f
 8007a2c:	08007a9d 	.word	0x08007a9d
    {
		case KE_ACK:
			/* ACK received, clear the pending ACK flag */
			dev->status_flags &= ~KE_PENDING_ACK;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a36:	f023 0304 	bic.w	r3, r3, #4
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

			/* The active cooling byte is optional in an ACK */
			if( dev->rx_byte_count == 0x04 )
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	f040 80b2 	bne.w	8007bb2 <KE_Process_Packet+0x1f2>
			    dev->init.cooling( dev->rx_buffer[3] );
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4798      	blx	r3

			break;
 8007a5c:	e0a9      	b.n	8007bb2 <KE_Process_Packet+0x1f2>
			break;

		case KE_POWER_CYCLE:

			/* Acknowledge the message */
			Generate_TX_Message( dev, KE_ACK  );
 8007a5e:	2101      	movs	r1, #1
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f967 	bl	8007d34 <Generate_TX_Message>

			/* System is shutting down */
			KE_Initialize( dev );
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff fefe 	bl	8007868 <KE_Initialize>

			/* Indicate the system rebooted */
			dev->status_flags |= KE_SYSTEM_REBOOT;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

			break;
 8007a7e:	e099      	b.n	8007bb4 <KE_Process_Packet+0x1f4>

		case KE_SYS_READY:

			/* Acknowledge the message */
			Generate_TX_Message( dev, KE_ACK  );
 8007a80:	2101      	movs	r1, #1
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f956 	bl	8007d34 <Generate_TX_Message>

			/* ACK the successfully received message */
			dev->status_flags |= KE_SYSTEM_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a8e:	f043 0308 	orr.w	r3, r3, #8
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

			break;
 8007a9a:	e08b      	b.n	8007bb4 <KE_Process_Packet+0x1f4>

		case KE_FIRMWARE_REQ:

			/* Report the firmware */
			Generate_TX_Message( dev, KE_FIRMWARE_REPORT  );
 8007a9c:	2116      	movs	r1, #22
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f948 	bl	8007d34 <Generate_TX_Message>


			dev->status_flags &= ~KE_STREAM_ACTIVE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007aaa:	f023 0310 	bic.w	r3, r3, #16
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

			break;
 8007ab6:	e07d      	b.n	8007bb4 <KE_Process_Packet+0x1f4>

		case KE_HEARTBEAT:

			Generate_TX_Message( dev, KE_ACK  );
 8007ab8:	2101      	movs	r1, #1
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f93a 	bl	8007d34 <Generate_TX_Message>

			break;
 8007ac0:	e078      	b.n	8007bb4 <KE_Process_Packet+0x1f4>

		case KE_PID_STREAM_NEW:

			/* Make sure the packet has data */
			if( dev->rx_byte_count > KE_PCKT_DATA_START_POS )
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8007ac8:	2b03      	cmp	r3, #3
 8007aca:	d957      	bls.n	8007b7c <KE_Process_Packet+0x1bc>
			{
				clear_pid_entries( dev );
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 faea 	bl	80080a6 <clear_pid_entries>

				//TODO verify there aren't too many PIDs
				dev->num_pids = (dev->rx_byte_count - KE_PCKT_DATA_START_POS) / BYTES_PER_STREAM_REQ;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8007ad8:	3b03      	subs	r3, #3
 8007ada:	4a39      	ldr	r2, [pc, #228]	; (8007bc0 <KE_Process_Packet+0x200>)
 8007adc:	fb82 1203 	smull	r1, r2, r2, r3
 8007ae0:	1052      	asrs	r2, r2, #1
 8007ae2:	17db      	asrs	r3, r3, #31
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128

				PID_DATA tmp_pid;

				for( uint8_t i = 0; i < dev->num_pids; i++)
 8007aee:	2300      	movs	r3, #0
 8007af0:	77fb      	strb	r3, [r7, #31]
 8007af2:	e03d      	b.n	8007b70 <KE_Process_Packet+0x1b0>
				{
					tmp_pid.pid_unit  =  dev->rx_buffer[((i*BYTES_PER_STREAM_REQ) + 1) + KE_PCKT_DATA_START_POS];
 8007af4:	7ffa      	ldrb	r2, [r7, #31]
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	3304      	adds	r3, #4
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	4413      	add	r3, r2
 8007b02:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007b06:	733b      	strb	r3, [r7, #12]
					tmp_pid.mode      =  dev->rx_buffer[((i*BYTES_PER_STREAM_REQ) + 2) + KE_PCKT_DATA_START_POS];
 8007b08:	7ffb      	ldrb	r3, [r7, #31]
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	4413      	add	r3, r2
 8007b16:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007b1a:	723b      	strb	r3, [r7, #8]
					tmp_pid.pid       = (dev->rx_buffer[((i*BYTES_PER_STREAM_REQ) + 3) + KE_PCKT_DATA_START_POS] & 0xFF) << 8;
 8007b1c:	7ffa      	ldrb	r2, [r7, #31]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	3306      	adds	r3, #6
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	021b      	lsls	r3, r3, #8
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	817b      	strh	r3, [r7, #10]
					tmp_pid.pid      |= (dev->rx_buffer[((i*BYTES_PER_STREAM_REQ) + 4) + KE_PCKT_DATA_START_POS] & 0xFF);
 8007b36:	897b      	ldrh	r3, [r7, #10]
 8007b38:	b299      	uxth	r1, r3
 8007b3a:	7ffa      	ldrb	r2, [r7, #31]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	3307      	adds	r3, #7
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	4413      	add	r3, r2
 8007b48:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	817b      	strh	r3, [r7, #10]
					dev->stream[i] = dev->init.req_pid( &tmp_pid );
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b58:	7ffc      	ldrb	r4, [r7, #31]
 8007b5a:	f107 0208 	add.w	r2, r7, #8
 8007b5e:	4610      	mov	r0, r2
 8007b60:	4798      	blx	r3
 8007b62:	4602      	mov	r2, r0
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				for( uint8_t i = 0; i < dev->num_pids; i++)
 8007b6a:	7ffb      	ldrb	r3, [r7, #31]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	77fb      	strb	r3, [r7, #31]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8007b76:	7ffa      	ldrb	r2, [r7, #31]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d3bb      	bcc.n	8007af4 <KE_Process_Packet+0x134>
				}
			}

			dev->status_flags |= KE_STREAM_ACTIVE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b82:	f043 0310 	orr.w	r3, r3, #16
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

			dev->status_flags |= KE_PID_UPDATED;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b94:	f043 0320 	orr.w	r3, r3, #32
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

			Generate_TX_Message(  dev, KE_ACK  );
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f8c6 	bl	8007d34 <Generate_TX_Message>

			break;
 8007ba8:	e004      	b.n	8007bb4 <KE_Process_Packet+0x1f4>

		default:
			return KE_ERROR;
 8007baa:	2300      	movs	r3, #0
 8007bac:	e003      	b.n	8007bb6 <KE_Process_Packet+0x1f6>
			break;
 8007bae:	bf00      	nop
 8007bb0:	e000      	b.n	8007bb4 <KE_Process_Packet+0x1f4>
			break;
 8007bb2:	bf00      	nop
			break;
    }

    return KE_OK;
 8007bb4:	2308      	movs	r3, #8
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3724      	adds	r7, #36	; 0x24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd90      	pop	{r4, r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	66666667 	.word	0x66666667

08007bc4 <KE_Add_UART_Byte>:

KE_STATUS KE_Add_UART_Byte( PKE_PACKET_MANAGER dev, uint8_t byte )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
    /* Look for a start of line byte */
    if( byte == KE_SOL )
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	2bff      	cmp	r3, #255	; 0xff
 8007bd4:	d12f      	bne.n	8007c36 <KE_Add_UART_Byte+0x72>
    {
        /* Check if a current RX is in progress */
        if ( dev->status_flags & KE_RX_IN_PROGRESS )
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <KE_Add_UART_Byte+0x2a>
        {
            /* Increment the number of aborted RX messages */
            dev->diagnostic.rx_abort_count++;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start of a new message, reset the buffer */
        memset( dev->rx_buffer, 0, KE_MAX_PAYLOAD );
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	33c3      	adds	r3, #195	; 0xc3
 8007bf2:	2264      	movs	r2, #100	; 0x64
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f001 fcc6 	bl	8009588 <memset>

        /* Reset the byte count */
        dev->rx_byte_count = 0x00;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127

        /* Add the byte to the buffer */
        dev->rx_buffer[dev->rx_byte_count++] = byte;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	b2d1      	uxtb	r1, r2
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	f882 1127 	strb.w	r1, [r2, #295]	; 0x127
 8007c14:	461a      	mov	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4413      	add	r3, r2
 8007c1a:	78fa      	ldrb	r2, [r7, #3]
 8007c1c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

        /* Indicate an RX is in progress */
        dev->status_flags |= KE_RX_IN_PROGRESS;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c26:	f043 0301 	orr.w	r3, r3, #1
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

        return KE_START_OF_NEW_MSG;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e079      	b.n	8007d2a <KE_Add_UART_Byte+0x166>
    }

    /* A Message is in progress */
    else if ( dev->status_flags & KE_RX_IN_PROGRESS )
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d071      	beq.n	8007d28 <KE_Add_UART_Byte+0x164>
    {
        /* Verify the UART buffer has room */
        if( dev->rx_byte_count >= KE_MAX_PAYLOAD )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8007c4a:	2b63      	cmp	r3, #99	; 0x63
 8007c4c:	d91a      	bls.n	8007c84 <KE_Add_UART_Byte+0xc0>
        {
            /* Increment the number of aborted RX messages */
            dev->diagnostic.rx_abort_count++;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c52:	1c5a      	adds	r2, r3, #1
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	655a      	str	r2, [r3, #84]	; 0x54

            /* Indicate an RX has ended */
            dev->status_flags &= ~KE_RX_IN_PROGRESS;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c5e:	f023 0301 	bic.w	r3, r3, #1
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

            /* Reset the UART buffer, something has gone horribly wrong */
            memset( dev->rx_buffer, 0, KE_MAX_PAYLOAD );
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	33c3      	adds	r3, #195	; 0xc3
 8007c6e:	2264      	movs	r2, #100	; 0x64
 8007c70:	2100      	movs	r1, #0
 8007c72:	4618      	mov	r0, r3
 8007c74:	f001 fc88 	bl	8009588 <memset>

            /* Reset the byte count */
            dev->rx_byte_count = 0;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127

            return KE_BUFFER_FULL;
 8007c80:	2302      	movs	r3, #2
 8007c82:	e052      	b.n	8007d2a <KE_Add_UART_Byte+0x166>
        }

        /* Add the byte to the buffer */
        dev->rx_buffer[dev->rx_byte_count++] = byte;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	b2d1      	uxtb	r1, r2
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	f882 1127 	strb.w	r1, [r2, #295]	; 0x127
 8007c94:	461a      	mov	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4413      	add	r3, r2
 8007c9a:	78fa      	ldrb	r2, [r7, #3]
 8007c9c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

        /* See if the message is complete */
        if( dev->rx_byte_count == dev->rx_buffer[ KE_PCKT_LEN_POS ] )
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 2127 	ldrb.w	r2, [r3, #295]	; 0x127
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d118      	bne.n	8007ce2 <KE_Add_UART_Byte+0x11e>
        {
            /* Indicate an RX has ended */
            dev->status_flags &= ~KE_RX_IN_PROGRESS;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cb6:	f023 0301 	bic.w	r3, r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

            /* Increment the number of received RX messages */
            dev->diagnostic.rx_count++;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set the Message complete flag */
            dev->status_flags |= KE_PCKT_CMPLT;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cd2:	f043 0302 	orr.w	r3, r3, #2
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

            return KE_PACKET_COMPLETE;
 8007cde:	2304      	movs	r3, #4
 8007ce0:	e023      	b.n	8007d2a <KE_Add_UART_Byte+0x166>
        }

        /* This should not have happened, abort! */
        else if ( dev->rx_byte_count > dev->rx_buffer[ KE_PCKT_LEN_POS ] )
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 2127 	ldrb.w	r2, [r3, #295]	; 0x127
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d918      	bls.n	8007d24 <KE_Add_UART_Byte+0x160>
        {
            /* Increment the number of aborted RX messages */
            dev->diagnostic.rx_abort_count++;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Indicate an RX has ended */
            dev->status_flags &= ~KE_RX_IN_PROGRESS;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d02:	f023 0301 	bic.w	r3, r3, #1
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

            /* Reset the UART buffer, something has gone horribly wrong */
            memset( dev->rx_buffer, 0, KE_MAX_PAYLOAD );
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	33c3      	adds	r3, #195	; 0xc3
 8007d12:	2264      	movs	r2, #100	; 0x64
 8007d14:	2100      	movs	r1, #0
 8007d16:	4618      	mov	r0, r3
 8007d18:	f001 fc36 	bl	8009588 <memset>

            /* Reset the byte count */
            dev->rx_byte_count = 0;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        }
        return KE_OK;
 8007d24:	2308      	movs	r3, #8
 8007d26:	e000      	b.n	8007d2a <KE_Add_UART_Byte+0x166>
    }

    else {
        return KE_OUT_OF_SYNC;
 8007d28:	2303      	movs	r3, #3
    }
    return KE_ERROR;
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
	...

08007d34 <Generate_TX_Message>:

static void Generate_TX_Message(  PKE_PACKET_MANAGER dev, KE_CP_OP_CODES cmd )
{
 8007d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d38:	b08a      	sub	sp, #40	; 0x28
 8007d3a:	af04      	add	r7, sp, #16
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	72fb      	strb	r3, [r7, #11]
	/* Clear the buffer */
    flush_tx_buffer( dev );
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 f989 	bl	800805a <flush_tx_buffer>

    /* Populate the Start of Line byte */
    dev->tx_buffer[KE_PCKT_SOL_POS] = KE_SOL;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	22ff      	movs	r2, #255	; 0xff
 8007d4c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

    /* Command */
    dev->tx_buffer[KE_PCKT_CMD_POS] = cmd;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	7afa      	ldrb	r2, [r7, #11]
 8007d54:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    /* Align the buffer to start of the data bytes */
    dev->tx_byte_count = KE_PCKT_DATA_START_POS;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2203      	movs	r2, #3
 8007d5c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

    //XXX The MCU may never need to send any data.

    /* Populate supporting data */
    switch( cmd )
 8007d60:	7afb      	ldrb	r3, [r7, #11]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	2b15      	cmp	r3, #21
 8007d66:	f200 811d 	bhi.w	8007fa4 <Generate_TX_Message+0x270>
 8007d6a:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <Generate_TX_Message+0x3c>)
 8007d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d70:	08007fa5 	.word	0x08007fa5
 8007d74:	08007fa5 	.word	0x08007fa5
 8007d78:	08007fa5 	.word	0x08007fa5
 8007d7c:	08007fa5 	.word	0x08007fa5
 8007d80:	08007fa5 	.word	0x08007fa5
 8007d84:	08007fa5 	.word	0x08007fa5
 8007d88:	08007fa5 	.word	0x08007fa5
 8007d8c:	08007fa5 	.word	0x08007fa5
 8007d90:	08007dc9 	.word	0x08007dc9
 8007d94:	08007fa5 	.word	0x08007fa5
 8007d98:	08007fa5 	.word	0x08007fa5
 8007d9c:	08007fa5 	.word	0x08007fa5
 8007da0:	08007fa5 	.word	0x08007fa5
 8007da4:	08007fa5 	.word	0x08007fa5
 8007da8:	08007fa5 	.word	0x08007fa5
 8007dac:	08007fa5 	.word	0x08007fa5
 8007db0:	08007fa5 	.word	0x08007fa5
 8007db4:	08007fa5 	.word	0x08007fa5
 8007db8:	08007fa5 	.word	0x08007fa5
 8007dbc:	08007fa5 	.word	0x08007fa5
 8007dc0:	08007fa5 	.word	0x08007fa5
 8007dc4:	08007f5d 	.word	0x08007f5d
			break;
		case KE_PID_STREAM_CLEAR:
			/*TODO: Add support to be a host */
			break;
		case KE_PID_STREAM_REPORT:
			for( uint8_t i = 0; i < dev->num_pids; i++)
 8007dc8:	2300      	movs	r3, #0
 8007dca:	75fb      	strb	r3, [r7, #23]
 8007dcc:	e0be      	b.n	8007f4c <Generate_TX_Message+0x218>
			{
			    float value = dev->stream[i]->pid_value;
 8007dce:	7dfa      	ldrb	r2, [r7, #23]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	613b      	str	r3, [r7, #16]
			    uint8_t units = dev->stream[i]->base_unit;
 8007dda:	7dfa      	ldrb	r2, [r7, #23]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de2:	795b      	ldrb	r3, [r3, #5]
 8007de4:	75bb      	strb	r3, [r7, #22]

			    if( dev->stream[i]->timestamp == 0 ) {
 8007de6:	7dfa      	ldrb	r2, [r7, #23]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d103      	bne.n	8007dfc <Generate_TX_Message+0xc8>
			        value = 0;
 8007df4:	f04f 0300 	mov.w	r3, #0
 8007df8:	613b      	str	r3, [r7, #16]
 8007dfa:	e020      	b.n	8007e3e <Generate_TX_Message+0x10a>
			    } else if( dev->stream[i]->pid_unit != dev->stream[i]->base_unit ) {
 8007dfc:	7dfa      	ldrb	r2, [r7, #23]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e04:	791b      	ldrb	r3, [r3, #4]
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	7df9      	ldrb	r1, [r7, #23]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e10:	795b      	ldrb	r3, [r3, #5]
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d012      	beq.n	8007e3e <Generate_TX_Message+0x10a>
			        units = convert_units( dev->stream[i]->base_unit, dev->stream[i]->pid_unit, &value );
 8007e18:	7dfa      	ldrb	r2, [r7, #23]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e20:	795b      	ldrb	r3, [r3, #5]
 8007e22:	b2d8      	uxtb	r0, r3
 8007e24:	7dfa      	ldrb	r2, [r7, #23]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2c:	791b      	ldrb	r3, [r3, #4]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f107 0210 	add.w	r2, r7, #16
 8007e34:	4619      	mov	r1, r3
 8007e36:	f001 fa6f 	bl	8009318 <convert_units>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	75bb      	strb	r3, [r7, #22]
			    }

			    /* Data stream format: <pid>:<units>:<value> */

				/* Check if this is a 2 byte PID */
				if( ((dev->stream[i]->pid >> 8) & 0xFF) || 0 )
 8007e3e:	7dfa      	ldrb	r2, [r7, #23]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e46:	885b      	ldrh	r3, [r3, #2]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	0a1b      	lsrs	r3, r3, #8
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d031      	beq.n	8007eb8 <Generate_TX_Message+0x184>
					dev->tx_byte_count += snprintf((char*)(&dev->tx_buffer[dev->tx_byte_count]), KE_MAX_PAYLOAD ,
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8007e5a:	3358      	adds	r3, #88	; 0x58
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	4413      	add	r3, r2
 8007e60:	1d9e      	adds	r6, r3, #6
							"0x%02X%04X:%u:%.2f", dev->stream[i]->mode, (uint16_t)(dev->stream[i]->pid), units, value);
 8007e62:	7dfa      	ldrb	r2, [r7, #23]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	b2db      	uxtb	r3, r3
					dev->tx_byte_count += snprintf((char*)(&dev->tx_buffer[dev->tx_byte_count]), KE_MAX_PAYLOAD ,
 8007e6e:	4698      	mov	r8, r3
							"0x%02X%04X:%u:%.2f", dev->stream[i]->mode, (uint16_t)(dev->stream[i]->pid), units, value);
 8007e70:	7dfa      	ldrb	r2, [r7, #23]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e78:	885b      	ldrh	r3, [r3, #2]
 8007e7a:	b29b      	uxth	r3, r3
					dev->tx_byte_count += snprintf((char*)(&dev->tx_buffer[dev->tx_byte_count]), KE_MAX_PAYLOAD ,
 8007e7c:	607b      	str	r3, [r7, #4]
 8007e7e:	7dbd      	ldrb	r5, [r7, #22]
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7f8 fb80 	bl	8000588 <__aeabi_f2d>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007e90:	9501      	str	r5, [sp, #4]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	4643      	mov	r3, r8
 8007e98:	4a54      	ldr	r2, [pc, #336]	; (8007fec <Generate_TX_Message+0x2b8>)
 8007e9a:	2164      	movs	r1, #100	; 0x64
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f001 ffd7 	bl	8009e50 <sniprintf>
 8007ea2:	4601      	mov	r1, r0
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
 8007eaa:	b2cb      	uxtb	r3, r1
 8007eac:	4413      	add	r3, r2
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
							"0x%02X%04X:%u:%.2f", dev->stream[i]->mode, (uint16_t)(dev->stream[i]->pid), units, value);
 8007eb6:	e031      	b.n	8007f1c <Generate_TX_Message+0x1e8>

				/* If not, assume it is a single byte PID */
				else
					dev->tx_byte_count += snprintf((char*)(&dev->tx_buffer[dev->tx_byte_count]), KE_MAX_PAYLOAD ,
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8007ebe:	3358      	adds	r3, #88	; 0x58
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	1d9e      	adds	r6, r3, #6
							"0x%02X%02X:%u:%.2f", dev->stream[i]->mode, (uint8_t)(dev->stream[i]->pid & 0xFF), units, value);
 8007ec6:	7dfa      	ldrb	r2, [r7, #23]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	b2db      	uxtb	r3, r3
					dev->tx_byte_count += snprintf((char*)(&dev->tx_buffer[dev->tx_byte_count]), KE_MAX_PAYLOAD ,
 8007ed2:	4698      	mov	r8, r3
							"0x%02X%02X:%u:%.2f", dev->stream[i]->mode, (uint8_t)(dev->stream[i]->pid & 0xFF), units, value);
 8007ed4:	7dfa      	ldrb	r2, [r7, #23]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007edc:	885b      	ldrh	r3, [r3, #2]
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	b2db      	uxtb	r3, r3
					dev->tx_byte_count += snprintf((char*)(&dev->tx_buffer[dev->tx_byte_count]), KE_MAX_PAYLOAD ,
 8007ee2:	607b      	str	r3, [r7, #4]
 8007ee4:	7dbd      	ldrb	r5, [r7, #22]
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7f8 fb4d 	bl	8000588 <__aeabi_f2d>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007ef6:	9501      	str	r5, [sp, #4]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	4643      	mov	r3, r8
 8007efe:	4a3c      	ldr	r2, [pc, #240]	; (8007ff0 <Generate_TX_Message+0x2bc>)
 8007f00:	2164      	movs	r1, #100	; 0x64
 8007f02:	4630      	mov	r0, r6
 8007f04:	f001 ffa4 	bl	8009e50 <sniprintf>
 8007f08:	4601      	mov	r1, r0
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
 8007f10:	b2cb      	uxtb	r3, r1
 8007f12:	4413      	add	r3, r2
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

				/* Add a semi-colon after every PID except the last */
				if( i < dev->num_pids - 1 )
 8007f1c:	7dfa      	ldrb	r2, [r7, #23]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8007f24:	3b01      	subs	r3, #1
 8007f26:	429a      	cmp	r2, r3
 8007f28:	da0d      	bge.n	8007f46 <Generate_TX_Message+0x212>
					dev->tx_buffer[dev->tx_byte_count++] = ',';
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8007f30:	1c5a      	adds	r2, r3, #1
 8007f32:	b2d1      	uxtb	r1, r2
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	f882 10c2 	strb.w	r1, [r2, #194]	; 0xc2
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4413      	add	r3, r2
 8007f40:	222c      	movs	r2, #44	; 0x2c
 8007f42:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			for( uint8_t i = 0; i < dev->num_pids; i++)
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	75fb      	strb	r3, [r7, #23]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8007f52:	7dfa      	ldrb	r2, [r7, #23]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	f4ff af3a 	bcc.w	8007dce <Generate_TX_Message+0x9a>
			}
			break;
 8007f5a:	e024      	b.n	8007fa6 <Generate_TX_Message+0x272>
			break;
		case KE_FIRMWARE_REQ:
			/*TODO: Add support to be a host */
			break;
		case KE_FIRMWARE_REPORT:
			dev->tx_byte_count += snprintf( (char*)(&dev->tx_buffer[dev->tx_byte_count]), KE_MAX_PAYLOAD , "%02d.%02d.%02d",
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8007f62:	3358      	adds	r3, #88	; 0x58
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	4413      	add	r3, r2
 8007f68:	1d98      	adds	r0, r3, #6
					dev->init.firmware_version_major ,
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
			dev->tx_byte_count += snprintf( (char*)(&dev->tx_buffer[dev->tx_byte_count]), KE_MAX_PAYLOAD , "%02d.%02d.%02d",
 8007f70:	4619      	mov	r1, r3
					dev->init.firmware_version_minor,
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
			dev->tx_byte_count += snprintf( (char*)(&dev->tx_buffer[dev->tx_byte_count]), KE_MAX_PAYLOAD , "%02d.%02d.%02d",
 8007f78:	461a      	mov	r2, r3
					dev->init.firmware_version_hotfix );
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
			dev->tx_byte_count += snprintf( (char*)(&dev->tx_buffer[dev->tx_byte_count]), KE_MAX_PAYLOAD , "%02d.%02d.%02d",
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	9200      	str	r2, [sp, #0]
 8007f84:	460b      	mov	r3, r1
 8007f86:	4a1b      	ldr	r2, [pc, #108]	; (8007ff4 <Generate_TX_Message+0x2c0>)
 8007f88:	2164      	movs	r1, #100	; 0x64
 8007f8a:	f001 ff61 	bl	8009e50 <sniprintf>
 8007f8e:	4601      	mov	r1, r0
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
 8007f96:	b2cb      	uxtb	r3, r1
 8007f98:	4413      	add	r3, r2
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
			break;
 8007fa2:	e000      	b.n	8007fa6 <Generate_TX_Message+0x272>
		default:
			break;
 8007fa4:	bf00      	nop
    }

    /* Packet is complete */
    dev->tx_buffer[ dev->tx_byte_count++ ] = KE_EOL;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	b2d1      	uxtb	r1, r2
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	f882 10c2 	strb.w	r1, [r2, #194]	; 0xc2
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	220a      	movs	r2, #10
 8007fbe:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

    /* Populate the length */
    dev->tx_buffer[KE_PCKT_LEN_POS] = dev->tx_byte_count;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

    /* Send the packet */
    dev->init.transmit( dev->tx_buffer, dev->tx_byte_count );
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	f102 005e 	add.w	r0, r2, #94	; 0x5e
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	f892 20c2 	ldrb.w	r2, [r2, #194]	; 0xc2
 8007fde:	4611      	mov	r1, r2
 8007fe0:	4798      	blx	r3

}
 8007fe2:	bf00      	nop
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fec:	0800b650 	.word	0x0800b650
 8007ff0:	0800b664 	.word	0x0800b664
 8007ff4:	0800b678 	.word	0x0800b678

08007ff8 <KE_tick>:

void KE_tick( void )
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
    ke_tick++;
 8007ffc:	4b04      	ldr	r3, [pc, #16]	; (8008010 <KE_tick+0x18>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3301      	adds	r3, #1
 8008002:	4a03      	ldr	r2, [pc, #12]	; (8008010 <KE_tick+0x18>)
 8008004:	6013      	str	r3, [r2, #0]
}
 8008006:	bf00      	nop
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	20000764 	.word	0x20000764

08008014 <reset_idle_time>:

static void reset_idle_time(  PKE_PACKET_MANAGER dev )
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
    dev->ke_time = ke_tick;
 800801c:	4b04      	ldr	r3, [pc, #16]	; (8008030 <reset_idle_time+0x1c>)
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr
 8008030:	20000764 	.word	0x20000764

08008034 <clear_diagnostics>:

static void clear_diagnostics( PKE_PACKET_MANAGER dev )
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
    dev->diagnostic.tx_abort_count = 0;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	651a      	str	r2, [r3, #80]	; 0x50
    dev->diagnostic.rx_abort_count = 0;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	655a      	str	r2, [r3, #84]	; 0x54
    dev->diagnostic.rx_count       = 0;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	659a      	str	r2, [r3, #88]	; 0x58
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <flush_tx_buffer>:


static void flush_tx_buffer( PKE_PACKET_MANAGER dev )
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b082      	sub	sp, #8
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
	/* Clear the buffer */
    memset( dev->tx_buffer, 0, KE_MAX_PAYLOAD );
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	335e      	adds	r3, #94	; 0x5e
 8008066:	2264      	movs	r2, #100	; 0x64
 8008068:	2100      	movs	r1, #0
 800806a:	4618      	mov	r0, r3
 800806c:	f001 fa8c 	bl	8009588 <memset>

    /* Reset the byte count */
    dev->tx_byte_count = 0;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
}
 8008078:	bf00      	nop
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <flush_rx_buffer>:

static void flush_rx_buffer( PKE_PACKET_MANAGER dev )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
	/* Clear the buffer */
    memset( dev->rx_buffer, 0, KE_MAX_PAYLOAD );
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	33c3      	adds	r3, #195	; 0xc3
 800808c:	2264      	movs	r2, #100	; 0x64
 800808e:	2100      	movs	r1, #0
 8008090:	4618      	mov	r0, r3
 8008092:	f001 fa79 	bl	8009588 <memset>

    /* Reset the byte count */
    dev->rx_byte_count = 0;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
}
 800809e:	bf00      	nop
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <clear_pid_entries>:

static void clear_pid_entries( PKE_PACKET_MANAGER dev )
{
 80080a6:	b480      	push	{r7}
 80080a8:	b085      	sub	sp, #20
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
    for( uint8_t i = 0; i < KE_MAX_PIDS; i++ )
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
 80080b2:	e010      	b.n	80080d6 <clear_pid_entries+0x30>
    {
        dev->pid_request[i] = 0;
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	4413      	add	r3, r2
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
        dev->pid_results[i] = 0;
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	334e      	adds	r3, #78	; 0x4e
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	f04f 0200 	mov.w	r2, #0
 80080ce:	601a      	str	r2, [r3, #0]
    for( uint8_t i = 0; i < KE_MAX_PIDS; i++ )
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
 80080d2:	3301      	adds	r3, #1
 80080d4:	73fb      	strb	r3, [r7, #15]
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	2b0e      	cmp	r3, #14
 80080da:	d9eb      	bls.n	80080b4 <clear_pid_entries+0xe>
    }

    /* Reset the byte count */
    dev->num_pids = 0;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
}
 80080e4:	bf00      	nop
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <get_num_bytes>:

uint32_t obdii_tick = 0;

/* Returns the number of bytes a PID request has, if the first byte is 0 *
 * then the pid is a single byte, otherwise it is 2 bytes.               */
static uint8_t get_num_bytes( uint16_t pid ) { return ( 1U + ( (pid >> 8) || 0) ); }
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	80fb      	strh	r3, [r7, #6]
 80080fa:	88fb      	ldrh	r3, [r7, #6]
 80080fc:	0a1b      	lsrs	r3, r3, #8
 80080fe:	b29b      	uxth	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <get_num_bytes+0x18>
 8008104:	2302      	movs	r3, #2
 8008106:	e000      	b.n	800810a <get_num_bytes+0x1a>
 8008108:	2301      	movs	r3, #1
 800810a:	4618      	mov	r0, r3
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <OBDII_Continue>:

/* Re-enable communication, this only needs to be called if the          *
 * communication has been paused.                                        */
void OBDII_Continue( POBDII_PACKET_MANAGER dev )
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
    /* Clear the pause flag */
    dev->status_flags &= ~OBDII_COMM_PAUSE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8008124:	f023 0308 	bic.w	r3, r3, #8
 8008128:	b29a      	uxth	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

    /* Refresh the timeout */
    refresh_timeout(dev);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fefb 	bl	8008f2c <refresh_timeout>
}
 8008136:	bf00      	nop
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <OBDII_Pause>:

/* Pause the library from requesting data. This is important for when    *
 * another device is present. This allows the system to save the current *
 * PID stream but stop communication.                                    */
void OBDII_Pause( POBDII_PACKET_MANAGER dev )
{
 800813e:	b480      	push	{r7}
 8008140:	b083      	sub	sp, #12
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
    /* Set the pause flag */
    dev->status_flags |= OBDII_COMM_PAUSE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800814c:	f043 0308 	orr.w	r3, r3, #8
 8008150:	b29a      	uxth	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

    /* Clear the pending message flag since communication has paused and *
     * the packet will be lost.                                          */
    dev->status_flags &= ~OBDII_PENDING_RESPONSE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800815e:	f023 0302 	bic.w	r3, r3, #2
 8008162:	b29a      	uxth	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800816a:	bf00      	nop
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
	...

08008178 <OBDII_Initialize>:

void OBDII_Initialize( POBDII_PACKET_MANAGER dev )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
    dev->status_flags = 0;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    clear_obdii_packets(dev);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 feed 	bl	8008f68 <clear_obdii_packets>
    clear_diagnostics(dev);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 ff69 	bl	8009066 <clear_diagnostics>
    clear_pid_entries(dev);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 ff80 	bl	800909a <clear_pid_entries>
    dev->obdii_time = obdii_tick;
 800819a:	4b04      	ldr	r3, [pc, #16]	; (80081ac <OBDII_Initialize+0x34>)
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	649a      	str	r2, [r3, #72]	; 0x48
}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000768 	.word	0x20000768

080081b0 <OBDII_add_PID_request>:

OBDII_STATUS OBDII_add_PID_request( POBDII_PACKET_MANAGER dev, PTR_PID_DATA pid )
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
    /* Clear the packet generated flag to start packet regeneration */
    dev->status_flags &= ~OBDII_PACKET_GENERATED;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80081c0:	f023 0301 	bic.w	r3, r3, #1
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

    /* Verify another PID can be added */
    if( dev->num_pids + 1 > OBDII_MAX_PIDS )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80081d2:	3301      	adds	r3, #1
 80081d4:	2b19      	cmp	r3, #25
 80081d6:	dd01      	ble.n	80081dc <OBDII_add_PID_request+0x2c>
        return OBDII_MAX_PIDS_REACHED;
 80081d8:	2305      	movs	r3, #5
 80081da:	e011      	b.n	8008200 <OBDII_add_PID_request+0x50>

    /* Add the PID request */
    dev->stream[dev->num_pids] = pid;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	3318      	adds	r3, #24
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	605a      	str	r2, [r3, #4]

    dev->num_pids++;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80081f4:	3301      	adds	r3, #1
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    /* Return a success */
    return OBDII_OK;
 80081fe:	2301      	movs	r3, #1
}
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <OBDII_Service>:

OBDII_PACKET_MANAGER_STATUS OBDII_Service( POBDII_PACKET_MANAGER dev )
{
 800820c:	b590      	push	{r4, r7, lr}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
    /*************************************************************************
     * Nothing shall happen until PID[s] are requested.
     ************************************************************************/
    if( (dev->num_pids == 0) || (dev->status_flags & OBDII_COMM_PAUSE) )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800821a:	2b00      	cmp	r3, #0
 800821c:	d006      	beq.n	800822c <OBDII_Service+0x20>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8008224:	f003 0308 	and.w	r3, r3, #8
 8008228:	2b00      	cmp	r3, #0
 800822a:	d001      	beq.n	8008230 <OBDII_Service+0x24>
        return OBDII_PM_IDLE;
 800822c:	2305      	movs	r3, #5
 800822e:	e0e3      	b.n	80083f8 <OBDII_Service+0x1ec>

    /*************************************************************************
     * If the PID request is up to date, then continue normal operation.
     ************************************************************************/
    if( dev->status_flags & OBDII_PACKET_GENERATED )
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 80ca 	beq.w	80083d4 <OBDII_Service+0x1c8>
    {
        /*************************************************************************
         * If a message has been sent and the library is waiting for a response
         * then continually check the message does not timeout .
         **************************************************************************/
        if( dev->status_flags & OBDII_PENDING_RESPONSE )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d01f      	beq.n	800828e <OBDII_Service+0x82>
        {
            /* Verify the message hasn't timed out */
           if( obdii_tick >= (dev->obdii_time + dev->init.timeout) )
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008256:	441a      	add	r2, r3
 8008258:	4b69      	ldr	r3, [pc, #420]	; (8008400 <OBDII_Service+0x1f4>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	429a      	cmp	r2, r3
 800825e:	d814      	bhi.n	800828a <OBDII_Service+0x7e>
           {
               /* If so, clear the pending message flag in order to re-send the data */
               dev->status_flags &= ~OBDII_PENDING_RESPONSE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8008266:	f023 0302 	bic.w	r3, r3, #2
 800826a:	b29a      	uxth	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

               /* Abort the tx message and increment the transmission abort counter */
               dev->diagnostic.tx_abort_count++;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008278:	1c5a      	adds	r2, r3, #1
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

               /* Refresh the timer, and attempt to re-transmit */
               refresh_timeout(dev);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fe53 	bl	8008f2c <refresh_timeout>

               /* Indicate that a timeout occurred */
               return OBDII_PM_TIMEOUT;
 8008286:	2302      	movs	r3, #2
 8008288:	e0b6      	b.n	80083f8 <OBDII_Service+0x1ec>
           }

           /* Timeout has not occurred, this is normal operation */
           return OBDII_PM_NORMAL;
 800828a:	2301      	movs	r3, #1
 800828c:	e0b4      	b.n	80083f8 <OBDII_Service+0x1ec>
        }

        else
        {
            /* The last message was received, send the next packet */
            if( dev->init.transmit( dev->msg[dev->current_msg].frame[dev->msg[dev->current_msg].current_frame].buf , OBDII_DLC ) == 0 )
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	785b      	ldrb	r3, [r3, #1]
 8008296:	4618      	mov	r0, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	785b      	ldrb	r3, [r3, #1]
 800829c:	461a      	mov	r2, r3
 800829e:	6879      	ldr	r1, [r7, #4]
 80082a0:	4613      	mov	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	00da      	lsls	r2, r3, #3
 80082a8:	1ad2      	subs	r2, r2, r3
 80082aa:	188b      	adds	r3, r1, r2
 80082ac:	3324      	adds	r3, #36	; 0x24
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	00d9      	lsls	r1, r3, #3
 80082b2:	4603      	mov	r3, r0
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4403      	add	r3, r0
 80082b8:	00da      	lsls	r2, r3, #3
 80082ba:	1ad2      	subs	r2, r2, r3
 80082bc:	188b      	adds	r3, r1, r2
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	4413      	add	r3, r2
 80082c2:	3303      	adds	r3, #3
 80082c4:	2108      	movs	r1, #8
 80082c6:	4618      	mov	r0, r3
 80082c8:	47a0      	blx	r4
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d106      	bne.n	80082de <OBDII_Service+0xd2>
                dev->diagnostic.tx_failure++;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

            /* Indicate successful transmission */
            dev->status_flags |= OBDII_PENDING_RESPONSE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80082e4:	f043 0302 	orr.w	r3, r3, #2
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

            /* Increment the frame */
            dev->msg[dev->current_msg].current_frame = (dev->msg[dev->current_msg].current_frame + 1) % dev->msg[dev->current_msg].num_frames;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	785b      	ldrb	r3, [r3, #1]
 80082f4:	461a      	mov	r2, r3
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	4613      	mov	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	00da      	lsls	r2, r3, #3
 8008300:	1ad2      	subs	r2, r2, r3
 8008302:	188b      	adds	r3, r1, r2
 8008304:	3324      	adds	r3, #36	; 0x24
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	1c59      	adds	r1, r3, #1
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	785b      	ldrb	r3, [r3, #1]
 800830e:	461a      	mov	r2, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	4613      	mov	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	00da      	lsls	r2, r3, #3
 800831a:	1ad2      	subs	r2, r2, r3
 800831c:	1883      	adds	r3, r0, r2
 800831e:	3323      	adds	r3, #35	; 0x23
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	fb91 f2f3 	sdiv	r2, r1, r3
 8008326:	fb03 f302 	mul.w	r3, r3, r2
 800832a:	1ac9      	subs	r1, r1, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	785b      	ldrb	r3, [r3, #1]
 8008330:	461a      	mov	r2, r3
 8008332:	b2c8      	uxtb	r0, r1
 8008334:	6879      	ldr	r1, [r7, #4]
 8008336:	4613      	mov	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	00da      	lsls	r2, r3, #3
 800833e:	1ad2      	subs	r2, r2, r3
 8008340:	188b      	adds	r3, r1, r2
 8008342:	3324      	adds	r3, #36	; 0x24
 8008344:	4602      	mov	r2, r0
 8008346:	701a      	strb	r2, [r3, #0]

            /* Refresh the timeout */
            refresh_timeout(dev);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fdef 	bl	8008f2c <refresh_timeout>

            if( dev->status_flags & OBDII_RESPONSE_RECEIVED )
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	2b00      	cmp	r3, #0
 800835a:	d039      	beq.n	80083d0 <OBDII_Service+0x1c4>
            {
                dev->status_flags &= ~OBDII_RESPONSE_RECEIVED;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8008362:	f023 0304 	bic.w	r3, r3, #4
 8008366:	b29a      	uxth	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

                OBDII_PROCESS_STATUS status = OBDII_Process_Packet(dev);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f922 	bl	80085b8 <OBDII_Process_Packet>
 8008374:	4603      	mov	r3, r0
 8008376:	73fb      	strb	r3, [r7, #15]

                /* If we are on frame 0, we know that a full message has been sent. On to the next message */
                if( dev->msg[dev->current_msg].current_frame == 0 )
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	785b      	ldrb	r3, [r3, #1]
 800837c:	461a      	mov	r2, r3
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	4613      	mov	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	00da      	lsls	r2, r3, #3
 8008388:	1ad2      	subs	r2, r2, r3
 800838a:	188b      	adds	r3, r1, r2
 800838c:	3324      	adds	r3, #36	; 0x24
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10c      	bne.n	80083ae <OBDII_Service+0x1a2>
                    dev->current_msg = ( dev->current_msg + 1 ) % dev->num_msgs;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	785b      	ldrb	r3, [r3, #1]
 8008398:	3301      	adds	r3, #1
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	7812      	ldrb	r2, [r2, #0]
 800839e:	fb93 f1f2 	sdiv	r1, r3, r2
 80083a2:	fb02 f201 	mul.w	r2, r2, r1
 80083a6:	1a9b      	subs	r3, r3, r2
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	705a      	strb	r2, [r3, #1]

                if( status == OBDII_PACKET_PROCESS_SUCCESS )
 80083ae:	7bfb      	ldrb	r3, [r7, #15]
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d101      	bne.n	80083b8 <OBDII_Service+0x1ac>
                {
                    return OBDII_PM_NEW_DATA;
 80083b4:	2304      	movs	r3, #4
 80083b6:	e01f      	b.n	80083f8 <OBDII_Service+0x1ec>
                }
                else if( status == OBDII_CAN_PCKT_MISALIGNED || status == OBDII_PID_NOT_SUPPORTED )
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d002      	beq.n	80083c4 <OBDII_Service+0x1b8>
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d105      	bne.n	80083d0 <OBDII_Service+0x1c4>
                {
                    dev->diagnostic.error = (uint8_t)status;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	7bfa      	ldrb	r2, [r7, #15]
 80083c8:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
                    return OBDII_PM_ERROR;
 80083cc:	2306      	movs	r3, #6
 80083ce:	e013      	b.n	80083f8 <OBDII_Service+0x1ec>
                }
            }

            return OBDII_PM_NORMAL;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e011      	b.n	80083f8 <OBDII_Service+0x1ec>
     * There is a new PID request or a change to the current request.
     * Re-generate the PID request.
     ************************************************************************/
    else {
        /* Generate the new PID request */
        if( obdii_generate_PID_Request(dev) == OBDII_OK )
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 faaf 	bl	8008938 <obdii_generate_PID_Request>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d10a      	bne.n	80083f6 <OBDII_Service+0x1ea>
        {
            /* Indicate the OBDII packet is up to date */
            dev->status_flags |= OBDII_PACKET_GENERATED;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80083e6:	f043 0301 	orr.w	r3, r3, #1
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

            /* Nothing has changed in the perspective of the application layer */
            return OBDII_PM_NORMAL;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e000      	b.n	80083f8 <OBDII_Service+0x1ec>
        }
        else
            return OBDII_PACKET_GEN_ERROR;
 80083f6:	2306      	movs	r3, #6
    }

    /* HOW DID I GET HERE!? */
    return OBDII_PM_CRITICAL_ERROR;
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd90      	pop	{r4, r7, pc}
 8008400:	20000768 	.word	0x20000768

08008404 <OBDII_Add_Packet>:

OBDII_STATUS OBDII_Add_Packet( POBDII_PACKET_MANAGER dev, uint16_t arbitration_id, uint8_t* packet_data )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	460b      	mov	r3, r1
 800840e:	607a      	str	r2, [r7, #4]
 8008410:	817b      	strh	r3, [r7, #10]
    /* Verify the CAN packet is intended for the Digital Dash */
    if( arbitration_id >= 0x7E0 ) //TODO
 8008412:	897b      	ldrh	r3, [r7, #10]
 8008414:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8008418:	f0c0 80c7 	bcc.w	80085aa <OBDII_Add_Packet+0x1a6>
    {
        /* Number of bytes in the CAN packet that is not data */
        uint8_t num_supporting_bytes = OBDII_DLC;
 800841c:	2308      	movs	r3, #8
 800841e:	75fb      	strb	r3, [r7, #23]

        /* Check if packet is single frame */
        if( ( packet_data[0] & ISO_15765_2_FRAME_TYPE_MASK ) == ISO_15765_2_SINGLE_FRAME )
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d127      	bne.n	800847c <OBDII_Add_Packet+0x78>
        {
            /* New message, reset buffer */
            flush_obdii_rx_buf(dev);
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 fde7 	bl	8009000 <flush_obdii_rx_buf>

            /* Begin counting how many more bytes are expected */
            dev->rx_remaining_bytes = ( packet_data[0] & ISO_15765_2_BYTE0_SIZE_MASK );
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	b21b      	sxth	r3, r3
 8008438:	f003 030f 	and.w	r3, r3, #15
 800843c:	b21a      	sxth	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

            /* First byte has been received */
            dev->rx_remaining_bytes--;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f9b3 30e8 	ldrsh.w	r3, [r3, #232]	; 0xe8
 800844a:	b29b      	uxth	r3, r3
 800844c:	3b01      	subs	r3, #1
 800844e:	b29b      	uxth	r3, r3
 8008450:	b21a      	sxth	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

            /* Number of bytes in the CAN packet that is not data */
            num_supporting_bytes = CAN_SINGLE_FRAME_SUPPORTING_BYTES;
 8008458:	2302      	movs	r3, #2
 800845a:	75fb      	strb	r3, [r7, #23]

            /* Save the mode byte */
            dev->rx_buf[ dev->rx_byte_count++ ] = packet_data[CAN_SINGLE_FRAME_MODE_POS];
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	b2d1      	uxtb	r1, r2
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	f882 10ea 	strb.w	r1, [r2, #234]	; 0xea
 800846c:	4619      	mov	r1, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	785a      	ldrb	r2, [r3, #1]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	440b      	add	r3, r1
 8008476:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800847a:	e048      	b.n	800850e <OBDII_Add_Packet+0x10a>
        }

        /* Check if packet is first frame */
        else if ( ( packet_data[0] & ISO_15765_2_FRAME_TYPE_MASK ) == ISO_15765_2_FIRST_FRAME_FRAME )
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008484:	2b10      	cmp	r3, #16
 8008486:	d12e      	bne.n	80084e6 <OBDII_Add_Packet+0xe2>
        {
            /* New message, reset buffer */
            flush_obdii_rx_buf(dev);
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 fdb9 	bl	8009000 <flush_obdii_rx_buf>

            /* Begin counting how many more bytes are expected */
            dev->rx_remaining_bytes = ( ( packet_data[0] & ISO_15765_2_BYTE0_SIZE_MASK) << 8 ) | ( packet_data[1] & ISO_15765_2_BYTE1_SIZE_MASK );
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	021b      	lsls	r3, r3, #8
 8008494:	b21b      	sxth	r3, r3
 8008496:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800849a:	b21a      	sxth	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3301      	adds	r3, #1
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	b21b      	sxth	r3, r3
 80084a4:	4313      	orrs	r3, r2
 80084a6:	b21a      	sxth	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

            /* First byte has been received */
            dev->rx_remaining_bytes--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f9b3 30e8 	ldrsh.w	r3, [r3, #232]	; 0xe8
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	3b01      	subs	r3, #1
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	b21a      	sxth	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

            /* Number of bytes in the CAN packet that is not data */
            num_supporting_bytes = CAN_FIRST_FRAME_SUPPORTING_BYTES;
 80084c2:	2303      	movs	r3, #3
 80084c4:	75fb      	strb	r3, [r7, #23]

            /* Save the mode byte */
            dev->rx_buf[ dev->rx_byte_count++ ] = packet_data[MULTI_FRAME_MODE_POS];
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80084cc:	1c5a      	adds	r2, r3, #1
 80084ce:	b2d1      	uxtb	r1, r2
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	f882 10ea 	strb.w	r1, [r2, #234]	; 0xea
 80084d6:	4619      	mov	r1, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	789a      	ldrb	r2, [r3, #2]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	440b      	add	r3, r1
 80084e0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 80084e4:	e013      	b.n	800850e <OBDII_Add_Packet+0x10a>
        }

        /* Check if packet is consecutive frame */
        else if ( ( packet_data[0] & ISO_15765_2_FRAME_TYPE_MASK ) == ISO_15765_2_CONNSECUTIVE_FRAME )
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084ee:	2b20      	cmp	r3, #32
 80084f0:	d102      	bne.n	80084f8 <OBDII_Add_Packet+0xf4>
        {
            /* Number of bytes in the CAN packet that is not data */
            num_supporting_bytes = CAN_CONNSECUTIVE_FRAME_SUPPORTING_BYTES;
 80084f2:	2301      	movs	r3, #1
 80084f4:	75fb      	strb	r3, [r7, #23]
 80084f6:	e00a      	b.n	800850e <OBDII_Add_Packet+0x10a>
        }

        /* Check if packet is flow control frame */
        else if ( ( packet_data[0] & ISO_15765_2_FRAME_TYPE_MASK ) == ISO_15765_2_FLOW_CONTROL_FRAME )
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008500:	2b30      	cmp	r3, #48	; 0x30
 8008502:	d102      	bne.n	800850a <OBDII_Add_Packet+0x106>
        {
            /* Number of bytes in the CAN packet that is not data */
            num_supporting_bytes = CAN_FLOW_CONTROL_FRAME_SUPPORTING_BYTES;
 8008504:	2301      	movs	r3, #1
 8008506:	75fb      	strb	r3, [r7, #23]
 8008508:	e001      	b.n	800850e <OBDII_Add_Packet+0x10a>
        }

        /* Oh no! What happened!? */
        else {
            return OBDII_UNSUPPORTED_CAN_PACKET;
 800850a:	2302      	movs	r3, #2
 800850c:	e04e      	b.n	80085ac <OBDII_Add_Packet+0x1a8>
        }

        /* Copy data to the RX buffer */
        for( uint8_t i = num_supporting_bytes; i < OBDII_DLC; i++ )
 800850e:	7dfb      	ldrb	r3, [r7, #23]
 8008510:	75bb      	strb	r3, [r7, #22]
 8008512:	e022      	b.n	800855a <OBDII_Add_Packet+0x156>
        {
            /* More bytes expected */
            if( dev->rx_remaining_bytes > 0 )
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f9b3 30e8 	ldrsh.w	r3, [r3, #232]	; 0xe8
 800851a:	2b00      	cmp	r3, #0
 800851c:	dd1a      	ble.n	8008554 <OBDII_Add_Packet+0x150>
            {
                /* Copy bytes to RX buffer */
                dev->rx_buf[ dev->rx_byte_count++ ] = packet_data[i];
 800851e:	7dbb      	ldrb	r3, [r7, #22]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	441a      	add	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 800852a:	1c59      	adds	r1, r3, #1
 800852c:	b2c8      	uxtb	r0, r1
 800852e:	68f9      	ldr	r1, [r7, #12]
 8008530:	f881 00ea 	strb.w	r0, [r1, #234]	; 0xea
 8008534:	4619      	mov	r1, r3
 8008536:	7812      	ldrb	r2, [r2, #0]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	440b      	add	r3, r1
 800853c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

                /* Decrement the remaining bytes */
                dev->rx_remaining_bytes--;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f9b3 30e8 	ldrsh.w	r3, [r3, #232]	; 0xe8
 8008546:	b29b      	uxth	r3, r3
 8008548:	3b01      	subs	r3, #1
 800854a:	b29b      	uxth	r3, r3
 800854c:	b21a      	sxth	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
        for( uint8_t i = num_supporting_bytes; i < OBDII_DLC; i++ )
 8008554:	7dbb      	ldrb	r3, [r7, #22]
 8008556:	3301      	adds	r3, #1
 8008558:	75bb      	strb	r3, [r7, #22]
 800855a:	7dbb      	ldrb	r3, [r7, #22]
 800855c:	2b07      	cmp	r3, #7
 800855e:	d9d9      	bls.n	8008514 <OBDII_Add_Packet+0x110>
            }
        }

        /* Determine if a flow control message is necessary */
        if( dev->rx_remaining_bytes > 0 )
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f9b3 30e8 	ldrsh.w	r3, [r3, #232]	; 0xe8
 8008566:	2b00      	cmp	r3, #0
 8008568:	dd08      	ble.n	800857c <OBDII_Add_Packet+0x178>
        {
            /* Generate flow control packet */
            dev->init.transmit( flow_control_frame , OBDII_DLC );
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800856e:	2108      	movs	r1, #8
 8008570:	4810      	ldr	r0, [pc, #64]	; (80085b4 <OBDII_Add_Packet+0x1b0>)
 8008572:	4798      	blx	r3

            refresh_timeout( dev );
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 fcd9 	bl	8008f2c <refresh_timeout>
 800857a:	e016      	b.n	80085aa <OBDII_Add_Packet+0x1a6>
        }

        /* See if all of the bytes have been received */
        else if ( dev->rx_remaining_bytes <= 0 )
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f9b3 30e8 	ldrsh.w	r3, [r3, #232]	; 0xe8
 8008582:	2b00      	cmp	r3, #0
 8008584:	dc11      	bgt.n	80085aa <OBDII_Add_Packet+0x1a6>
        {
            /* Indicate a full CAN Packet has been received */
            dev->status_flags &= ~OBDII_PENDING_RESPONSE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800858c:	f023 0302 	bic.w	r3, r3, #2
 8008590:	b29a      	uxth	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

            /* Indicate that the full CAN packet should be processed */
            dev->status_flags |= OBDII_RESPONSE_RECEIVED;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800859e:	f043 0304 	orr.w	r3, r3, #4
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        }

    }
    return OBDII_OK;
 80085aa:	2301      	movs	r3, #1
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	2000002c 	.word	0x2000002c

080085b8 <OBDII_Process_Packet>:

static OBDII_PROCESS_STATUS OBDII_Process_Packet( POBDII_PACKET_MANAGER dev )
{
 80085b8:	b590      	push	{r4, r7, lr}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
    uint8_t curByte = 0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	75fb      	strb	r3, [r7, #23]

    refresh_timeout( dev );
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fcb1 	bl	8008f2c <refresh_timeout>

    uint8_t mode = dev->rx_buf[curByte++] - 0x40;
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	75fa      	strb	r2, [r7, #23]
 80085d0:	461a      	mov	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4413      	add	r3, r2
 80085d6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80085da:	3b40      	subs	r3, #64	; 0x40
 80085dc:	74bb      	strb	r3, [r7, #18]

    for( uint8_t pid_num = 0; pid_num < dev->num_pids; pid_num++ )
 80085de:	2300      	movs	r3, #0
 80085e0:	75bb      	strb	r3, [r7, #22]
 80085e2:	e0c4      	b.n	800876e <OBDII_Process_Packet+0x1b6>
    {
        if( dev->stream[pid_num]->mode == mode )
 80085e4:	7dbb      	ldrb	r3, [r7, #22]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	3318      	adds	r3, #24
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4413      	add	r3, r2
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	7cba      	ldrb	r2, [r7, #18]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	f040 80b6 	bne.w	8008768 <OBDII_Process_Packet+0x1b0>
        {
            if( lookup_payload_length( dev->stream[pid_num]->mode, dev->stream[pid_num]->pid ) > 0 )
 80085fc:	7dbb      	ldrb	r3, [r7, #22]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	3318      	adds	r3, #24
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	b2d8      	uxtb	r0, r3
 800860c:	7dbb      	ldrb	r3, [r7, #22]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	3318      	adds	r3, #24
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	885b      	ldrh	r3, [r3, #2]
 800861a:	b29b      	uxth	r3, r3
 800861c:	4619      	mov	r1, r3
 800861e:	f000 f8b7 	bl	8008790 <lookup_payload_length>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 809d 	beq.w	8008764 <OBDII_Process_Packet+0x1ac>
            {
                uint16_t pid = 0;
 800862a:	2300      	movs	r3, #0
 800862c:	82bb      	strh	r3, [r7, #20]
                uint8_t pid_len = 0;
 800862e:	2300      	movs	r3, #0
 8008630:	747b      	strb	r3, [r7, #17]

                pid_len = get_num_bytes( dev->stream[pid_num]->pid );
 8008632:	7dbb      	ldrb	r3, [r7, #22]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	3318      	adds	r3, #24
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	885b      	ldrh	r3, [r3, #2]
 8008640:	b29b      	uxth	r3, r3
 8008642:	4618      	mov	r0, r3
 8008644:	f7ff fd54 	bl	80080f0 <get_num_bytes>
 8008648:	4603      	mov	r3, r0
 800864a:	747b      	strb	r3, [r7, #17]

                if( pid_len == 1 ) {
 800864c:	7c7b      	ldrb	r3, [r7, #17]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d109      	bne.n	8008666 <OBDII_Process_Packet+0xae>
                    pid = dev->rx_buf[curByte++];
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	75fa      	strb	r2, [r7, #23]
 8008658:	461a      	mov	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4413      	add	r3, r2
 800865e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8008662:	82bb      	strh	r3, [r7, #20]
 8008664:	e01a      	b.n	800869c <OBDII_Process_Packet+0xe4>
                }
                else if ( pid_len == 2 ) {
 8008666:	7c7b      	ldrb	r3, [r7, #17]
 8008668:	2b02      	cmp	r3, #2
 800866a:	d117      	bne.n	800869c <OBDII_Process_Packet+0xe4>
                    pid = dev->rx_buf[curByte++];
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	75fa      	strb	r2, [r7, #23]
 8008672:	461a      	mov	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4413      	add	r3, r2
 8008678:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800867c:	82bb      	strh	r3, [r7, #20]
                    pid = ( pid << 8 ) | ( dev->rx_buf[curByte++] & 0xFF );
 800867e:	8abb      	ldrh	r3, [r7, #20]
 8008680:	021b      	lsls	r3, r3, #8
 8008682:	b21a      	sxth	r2, r3
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	1c59      	adds	r1, r3, #1
 8008688:	75f9      	strb	r1, [r7, #23]
 800868a:	4619      	mov	r1, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	440b      	add	r3, r1
 8008690:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8008694:	b21b      	sxth	r3, r3
 8008696:	4313      	orrs	r3, r2
 8008698:	b21b      	sxth	r3, r3
 800869a:	82bb      	strh	r3, [r7, #20]
                }

                if( pid == dev->stream[pid_num]->pid )
 800869c:	7dbb      	ldrb	r3, [r7, #22]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	3318      	adds	r3, #24
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	885b      	ldrh	r3, [r3, #2]
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	8aba      	ldrh	r2, [r7, #20]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d156      	bne.n	8008760 <OBDII_Process_Packet+0x1a8>
                {
                    uint8_t tmpDataBuf[4] = {0, 0, 0, 0};
 80086b2:	2300      	movs	r3, #0
 80086b4:	60fb      	str	r3, [r7, #12]

                    /* Save the PID's payload ( 1 to 4 bytes ) */
                    for ( uint8_t data = 0; data < lookup_payload_length( dev->stream[pid_num]->mode, dev->stream[pid_num]->pid ) ; data++ )
 80086b6:	2300      	movs	r3, #0
 80086b8:	74fb      	strb	r3, [r7, #19]
 80086ba:	e010      	b.n	80086de <OBDII_Process_Packet+0x126>
                    {
                        tmpDataBuf[data] = dev->rx_buf[curByte];
 80086bc:	7dfa      	ldrb	r2, [r7, #23]
 80086be:	7cfb      	ldrb	r3, [r7, #19]
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	440a      	add	r2, r1
 80086c4:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
 80086c8:	f107 0118 	add.w	r1, r7, #24
 80086cc:	440b      	add	r3, r1
 80086ce:	f803 2c0c 	strb.w	r2, [r3, #-12]

                        curByte++;
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	3301      	adds	r3, #1
 80086d6:	75fb      	strb	r3, [r7, #23]
                    for ( uint8_t data = 0; data < lookup_payload_length( dev->stream[pid_num]->mode, dev->stream[pid_num]->pid ) ; data++ )
 80086d8:	7cfb      	ldrb	r3, [r7, #19]
 80086da:	3301      	adds	r3, #1
 80086dc:	74fb      	strb	r3, [r7, #19]
 80086de:	7dbb      	ldrb	r3, [r7, #22]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	3318      	adds	r3, #24
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	b2d8      	uxtb	r0, r3
 80086ee:	7dbb      	ldrb	r3, [r7, #22]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	3318      	adds	r3, #24
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	885b      	ldrh	r3, [r3, #2]
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	4619      	mov	r1, r3
 8008700:	f000 f846 	bl	8008790 <lookup_payload_length>
 8008704:	4603      	mov	r3, r0
 8008706:	461a      	mov	r2, r3
 8008708:	7cfb      	ldrb	r3, [r7, #19]
 800870a:	4293      	cmp	r3, r2
 800870c:	d3d6      	bcc.n	80086bc <OBDII_Process_Packet+0x104>
                    }

                    dev->stream[pid_num]->pid_value = get_pid_value( dev->stream[pid_num]->mode, dev->stream[pid_num]->pid, tmpDataBuf );
 800870e:	7dbb      	ldrb	r3, [r7, #22]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	3318      	adds	r3, #24
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	b2d8      	uxtb	r0, r3
 800871e:	7dbb      	ldrb	r3, [r7, #22]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	3318      	adds	r3, #24
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	885b      	ldrh	r3, [r3, #2]
 800872c:	b299      	uxth	r1, r3
 800872e:	7dbb      	ldrb	r3, [r7, #22]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	3318      	adds	r3, #24
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4413      	add	r3, r2
 8008738:	685c      	ldr	r4, [r3, #4]
 800873a:	f107 030c 	add.w	r3, r7, #12
 800873e:	461a      	mov	r2, r3
 8008740:	f000 fabc 	bl	8008cbc <get_pid_value>
 8008744:	eef0 7a40 	vmov.f32	s15, s0
 8008748:	edc4 7a02 	vstr	s15, [r4, #8]
                    dev->stream[pid_num]->timestamp = obdii_tick;
 800874c:	7dbb      	ldrb	r3, [r7, #22]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	3318      	adds	r3, #24
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	4a0c      	ldr	r2, [pc, #48]	; (800878c <OBDII_Process_Packet+0x1d4>)
 800875a:	6812      	ldr	r2, [r2, #0]
 800875c:	60da      	str	r2, [r3, #12]
 800875e:	e003      	b.n	8008768 <OBDII_Process_Packet+0x1b0>

                } else {
                    return OBDII_CAN_PCKT_MISALIGNED;
 8008760:	2301      	movs	r3, #1
 8008762:	e00f      	b.n	8008784 <OBDII_Process_Packet+0x1cc>
                }
            } else {
                return OBDII_PID_NOT_SUPPORTED;
 8008764:	2300      	movs	r3, #0
 8008766:	e00d      	b.n	8008784 <OBDII_Process_Packet+0x1cc>
    for( uint8_t pid_num = 0; pid_num < dev->num_pids; pid_num++ )
 8008768:	7dbb      	ldrb	r3, [r7, #22]
 800876a:	3301      	adds	r3, #1
 800876c:	75bb      	strb	r3, [r7, #22]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008774:	7dba      	ldrb	r2, [r7, #22]
 8008776:	429a      	cmp	r2, r3
 8008778:	f4ff af34 	bcc.w	80085e4 <OBDII_Process_Packet+0x2c>
            }
        }
    }

    refresh_timeout(dev);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fbd5 	bl	8008f2c <refresh_timeout>

    return OBDII_PACKET_PROCESS_SUCCESS;
 8008782:	2302      	movs	r3, #2
}
 8008784:	4618      	mov	r0, r3
 8008786:	371c      	adds	r7, #28
 8008788:	46bd      	mov	sp, r7
 800878a:	bd90      	pop	{r4, r7, pc}
 800878c:	20000768 	.word	0x20000768

08008790 <lookup_payload_length>:

static uint8_t lookup_payload_length( uint8_t mode, uint16_t PID )
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	4603      	mov	r3, r0
 8008798:	460a      	mov	r2, r1
 800879a:	71fb      	strb	r3, [r7, #7]
 800879c:	4613      	mov	r3, r2
 800879e:	80bb      	strh	r3, [r7, #4]
    switch ( mode )
 80087a0:	79fb      	ldrb	r3, [r7, #7]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d003      	beq.n	80087ae <lookup_payload_length+0x1e>
 80087a6:	2b22      	cmp	r3, #34	; 0x22
 80087a8:	f000 80a8 	beq.w	80088fc <lookup_payload_length+0x16c>
 80087ac:	e0bc      	b.n	8008928 <lookup_payload_length+0x198>
    {
        case MODE1:
            switch ( PID )
 80087ae:	88bb      	ldrh	r3, [r7, #4]
 80087b0:	3b04      	subs	r3, #4
 80087b2:	2b42      	cmp	r3, #66	; 0x42
 80087b4:	f200 80a0 	bhi.w	80088f8 <lookup_payload_length+0x168>
 80087b8:	a201      	add	r2, pc, #4	; (adr r2, 80087c0 <lookup_payload_length+0x30>)
 80087ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087be:	bf00      	nop
 80087c0:	080088cd 	.word	0x080088cd
 80087c4:	080088d1 	.word	0x080088d1
 80087c8:	080088f9 	.word	0x080088f9
 80087cc:	080088f9 	.word	0x080088f9
 80087d0:	080088f9 	.word	0x080088f9
 80087d4:	080088f9 	.word	0x080088f9
 80087d8:	080088f9 	.word	0x080088f9
 80087dc:	080088d9 	.word	0x080088d9
 80087e0:	080088d5 	.word	0x080088d5
 80087e4:	080088dd 	.word	0x080088dd
 80087e8:	080088f9 	.word	0x080088f9
 80087ec:	080088e1 	.word	0x080088e1
 80087f0:	080088e5 	.word	0x080088e5
 80087f4:	080088e9 	.word	0x080088e9
 80087f8:	080088f9 	.word	0x080088f9
 80087fc:	080088f9 	.word	0x080088f9
 8008800:	080088f9 	.word	0x080088f9
 8008804:	080088f9 	.word	0x080088f9
 8008808:	080088f9 	.word	0x080088f9
 800880c:	080088f9 	.word	0x080088f9
 8008810:	080088f9 	.word	0x080088f9
 8008814:	080088f9 	.word	0x080088f9
 8008818:	080088f9 	.word	0x080088f9
 800881c:	080088f9 	.word	0x080088f9
 8008820:	080088f9 	.word	0x080088f9
 8008824:	080088f9 	.word	0x080088f9
 8008828:	080088f9 	.word	0x080088f9
 800882c:	080088f9 	.word	0x080088f9
 8008830:	080088f9 	.word	0x080088f9
 8008834:	080088f9 	.word	0x080088f9
 8008838:	080088f9 	.word	0x080088f9
 800883c:	080088f9 	.word	0x080088f9
 8008840:	080088f9 	.word	0x080088f9
 8008844:	080088f9 	.word	0x080088f9
 8008848:	080088f9 	.word	0x080088f9
 800884c:	080088f9 	.word	0x080088f9
 8008850:	080088f9 	.word	0x080088f9
 8008854:	080088f9 	.word	0x080088f9
 8008858:	080088f9 	.word	0x080088f9
 800885c:	080088f9 	.word	0x080088f9
 8008860:	080088f9 	.word	0x080088f9
 8008864:	080088f9 	.word	0x080088f9
 8008868:	080088f9 	.word	0x080088f9
 800886c:	080088f9 	.word	0x080088f9
 8008870:	080088f9 	.word	0x080088f9
 8008874:	080088f9 	.word	0x080088f9
 8008878:	080088f9 	.word	0x080088f9
 800887c:	080088ed 	.word	0x080088ed
 8008880:	080088f9 	.word	0x080088f9
 8008884:	080088f9 	.word	0x080088f9
 8008888:	080088f9 	.word	0x080088f9
 800888c:	080088f9 	.word	0x080088f9
 8008890:	080088f9 	.word	0x080088f9
 8008894:	080088f9 	.word	0x080088f9
 8008898:	080088f9 	.word	0x080088f9
 800889c:	080088f9 	.word	0x080088f9
 80088a0:	080088f9 	.word	0x080088f9
 80088a4:	080088f9 	.word	0x080088f9
 80088a8:	080088f9 	.word	0x080088f9
 80088ac:	080088f9 	.word	0x080088f9
 80088b0:	080088f9 	.word	0x080088f9
 80088b4:	080088f9 	.word	0x080088f9
 80088b8:	080088f9 	.word	0x080088f9
 80088bc:	080088f1 	.word	0x080088f1
 80088c0:	080088f9 	.word	0x080088f9
 80088c4:	080088f9 	.word	0x080088f9
 80088c8:	080088f5 	.word	0x080088f5
            {
                #ifdef MODE1_CALCULATED_ENGINE_LOAD_VALUE_SUPPORTED
                case MODE1_CALCULATED_ENGINE_LOAD_VALUE:
                    return MODE1_CALCULATED_ENGINE_LOAD_VALUE_LEN;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e02c      	b.n	800892a <lookup_payload_length+0x19a>
                #endif

                #ifdef MODE1_ENGINE_COOLANT_TEMPERATURE_SUPPORTED
                case MODE1_ENGINE_COOLANT_TEMPERATURE:
                    return MODE1_ENGINE_COOLANT_TEMPERATURE_LEN;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e02a      	b.n	800892a <lookup_payload_length+0x19a>
                #endif

                #ifdef MODE1_ENGINE_RPM_SUPPORTED
                case MODE1_ENGINE_RPM:
                    return MODE1_ENGINE_RPM_LEN;
 80088d4:	2302      	movs	r3, #2
 80088d6:	e028      	b.n	800892a <lookup_payload_length+0x19a>
                #endif

                #ifdef MODE1_INTAKE_MANIFOLD_ABSOLUTE_PRESSURE_SUPPORTED
                case MODE1_INTAKE_MANIFOLD_ABSOLUTE_PRESSURE:
                    return MODE1_INTAKE_MANIFOLD_ABSOLUTE_PRESSURE_LEN;
 80088d8:	2301      	movs	r3, #1
 80088da:	e026      	b.n	800892a <lookup_payload_length+0x19a>
                #endif

                #ifdef MODE1_VEHICLE_SPEED_SUPPORTED
                case MODE1_VEHICLE_SPEED:
                    return MODE1_VEHICLE_SPEED_LEN;
 80088dc:	2301      	movs	r3, #1
 80088de:	e024      	b.n	800892a <lookup_payload_length+0x19a>
                #endif

                #ifdef MODE1_INTAKE_AIR_TEMPERATURE_SUPPORTED
                case MODE1_INTAKE_AIR_TEMPERATURE:
                    return MODE1_INTAKE_AIR_TEMPERATURE_LEN;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e022      	b.n	800892a <lookup_payload_length+0x19a>
                #endif

                #ifdef MODE1_MAF_AIR_FLOW_RATE_SUPPORTED
                case MODE1_MAF_AIR_FLOW_RATE:
                    return MODE1_MAF_AIR_FLOW_RATE_LEN;
 80088e4:	2302      	movs	r3, #2
 80088e6:	e020      	b.n	800892a <lookup_payload_length+0x19a>
                #endif

                #ifdef MODE1_THROTTLE_POSITION_SUPPORTED
                case MODE1_THROTTLE_POSITION:
                    return MODE1_THROTTLE_POSITION_LEN;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e01e      	b.n	800892a <lookup_payload_length+0x19a>
                #endif

                #ifdef MODE1_BAROMETRIC_PRESSURE_SUPPORTED
                case MODE1_BAROMETRIC_PRESSURE:
                    return MODE1_BAROMETRIC_PRESSURE_LEN;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e01c      	b.n	800892a <lookup_payload_length+0x19a>
                #endif

                #ifdef MODE1_ABSOLUTE_LOAD_VALUE_SUPPORTED
                case MODE1_ABSOLUTE_LOAD_VALUE:
                    return MODE1_ABSOLUTE_LOAD_VALUE_LEN;
 80088f0:	2302      	movs	r3, #2
 80088f2:	e01a      	b.n	800892a <lookup_payload_length+0x19a>
                #endif

                #ifdef MODE1_AMBIENT_AIR_TEMPERATURE_SUPPORTED
                case MODE1_AMBIENT_AIR_TEMPERATURE:
                    return MODE1_AMBIENT_AIR_TEMPERATURE_LEN;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e018      	b.n	800892a <lookup_payload_length+0x19a>
                #endif

                default:
                    return 0x00;
 80088f8:	2300      	movs	r3, #0
 80088fa:	e016      	b.n	800892a <lookup_payload_length+0x19a>
            }
            break;

        case MODE22:
            switch ( PID )
 80088fc:	88bb      	ldrh	r3, [r7, #4]
 80088fe:	f240 527d 	movw	r2, #1405	; 0x57d
 8008902:	4293      	cmp	r3, r2
 8008904:	d00c      	beq.n	8008920 <lookup_payload_length+0x190>
 8008906:	f24f 420f 	movw	r2, #62479	; 0xf40f
 800890a:	4293      	cmp	r3, r2
 800890c:	d004      	beq.n	8008918 <lookup_payload_length+0x188>
 800890e:	f240 4261 	movw	r2, #1121	; 0x461
 8008912:	4293      	cmp	r3, r2
 8008914:	d002      	beq.n	800891c <lookup_payload_length+0x18c>
 8008916:	e005      	b.n	8008924 <lookup_payload_length+0x194>
            {
                #ifdef MODE22_INTAKE_AIR_TEMPERATURE_SUPPORTED
                case MODE22_INTAKE_AIR_TEMPERATURE:
                    return MODE22_INTAKE_AIR_TEMPERATURE_LEN;
 8008918:	2301      	movs	r3, #1
 800891a:	e006      	b.n	800892a <lookup_payload_length+0x19a>
                #endif

                #ifdef MODE22_CHARGE_AIR_TEMPERATURE_SUPPORTED
                case MODE22_CHARGE_AIR_TEMPERATURE:
                    return MODE22_CHARGE_AIR_TEMPERATURE_LEN;
 800891c:	2302      	movs	r3, #2
 800891e:	e004      	b.n	800892a <lookup_payload_length+0x19a>
                #endif

                #ifdef MODE22_AMBIENT_AIR_TEMPERATURE_SUPPORTED
                case MODE22_AMBIENT_AIR_TEMPERATURE:
                    return MODE22_AMBIENT_AIR_TEMPERATURE_LEN;
 8008920:	2301      	movs	r3, #1
 8008922:	e002      	b.n	800892a <lookup_payload_length+0x19a>
                #endif

                default:
                    return 0;
 8008924:	2300      	movs	r3, #0
 8008926:	e000      	b.n	800892a <lookup_payload_length+0x19a>
            }
            break;

        default:
            return 0;
 8008928:	2300      	movs	r3, #0
        }
}
 800892a:	4618      	mov	r0, r3
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop

08008938 <obdii_generate_PID_Request>:

static OBDII_STATUS obdii_generate_PID_Request( POBDII_PACKET_MANAGER dev )
{
 8008938:	b5b0      	push	{r4, r5, r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
    /*************************************************************************
     * Verify there are PID request.
     ************************************************************************/
    if( dev->num_pids <= 0 )
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <obdii_generate_PID_Request+0x16>
    {
        return OBDII_PID_REQ_EMPTY;
 800894a:	2303      	movs	r3, #3
 800894c:	e1b2      	b.n	8008cb4 <obdii_generate_PID_Request+0x37c>

    /*************************************************************************
     * Parse through each packet and initialize it to the determined header,
     * CAN bus mode and fill the packet buffer with 0x55.
     *************************************************************************/
    clear_obdii_packets(dev);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fb0a 	bl	8008f68 <clear_obdii_packets>

    for( uint8_t i = 0; i < dev->num_pids; i++ )
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]
 8008958:	e03d      	b.n	80089d6 <obdii_generate_PID_Request+0x9e>
    {
        for( uint8_t j = 0; j < OBDII_MAX_MSGS; j++ )
 800895a:	2300      	movs	r3, #0
 800895c:	73bb      	strb	r3, [r7, #14]
 800895e:	e032      	b.n	80089c6 <obdii_generate_PID_Request+0x8e>
        {
            /* If a match is found there is no need to increment */
            if( dev->stream[i]->mode == dev->msg[j].mode )
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	3318      	adds	r3, #24
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	b2d9      	uxtb	r1, r3
 8008970:	7bba      	ldrb	r2, [r7, #14]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	4613      	mov	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	00da      	lsls	r2, r3, #3
 800897c:	1ad2      	subs	r2, r2, r3
 800897e:	1883      	adds	r3, r0, r2
 8008980:	3302      	adds	r3, #2
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	4299      	cmp	r1, r3
 8008986:	d022      	beq.n	80089ce <obdii_generate_PID_Request+0x96>
                break;

            /* No match found, add the mode to the next message struct */
            if( j == OBDII_MAX_MSGS - 1 )
 8008988:	7bbb      	ldrb	r3, [r7, #14]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d118      	bne.n	80089c0 <obdii_generate_PID_Request+0x88>
                dev->msg[dev->num_msgs++].mode = dev->stream[i]->mode;
 800898e:	7bfb      	ldrb	r3, [r7, #15]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	3318      	adds	r3, #24
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	1c59      	adds	r1, r3, #1
 80089a0:	b2c8      	uxtb	r0, r1
 80089a2:	6879      	ldr	r1, [r7, #4]
 80089a4:	7008      	strb	r0, [r1, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	7813      	ldrb	r3, [r2, #0]
 80089aa:	b2dc      	uxtb	r4, r3
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	4603      	mov	r3, r0
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4403      	add	r3, r0
 80089b4:	00da      	lsls	r2, r3, #3
 80089b6:	1ad2      	subs	r2, r2, r3
 80089b8:	188b      	adds	r3, r1, r2
 80089ba:	3302      	adds	r3, #2
 80089bc:	4622      	mov	r2, r4
 80089be:	701a      	strb	r2, [r3, #0]
        for( uint8_t j = 0; j < OBDII_MAX_MSGS; j++ )
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
 80089c2:	3301      	adds	r3, #1
 80089c4:	73bb      	strb	r3, [r7, #14]
 80089c6:	7bbb      	ldrb	r3, [r7, #14]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d9c9      	bls.n	8008960 <obdii_generate_PID_Request+0x28>
 80089cc:	e000      	b.n	80089d0 <obdii_generate_PID_Request+0x98>
                break;
 80089ce:	bf00      	nop
    for( uint8_t i = 0; i < dev->num_pids; i++ )
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	3301      	adds	r3, #1
 80089d4:	73fb      	strb	r3, [r7, #15]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80089dc:	7bfa      	ldrb	r2, [r7, #15]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d3bb      	bcc.n	800895a <obdii_generate_PID_Request+0x22>
        }
    }

    for(uint8_t msg = 0; msg < dev->num_msgs; msg++ )
 80089e2:	2300      	movs	r3, #0
 80089e4:	737b      	strb	r3, [r7, #13]
 80089e6:	e15e      	b.n	8008ca6 <obdii_generate_PID_Request+0x36e>
    {
        uint8_t num_bytes = 1; //+1 for service
 80089e8:	2301      	movs	r3, #1
 80089ea:	733b      	strb	r3, [r7, #12]
        uint8_t pid_count = 0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	72fb      	strb	r3, [r7, #11]
        uint8_t cur_byte  = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	727b      	strb	r3, [r7, #9]
        uint8_t frame     = 0;
 80089f4:	2300      	movs	r3, #0
 80089f6:	723b      	strb	r3, [r7, #8]

        /*************************************************************************
         * Parse through the PID array and determine the length of each PID.
         * Populate the PID length in each typedef.
         *************************************************************************/
        for( uint8_t i = 0; i < dev->num_pids; i++ )
 80089f8:	2300      	movs	r3, #0
 80089fa:	72bb      	strb	r3, [r7, #10]
 80089fc:	e02a      	b.n	8008a54 <obdii_generate_PID_Request+0x11c>
        {
            if( dev->msg[msg].mode == dev->stream[i]->mode )
 80089fe:	7b7a      	ldrb	r2, [r7, #13]
 8008a00:	6879      	ldr	r1, [r7, #4]
 8008a02:	4613      	mov	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	00da      	lsls	r2, r3, #3
 8008a0a:	1ad2      	subs	r2, r2, r3
 8008a0c:	188b      	adds	r3, r1, r2
 8008a0e:	3302      	adds	r3, #2
 8008a10:	781a      	ldrb	r2, [r3, #0]
 8008a12:	7abb      	ldrb	r3, [r7, #10]
 8008a14:	6879      	ldr	r1, [r7, #4]
 8008a16:	3318      	adds	r3, #24
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	440b      	add	r3, r1
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d113      	bne.n	8008a4e <obdii_generate_PID_Request+0x116>
                num_bytes += (1U + ((dev->stream[i]->pid >> 8) || 0));
 8008a26:	7abb      	ldrb	r3, [r7, #10]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	3318      	adds	r3, #24
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	885b      	ldrh	r3, [r3, #2]
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	0a1b      	lsrs	r3, r3, #8
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <obdii_generate_PID_Request+0x10a>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e000      	b.n	8008a44 <obdii_generate_PID_Request+0x10c>
 8008a42:	2300      	movs	r3, #0
 8008a44:	3301      	adds	r3, #1
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	7b3b      	ldrb	r3, [r7, #12]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	733b      	strb	r3, [r7, #12]
        for( uint8_t i = 0; i < dev->num_pids; i++ )
 8008a4e:	7abb      	ldrb	r3, [r7, #10]
 8008a50:	3301      	adds	r3, #1
 8008a52:	72bb      	strb	r3, [r7, #10]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008a5a:	7aba      	ldrb	r2, [r7, #10]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d3ce      	bcc.n	80089fe <obdii_generate_PID_Request+0xc6>
        /*************************************************************************
         * Determine if this will be a single frame request or multiframe
         * request. This is directly related to the number of bytes in the packet
         * and the size of the buffer.
         *************************************************************************/
        if( num_bytes < (OBDII_DLC - 1U) ) // -1 for length byte
 8008a60:	7b3b      	ldrb	r3, [r7, #12]
 8008a62:	2b06      	cmp	r3, #6
 8008a64:	d82c      	bhi.n	8008ac0 <obdii_generate_PID_Request+0x188>
        {
            /*************** Length ***************/
            dev->msg[msg].frame[0].buf[cur_byte++] = num_bytes;
 8008a66:	7b7a      	ldrb	r2, [r7, #13]
 8008a68:	7a7b      	ldrb	r3, [r7, #9]
 8008a6a:	1c59      	adds	r1, r3, #1
 8008a6c:	b2c9      	uxtb	r1, r1
 8008a6e:	7279      	strb	r1, [r7, #9]
 8008a70:	4618      	mov	r0, r3
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	4613      	mov	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	00da      	lsls	r2, r3, #3
 8008a7c:	1ad2      	subs	r2, r2, r3
 8008a7e:	188b      	adds	r3, r1, r2
 8008a80:	4403      	add	r3, r0
 8008a82:	3303      	adds	r3, #3
 8008a84:	7b3a      	ldrb	r2, [r7, #12]
 8008a86:	701a      	strb	r2, [r3, #0]

            /**************** Mode ****************/
            dev->msg[msg].frame[0].buf[cur_byte++] = dev->msg[msg].mode;
 8008a88:	7b7a      	ldrb	r2, [r7, #13]
 8008a8a:	7b79      	ldrb	r1, [r7, #13]
 8008a8c:	7a7b      	ldrb	r3, [r7, #9]
 8008a8e:	1c58      	adds	r0, r3, #1
 8008a90:	b2c0      	uxtb	r0, r0
 8008a92:	7278      	strb	r0, [r7, #9]
 8008a94:	461d      	mov	r5, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	4413      	add	r3, r2
 8008a9e:	00da      	lsls	r2, r3, #3
 8008aa0:	1ad2      	subs	r2, r2, r3
 8008aa2:	1883      	adds	r3, r0, r2
 8008aa4:	3302      	adds	r3, #2
 8008aa6:	781c      	ldrb	r4, [r3, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	440b      	add	r3, r1
 8008ab0:	00da      	lsls	r2, r3, #3
 8008ab2:	1ad2      	subs	r2, r2, r3
 8008ab4:	1883      	adds	r3, r0, r2
 8008ab6:	442b      	add	r3, r5
 8008ab8:	3303      	adds	r3, #3
 8008aba:	4622      	mov	r2, r4
 8008abc:	701a      	strb	r2, [r3, #0]
 8008abe:	e040      	b.n	8008b42 <obdii_generate_PID_Request+0x20a>
        }
        else  // Multi frame
        {
            /**************** Frame ****************/
            dev->msg[msg].frame[0].buf[cur_byte++] = (frame | 0x10);
 8008ac0:	7a39      	ldrb	r1, [r7, #8]
 8008ac2:	7b7a      	ldrb	r2, [r7, #13]
 8008ac4:	7a7b      	ldrb	r3, [r7, #9]
 8008ac6:	1c58      	adds	r0, r3, #1
 8008ac8:	b2c0      	uxtb	r0, r0
 8008aca:	7278      	strb	r0, [r7, #9]
 8008acc:	461c      	mov	r4, r3
 8008ace:	f041 0310 	orr.w	r3, r1, #16
 8008ad2:	b2d8      	uxtb	r0, r3
 8008ad4:	6879      	ldr	r1, [r7, #4]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	00da      	lsls	r2, r3, #3
 8008ade:	1ad2      	subs	r2, r2, r3
 8008ae0:	188b      	adds	r3, r1, r2
 8008ae2:	4423      	add	r3, r4
 8008ae4:	3303      	adds	r3, #3
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	701a      	strb	r2, [r3, #0]

            /*************** Length ***************/
            dev->msg[msg].frame[0].buf[cur_byte++] = num_bytes;
 8008aea:	7b7a      	ldrb	r2, [r7, #13]
 8008aec:	7a7b      	ldrb	r3, [r7, #9]
 8008aee:	1c59      	adds	r1, r3, #1
 8008af0:	b2c9      	uxtb	r1, r1
 8008af2:	7279      	strb	r1, [r7, #9]
 8008af4:	4618      	mov	r0, r3
 8008af6:	6879      	ldr	r1, [r7, #4]
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	00da      	lsls	r2, r3, #3
 8008b00:	1ad2      	subs	r2, r2, r3
 8008b02:	188b      	adds	r3, r1, r2
 8008b04:	4403      	add	r3, r0
 8008b06:	3303      	adds	r3, #3
 8008b08:	7b3a      	ldrb	r2, [r7, #12]
 8008b0a:	701a      	strb	r2, [r3, #0]

            /**************** Mode ****************/
            dev->msg[msg].frame[0].buf[cur_byte++] = dev->msg[msg].mode;
 8008b0c:	7b7a      	ldrb	r2, [r7, #13]
 8008b0e:	7b79      	ldrb	r1, [r7, #13]
 8008b10:	7a7b      	ldrb	r3, [r7, #9]
 8008b12:	1c58      	adds	r0, r3, #1
 8008b14:	b2c0      	uxtb	r0, r0
 8008b16:	7278      	strb	r0, [r7, #9]
 8008b18:	461d      	mov	r5, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	00da      	lsls	r2, r3, #3
 8008b24:	1ad2      	subs	r2, r2, r3
 8008b26:	1883      	adds	r3, r0, r2
 8008b28:	3302      	adds	r3, #2
 8008b2a:	781c      	ldrb	r4, [r3, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	440b      	add	r3, r1
 8008b34:	00da      	lsls	r2, r3, #3
 8008b36:	1ad2      	subs	r2, r2, r3
 8008b38:	1883      	adds	r3, r0, r2
 8008b3a:	442b      	add	r3, r5
 8008b3c:	3303      	adds	r3, #3
 8008b3e:	4622      	mov	r2, r4
 8008b40:	701a      	strb	r2, [r3, #0]
        }

        /*************************************************************************
         * Iterate through every single PID and fill the buffer.
         *************************************************************************/
        for( pid_count = 0; pid_count < dev->num_pids; pid_count++ )
 8008b42:	2300      	movs	r3, #0
 8008b44:	72fb      	strb	r3, [r7, #11]
 8008b46:	e0a4      	b.n	8008c92 <obdii_generate_PID_Request+0x35a>
        {
            if( dev->msg[msg].mode == dev->stream[pid_count]->mode )
 8008b48:	7b7a      	ldrb	r2, [r7, #13]
 8008b4a:	6879      	ldr	r1, [r7, #4]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	00da      	lsls	r2, r3, #3
 8008b54:	1ad2      	subs	r2, r2, r3
 8008b56:	188b      	adds	r3, r1, r2
 8008b58:	3302      	adds	r3, #2
 8008b5a:	781a      	ldrb	r2, [r3, #0]
 8008b5c:	7afb      	ldrb	r3, [r7, #11]
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	3318      	adds	r3, #24
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	440b      	add	r3, r1
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d17f      	bne.n	8008c70 <obdii_generate_PID_Request+0x338>
            {

                if( (dev->stream[pid_count]->pid >> 8) || 0 )
 8008b70:	7afb      	ldrb	r3, [r7, #11]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	3318      	adds	r3, #24
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	885b      	ldrh	r3, [r3, #2]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	0a1b      	lsrs	r3, r3, #8
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d023      	beq.n	8008bd0 <obdii_generate_PID_Request+0x298>
                {
                    /**************** PID byte 2 ****************/
                    dev->msg[msg].frame[frame].buf[cur_byte] = (dev->stream[pid_count]->pid >> 8) & 0xFF;
 8008b88:	7afb      	ldrb	r3, [r7, #11]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	3318      	adds	r3, #24
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	885b      	ldrh	r3, [r3, #2]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	0a1b      	lsrs	r3, r3, #8
 8008b9a:	b299      	uxth	r1, r3
 8008b9c:	7b7a      	ldrb	r2, [r7, #13]
 8008b9e:	7a3b      	ldrb	r3, [r7, #8]
 8008ba0:	7a78      	ldrb	r0, [r7, #9]
 8008ba2:	4605      	mov	r5, r0
 8008ba4:	b2cc      	uxtb	r4, r1
 8008ba6:	6879      	ldr	r1, [r7, #4]
 8008ba8:	00d8      	lsls	r0, r3, #3
 8008baa:	4613      	mov	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	00da      	lsls	r2, r3, #3
 8008bb2:	1ad2      	subs	r2, r2, r3
 8008bb4:	1883      	adds	r3, r0, r2
 8008bb6:	440b      	add	r3, r1
 8008bb8:	442b      	add	r3, r5
 8008bba:	3303      	adds	r3, #3
 8008bbc:	4622      	mov	r2, r4
 8008bbe:	701a      	strb	r2, [r3, #0]

                    /************* Increment Buffer *************/
                    next_byte( &frame, &cur_byte );
 8008bc0:	f107 0209 	add.w	r2, r7, #9
 8008bc4:	f107 0308 	add.w	r3, r7, #8
 8008bc8:	4611      	mov	r1, r2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 fa2b 	bl	8009026 <next_byte>
                }

                if( dev->stream[pid_count]->pid & 0xFF )
 8008bd0:	7afb      	ldrb	r3, [r7, #11]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	3318      	adds	r3, #24
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	885b      	ldrh	r3, [r3, #2]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d021      	beq.n	8008c2a <obdii_generate_PID_Request+0x2f2>
                {
                    /**************** PID byte 1 ****************/
                    dev->msg[msg].frame[frame].buf[cur_byte] = dev->stream[pid_count]->pid & 0xFF;
 8008be6:	7afb      	ldrb	r3, [r7, #11]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	3318      	adds	r3, #24
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	885b      	ldrh	r3, [r3, #2]
 8008bf4:	b299      	uxth	r1, r3
 8008bf6:	7b7a      	ldrb	r2, [r7, #13]
 8008bf8:	7a3b      	ldrb	r3, [r7, #8]
 8008bfa:	7a78      	ldrb	r0, [r7, #9]
 8008bfc:	4605      	mov	r5, r0
 8008bfe:	b2cc      	uxtb	r4, r1
 8008c00:	6879      	ldr	r1, [r7, #4]
 8008c02:	00d8      	lsls	r0, r3, #3
 8008c04:	4613      	mov	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	00da      	lsls	r2, r3, #3
 8008c0c:	1ad2      	subs	r2, r2, r3
 8008c0e:	1883      	adds	r3, r0, r2
 8008c10:	440b      	add	r3, r1
 8008c12:	442b      	add	r3, r5
 8008c14:	3303      	adds	r3, #3
 8008c16:	4622      	mov	r2, r4
 8008c18:	701a      	strb	r2, [r3, #0]

                    /************* Increment Buffer *************/
                    next_byte( &frame, &cur_byte );
 8008c1a:	f107 0209 	add.w	r2, r7, #9
 8008c1e:	f107 0308 	add.w	r3, r7, #8
 8008c22:	4611      	mov	r1, r2
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 f9fe 	bl	8009026 <next_byte>
                }

                if ( (frame > 0) & (cur_byte == 1) )
 8008c2a:	7a3b      	ldrb	r3, [r7, #8]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	bf14      	ite	ne
 8008c30:	2301      	movne	r3, #1
 8008c32:	2300      	moveq	r3, #0
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	7a7b      	ldrb	r3, [r7, #9]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	bf0c      	ite	eq
 8008c3c:	2301      	moveq	r3, #1
 8008c3e:	2300      	movne	r3, #0
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	4013      	ands	r3, r2
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d012      	beq.n	8008c70 <obdii_generate_PID_Request+0x338>
                {
                    dev->msg[msg].frame[frame].buf[0] = frame | 0x20;
 8008c4a:	7a3b      	ldrb	r3, [r7, #8]
 8008c4c:	7b7a      	ldrb	r2, [r7, #13]
 8008c4e:	7a39      	ldrb	r1, [r7, #8]
 8008c50:	4608      	mov	r0, r1
 8008c52:	f043 0320 	orr.w	r3, r3, #32
 8008c56:	b2dc      	uxtb	r4, r3
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	00c0      	lsls	r0, r0, #3
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	00da      	lsls	r2, r3, #3
 8008c64:	1ad2      	subs	r2, r2, r3
 8008c66:	1883      	adds	r3, r0, r2
 8008c68:	440b      	add	r3, r1
 8008c6a:	3303      	adds	r3, #3
 8008c6c:	4622      	mov	r2, r4
 8008c6e:	701a      	strb	r2, [r3, #0]
                }
            }

            dev->msg[msg].num_frames = frame + 1;
 8008c70:	7a3b      	ldrb	r3, [r7, #8]
 8008c72:	7b7a      	ldrb	r2, [r7, #13]
 8008c74:	3301      	adds	r3, #1
 8008c76:	b2d8      	uxtb	r0, r3
 8008c78:	6879      	ldr	r1, [r7, #4]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	00da      	lsls	r2, r3, #3
 8008c82:	1ad2      	subs	r2, r2, r3
 8008c84:	188b      	adds	r3, r1, r2
 8008c86:	3323      	adds	r3, #35	; 0x23
 8008c88:	4602      	mov	r2, r0
 8008c8a:	701a      	strb	r2, [r3, #0]
        for( pid_count = 0; pid_count < dev->num_pids; pid_count++ )
 8008c8c:	7afb      	ldrb	r3, [r7, #11]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	72fb      	strb	r3, [r7, #11]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008c98:	7afa      	ldrb	r2, [r7, #11]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	f4ff af54 	bcc.w	8008b48 <obdii_generate_PID_Request+0x210>
    for(uint8_t msg = 0; msg < dev->num_msgs; msg++ )
 8008ca0:	7b7b      	ldrb	r3, [r7, #13]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	737b      	strb	r3, [r7, #13]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	7b7a      	ldrb	r2, [r7, #13]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	f4ff ae9b 	bcc.w	80089e8 <obdii_generate_PID_Request+0xb0>
        }
    }

    return OBDII_OK;
 8008cb2:	2301      	movs	r3, #1
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bdb0      	pop	{r4, r5, r7, pc}

08008cbc <get_pid_value>:

static float get_pid_value( uint8_t mode, uint16_t pid, uint8_t data[] )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	603a      	str	r2, [r7, #0]
 8008cc6:	71fb      	strb	r3, [r7, #7]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	80bb      	strh	r3, [r7, #4]
    switch( mode )
 8008ccc:	79fb      	ldrb	r3, [r7, #7]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d003      	beq.n	8008cda <get_pid_value+0x1e>
 8008cd2:	2b22      	cmp	r3, #34	; 0x22
 8008cd4:	f000 80e4 	beq.w	8008ea0 <get_pid_value+0x1e4>
 8008cd8:	e115      	b.n	8008f06 <get_pid_value+0x24a>
    {
        case MODE1:
            switch( pid )
 8008cda:	88bb      	ldrh	r3, [r7, #4]
 8008cdc:	3b04      	subs	r3, #4
 8008cde:	2b42      	cmp	r3, #66	; 0x42
 8008ce0:	f200 80db 	bhi.w	8008e9a <get_pid_value+0x1de>
 8008ce4:	a201      	add	r2, pc, #4	; (adr r2, 8008cec <get_pid_value+0x30>)
 8008ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cea:	bf00      	nop
 8008cec:	08008df9 	.word	0x08008df9
 8008cf0:	08008e17 	.word	0x08008e17
 8008cf4:	08008e9b 	.word	0x08008e9b
 8008cf8:	08008e9b 	.word	0x08008e9b
 8008cfc:	08008e9b 	.word	0x08008e9b
 8008d00:	08008e9b 	.word	0x08008e9b
 8008d04:	08008e9b 	.word	0x08008e9b
 8008d08:	08008e5d 	.word	0x08008e5d
 8008d0c:	08008e2d 	.word	0x08008e2d
 8008d10:	08008e5d 	.word	0x08008e5d
 8008d14:	08008e9b 	.word	0x08008e9b
 8008d18:	08008e17 	.word	0x08008e17
 8008d1c:	08008e6b 	.word	0x08008e6b
 8008d20:	08008e9b 	.word	0x08008e9b
 8008d24:	08008e9b 	.word	0x08008e9b
 8008d28:	08008e9b 	.word	0x08008e9b
 8008d2c:	08008e9b 	.word	0x08008e9b
 8008d30:	08008e9b 	.word	0x08008e9b
 8008d34:	08008e9b 	.word	0x08008e9b
 8008d38:	08008e9b 	.word	0x08008e9b
 8008d3c:	08008e9b 	.word	0x08008e9b
 8008d40:	08008e9b 	.word	0x08008e9b
 8008d44:	08008e9b 	.word	0x08008e9b
 8008d48:	08008e9b 	.word	0x08008e9b
 8008d4c:	08008e9b 	.word	0x08008e9b
 8008d50:	08008e9b 	.word	0x08008e9b
 8008d54:	08008e9b 	.word	0x08008e9b
 8008d58:	08008e9b 	.word	0x08008e9b
 8008d5c:	08008e9b 	.word	0x08008e9b
 8008d60:	08008e9b 	.word	0x08008e9b
 8008d64:	08008e9b 	.word	0x08008e9b
 8008d68:	08008e9b 	.word	0x08008e9b
 8008d6c:	08008e9b 	.word	0x08008e9b
 8008d70:	08008e9b 	.word	0x08008e9b
 8008d74:	08008e9b 	.word	0x08008e9b
 8008d78:	08008e9b 	.word	0x08008e9b
 8008d7c:	08008e9b 	.word	0x08008e9b
 8008d80:	08008e9b 	.word	0x08008e9b
 8008d84:	08008e9b 	.word	0x08008e9b
 8008d88:	08008e9b 	.word	0x08008e9b
 8008d8c:	08008e9b 	.word	0x08008e9b
 8008d90:	08008e9b 	.word	0x08008e9b
 8008d94:	08008e9b 	.word	0x08008e9b
 8008d98:	08008e9b 	.word	0x08008e9b
 8008d9c:	08008e9b 	.word	0x08008e9b
 8008da0:	08008e9b 	.word	0x08008e9b
 8008da4:	08008e9b 	.word	0x08008e9b
 8008da8:	08008e5d 	.word	0x08008e5d
 8008dac:	08008e9b 	.word	0x08008e9b
 8008db0:	08008e9b 	.word	0x08008e9b
 8008db4:	08008e9b 	.word	0x08008e9b
 8008db8:	08008e9b 	.word	0x08008e9b
 8008dbc:	08008e9b 	.word	0x08008e9b
 8008dc0:	08008e9b 	.word	0x08008e9b
 8008dc4:	08008e9b 	.word	0x08008e9b
 8008dc8:	08008e9b 	.word	0x08008e9b
 8008dcc:	08008e9b 	.word	0x08008e9b
 8008dd0:	08008e9b 	.word	0x08008e9b
 8008dd4:	08008e9b 	.word	0x08008e9b
 8008dd8:	08008e9b 	.word	0x08008e9b
 8008ddc:	08008e9b 	.word	0x08008e9b
 8008de0:	08008e9b 	.word	0x08008e9b
 8008de4:	08008e9b 	.word	0x08008e9b
 8008de8:	08008e9b 	.word	0x08008e9b
 8008dec:	08008e9b 	.word	0x08008e9b
 8008df0:	08008e9b 	.word	0x08008e9b
 8008df4:	08008e17 	.word	0x08008e17
                    #endif
                case MODE1_CALCULATED_ENGINE_LOAD_VALUE:
                #endif

                #ifdef MODE1_EQ_100_TIMES_A_OVER_255
                    return (((float)data[A]) * (float)100) / (float)255;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	ee07 3a90 	vmov	s15, r3
 8008e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e04:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8008f18 <get_pid_value+0x25c>
 8008e08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008e0c:	eddf 6a43 	vldr	s13, [pc, #268]	; 8008f1c <get_pid_value+0x260>
 8008e10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e14:	e079      	b.n	8008f0a <get_pid_value+0x24e>
                    #endif
                case MODE1_AMBIENT_AIR_TEMPERATURE:
                #endif

                #ifdef MODE1_EQ_A_MINUS_40
                    return ((float)data[A] - (float)40);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	ee07 3a90 	vmov	s15, r3
 8008e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e22:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8008f20 <get_pid_value+0x264>
 8008e26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e2a:	e06e      	b.n	8008f0a <get_pid_value+0x24e>
                    #endif
                case MODE1_ENGINE_RPM:
                #endif

                #ifdef MODE1_EQ_256_TIMES_A_PLUS_B_OVER_255
                    return (((float)256 * (float)data[A] ) + (float)data[B] ) / (float)4;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	ee07 3a90 	vmov	s15, r3
 8008e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e38:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8008f24 <get_pid_value+0x268>
 8008e3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	3301      	adds	r3, #1
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e52:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008e56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e5a:	e056      	b.n	8008f0a <get_pid_value+0x24e>
                    #endif
                case MODE1_BAROMETRIC_PRESSURE:
                #endif

                #ifdef MODE1_EQ_A
                    return (float)data[A];
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	ee07 3a90 	vmov	s15, r3
 8008e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e68:	e04f      	b.n	8008f0a <get_pid_value+0x24e>
                    #endif
                case MODE1_MAF_AIR_FLOW_RATE:
                #endif

                #ifdef MODE1_EQ_256_TIMES_A_PLUS_B_OVER_100
                    return (((float)256 * (float)data[A] ) + (float)data[B] ) / (float)100;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	ee07 3a90 	vmov	s15, r3
 8008e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e76:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8008f24 <get_pid_value+0x268>
 8008e7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	3301      	adds	r3, #1
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	ee07 3a90 	vmov	s15, r3
 8008e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e90:	eddf 6a21 	vldr	s13, [pc, #132]	; 8008f18 <get_pid_value+0x25c>
 8008e94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e98:	e037      	b.n	8008f0a <get_pid_value+0x24e>
                    break;
                #endif

                default:
                    return -1;
 8008e9a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8008e9e:	e034      	b.n	8008f0a <get_pid_value+0x24e>
                    break;
            }

        case MODE22:
            switch( pid )
 8008ea0:	88bb      	ldrh	r3, [r7, #4]
 8008ea2:	f240 527d 	movw	r2, #1405	; 0x57d
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d01f      	beq.n	8008eea <get_pid_value+0x22e>
 8008eaa:	f24f 420f 	movw	r2, #62479	; 0xf40f
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d01b      	beq.n	8008eea <get_pid_value+0x22e>
 8008eb2:	f240 4261 	movw	r2, #1121	; 0x461
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d122      	bne.n	8008f00 <get_pid_value+0x244>
                    #endif
                case MODE22_CHARGE_AIR_TEMPERATURE:
                #endif

                #ifdef MODE22_EQ_256_TIMES_A_PLUS_B_OVER_64
                    return (((float)256 * (float)data[A] ) + (float)data[B] ) / (float)64;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	ee07 3a90 	vmov	s15, r3
 8008ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8008f24 <get_pid_value+0x268>
 8008eca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	ee07 3a90 	vmov	s15, r3
 8008ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008edc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ee0:	eddf 6a11 	vldr	s13, [pc, #68]	; 8008f28 <get_pid_value+0x26c>
 8008ee4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008ee8:	e00f      	b.n	8008f0a <get_pid_value+0x24e>
                    #endif
                case MODE22_AMBIENT_AIR_TEMPERATURE:
                #endif

                #ifdef MODE22_EQ_A_MINUS_40
                    return ((float)data[A] - (float)40);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	ee07 3a90 	vmov	s15, r3
 8008ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8008f20 <get_pid_value+0x264>
 8008efa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008efe:	e004      	b.n	8008f0a <get_pid_value+0x24e>
                    break;
                #endif

                default:
                    return -1;
 8008f00:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8008f04:	e001      	b.n	8008f0a <get_pid_value+0x24e>
                    break;
            }

        default:
            return -1;
 8008f06:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
}
 8008f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	42c80000 	.word	0x42c80000
 8008f1c:	437f0000 	.word	0x437f0000
 8008f20:	42200000 	.word	0x42200000
 8008f24:	43800000 	.word	0x43800000
 8008f28:	42800000 	.word	0x42800000

08008f2c <refresh_timeout>:

static void refresh_timeout( POBDII_PACKET_MANAGER dev )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
    dev->obdii_time = obdii_tick;
 8008f34:	4b04      	ldr	r3, [pc, #16]	; (8008f48 <refresh_timeout+0x1c>)
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	20000768 	.word	0x20000768

08008f4c <OBDII_tick>:

void OBDII_tick( void )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	af00      	add	r7, sp, #0
    obdii_tick++;
 8008f50:	4b04      	ldr	r3, [pc, #16]	; (8008f64 <OBDII_tick+0x18>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3301      	adds	r3, #1
 8008f56:	4a03      	ldr	r2, [pc, #12]	; (8008f64 <OBDII_tick+0x18>)
 8008f58:	6013      	str	r3, [r2, #0]
}
 8008f5a:	bf00      	nop
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	20000768 	.word	0x20000768

08008f68 <clear_obdii_packets>:


static void clear_obdii_packets( POBDII_PACKET_MANAGER dev )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
    for( uint8_t i = 0; i < OBDII_MAX_MSGS; i++)
 8008f70:	2300      	movs	r3, #0
 8008f72:	73fb      	strb	r3, [r7, #15]
 8008f74:	e03d      	b.n	8008ff2 <clear_obdii_packets+0x8a>
    {
        dev->msg[i].mode = MODE_NOT_CONFIGURED;
 8008f76:	7bfa      	ldrb	r2, [r7, #15]
 8008f78:	6879      	ldr	r1, [r7, #4]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	00da      	lsls	r2, r3, #3
 8008f82:	1ad2      	subs	r2, r2, r3
 8008f84:	188b      	adds	r3, r1, r2
 8008f86:	3302      	adds	r3, #2
 8008f88:	22aa      	movs	r2, #170	; 0xaa
 8008f8a:	701a      	strb	r2, [r3, #0]

        dev->msg[i].current_frame = 0;
 8008f8c:	7bfa      	ldrb	r2, [r7, #15]
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	4613      	mov	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	00da      	lsls	r2, r3, #3
 8008f98:	1ad2      	subs	r2, r2, r3
 8008f9a:	188b      	adds	r3, r1, r2
 8008f9c:	3324      	adds	r3, #36	; 0x24
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	701a      	strb	r2, [r3, #0]

        dev->msg[i].num_frames = 0;
 8008fa2:	7bfa      	ldrb	r2, [r7, #15]
 8008fa4:	6879      	ldr	r1, [r7, #4]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4413      	add	r3, r2
 8008fac:	00da      	lsls	r2, r3, #3
 8008fae:	1ad2      	subs	r2, r2, r3
 8008fb0:	188b      	adds	r3, r1, r2
 8008fb2:	3323      	adds	r3, #35	; 0x23
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	701a      	strb	r2, [r3, #0]

        for( uint8_t index = 0; index < OBDII_MAX_FRAMES; index++)
 8008fb8:	2300      	movs	r3, #0
 8008fba:	73bb      	strb	r3, [r7, #14]
 8008fbc:	e013      	b.n	8008fe6 <clear_obdii_packets+0x7e>
            memset(dev->msg[i].frame[index].buf, 0x55, OBDII_DLC);
 8008fbe:	7bfa      	ldrb	r2, [r7, #15]
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
 8008fc2:	00d9      	lsls	r1, r3, #3
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	00da      	lsls	r2, r3, #3
 8008fcc:	1ad2      	subs	r2, r2, r3
 8008fce:	188b      	adds	r3, r1, r2
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	3303      	adds	r3, #3
 8008fd6:	2208      	movs	r2, #8
 8008fd8:	2155      	movs	r1, #85	; 0x55
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fad4 	bl	8009588 <memset>
        for( uint8_t index = 0; index < OBDII_MAX_FRAMES; index++)
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	73bb      	strb	r3, [r7, #14]
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d9e8      	bls.n	8008fbe <clear_obdii_packets+0x56>
    for( uint8_t i = 0; i < OBDII_MAX_MSGS; i++)
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	73fb      	strb	r3, [r7, #15]
 8008ff2:	7bfb      	ldrb	r3, [r7, #15]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d9be      	bls.n	8008f76 <clear_obdii_packets+0xe>
    }
}
 8008ff8:	bf00      	nop
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <flush_obdii_rx_buf>:

static void flush_obdii_rx_buf( POBDII_PACKET_MANAGER dev )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
    dev->rx_byte_count = 0;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
    memset(dev->rx_buf, 0, OBDII_RX_BUF_SIZE);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	33c8      	adds	r3, #200	; 0xc8
 8009014:	2220      	movs	r2, #32
 8009016:	2100      	movs	r1, #0
 8009018:	4618      	mov	r0, r3
 800901a:	f000 fab5 	bl	8009588 <memset>
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <next_byte>:

static void next_byte( uint8_t *frame, uint8_t *cur_byte )
{
 8009026:	b480      	push	{r7}
 8009028:	b083      	sub	sp, #12
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	6039      	str	r1, [r7, #0]
    if( ((*cur_byte) + 0x01U) < OBDII_DLC )
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	3301      	adds	r3, #1
 8009036:	2b07      	cmp	r3, #7
 8009038:	d806      	bhi.n	8009048 <next_byte+0x22>
    {
        (*cur_byte)++;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	3301      	adds	r3, #1
 8009040:	b2da      	uxtb	r2, r3
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	701a      	strb	r2, [r3, #0]
    } else
    {
        (*frame)++;
        (*cur_byte) = 0x01U;
    }
}
 8009046:	e008      	b.n	800905a <next_byte+0x34>
        (*frame)++;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	3301      	adds	r3, #1
 800904e:	b2da      	uxtb	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	701a      	strb	r2, [r3, #0]
        (*cur_byte) = 0x01U;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2201      	movs	r2, #1
 8009058:	701a      	strb	r2, [r3, #0]
}
 800905a:	bf00      	nop
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <clear_diagnostics>:

static void clear_diagnostics( POBDII_PACKET_MANAGER dev )
{
 8009066:	b480      	push	{r7}
 8009068:	b083      	sub	sp, #12
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
    dev->diagnostic.tx_abort_count = 0;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    dev->diagnostic.rx_abort_count = 0;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    dev->diagnostic.rx_count = 0;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    dev->diagnostic.tx_failure = 0;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
}
 800908e:	bf00      	nop
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <clear_pid_entries>:

static void clear_pid_entries( POBDII_PACKET_MANAGER dev )
{
 800909a:	b480      	push	{r7}
 800909c:	b085      	sub	sp, #20
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
    for( uint8_t i = 0; i < OBDII_MAX_PIDS; i++)
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]
 80090a6:	e002      	b.n	80090ae <clear_pid_entries+0x14>
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
 80090aa:	3301      	adds	r3, #1
 80090ac:	73fb      	strb	r3, [r7, #15]
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	2b18      	cmp	r3, #24
 80090b2:	d9f9      	bls.n	80090a8 <clear_pid_entries+0xe>
        //dev->stream.pid[i] = 0;
        //dev->pid_results[i] = 0;
    }

    /* Reset the byte count */
    dev->num_pids = 0;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 80090bc:	bf00      	nop
 80090be:	3714      	adds	r7, #20
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <get_pid_base_unit>:
#include "lib_pid.h"

PID_UNITS get_pid_base_unit( uint8_t mode, uint16_t PID )
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	4603      	mov	r3, r0
 80090d0:	460a      	mov	r2, r1
 80090d2:	71fb      	strb	r3, [r7, #7]
 80090d4:	4613      	mov	r3, r2
 80090d6:	80bb      	strh	r3, [r7, #4]
    switch ( mode )
 80090d8:	79fb      	ldrb	r3, [r7, #7]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d003      	beq.n	80090e6 <get_pid_base_unit+0x1e>
 80090de:	2b22      	cmp	r3, #34	; 0x22
 80090e0:	f000 80fc 	beq.w	80092dc <get_pid_base_unit+0x214>
 80090e4:	e110      	b.n	8009308 <get_pid_base_unit+0x240>
    {
        case MODE1:
            switch ( PID )
 80090e6:	88bb      	ldrh	r3, [r7, #4]
 80090e8:	3b04      	subs	r3, #4
 80090ea:	2b6b      	cmp	r3, #107	; 0x6b
 80090ec:	f200 80f4 	bhi.w	80092d8 <get_pid_base_unit+0x210>
 80090f0:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <get_pid_base_unit+0x30>)
 80090f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f6:	bf00      	nop
 80090f8:	080092a9 	.word	0x080092a9
 80090fc:	080092ad 	.word	0x080092ad
 8009100:	080092d9 	.word	0x080092d9
 8009104:	080092d9 	.word	0x080092d9
 8009108:	080092d9 	.word	0x080092d9
 800910c:	080092d9 	.word	0x080092d9
 8009110:	080092d9 	.word	0x080092d9
 8009114:	080092b5 	.word	0x080092b5
 8009118:	080092b1 	.word	0x080092b1
 800911c:	080092b9 	.word	0x080092b9
 8009120:	080092d9 	.word	0x080092d9
 8009124:	080092bd 	.word	0x080092bd
 8009128:	080092c1 	.word	0x080092c1
 800912c:	080092c5 	.word	0x080092c5
 8009130:	080092d9 	.word	0x080092d9
 8009134:	080092d9 	.word	0x080092d9
 8009138:	080092d9 	.word	0x080092d9
 800913c:	080092d9 	.word	0x080092d9
 8009140:	080092d9 	.word	0x080092d9
 8009144:	080092d9 	.word	0x080092d9
 8009148:	080092d9 	.word	0x080092d9
 800914c:	080092d9 	.word	0x080092d9
 8009150:	080092d9 	.word	0x080092d9
 8009154:	080092d9 	.word	0x080092d9
 8009158:	080092d9 	.word	0x080092d9
 800915c:	080092d9 	.word	0x080092d9
 8009160:	080092d9 	.word	0x080092d9
 8009164:	080092d9 	.word	0x080092d9
 8009168:	080092d9 	.word	0x080092d9
 800916c:	080092d9 	.word	0x080092d9
 8009170:	080092d9 	.word	0x080092d9
 8009174:	080092d9 	.word	0x080092d9
 8009178:	080092d9 	.word	0x080092d9
 800917c:	080092d9 	.word	0x080092d9
 8009180:	080092d9 	.word	0x080092d9
 8009184:	080092d9 	.word	0x080092d9
 8009188:	080092d9 	.word	0x080092d9
 800918c:	080092d9 	.word	0x080092d9
 8009190:	080092d9 	.word	0x080092d9
 8009194:	080092d9 	.word	0x080092d9
 8009198:	080092d9 	.word	0x080092d9
 800919c:	080092d9 	.word	0x080092d9
 80091a0:	080092d9 	.word	0x080092d9
 80091a4:	080092d9 	.word	0x080092d9
 80091a8:	080092d9 	.word	0x080092d9
 80091ac:	080092d9 	.word	0x080092d9
 80091b0:	080092d9 	.word	0x080092d9
 80091b4:	080092c9 	.word	0x080092c9
 80091b8:	080092d9 	.word	0x080092d9
 80091bc:	080092d9 	.word	0x080092d9
 80091c0:	080092d9 	.word	0x080092d9
 80091c4:	080092d9 	.word	0x080092d9
 80091c8:	080092d9 	.word	0x080092d9
 80091cc:	080092d9 	.word	0x080092d9
 80091d0:	080092d9 	.word	0x080092d9
 80091d4:	080092d9 	.word	0x080092d9
 80091d8:	080092d9 	.word	0x080092d9
 80091dc:	080092d9 	.word	0x080092d9
 80091e0:	080092d9 	.word	0x080092d9
 80091e4:	080092d9 	.word	0x080092d9
 80091e8:	080092d9 	.word	0x080092d9
 80091ec:	080092d9 	.word	0x080092d9
 80091f0:	080092d9 	.word	0x080092d9
 80091f4:	080092cd 	.word	0x080092cd
 80091f8:	080092d9 	.word	0x080092d9
 80091fc:	080092d9 	.word	0x080092d9
 8009200:	080092d1 	.word	0x080092d1
 8009204:	080092d9 	.word	0x080092d9
 8009208:	080092d9 	.word	0x080092d9
 800920c:	080092d9 	.word	0x080092d9
 8009210:	080092d9 	.word	0x080092d9
 8009214:	080092d9 	.word	0x080092d9
 8009218:	080092d9 	.word	0x080092d9
 800921c:	080092d9 	.word	0x080092d9
 8009220:	080092d9 	.word	0x080092d9
 8009224:	080092d9 	.word	0x080092d9
 8009228:	080092d9 	.word	0x080092d9
 800922c:	080092d9 	.word	0x080092d9
 8009230:	080092d9 	.word	0x080092d9
 8009234:	080092d9 	.word	0x080092d9
 8009238:	080092d9 	.word	0x080092d9
 800923c:	080092d9 	.word	0x080092d9
 8009240:	080092d9 	.word	0x080092d9
 8009244:	080092d9 	.word	0x080092d9
 8009248:	080092d9 	.word	0x080092d9
 800924c:	080092d9 	.word	0x080092d9
 8009250:	080092d9 	.word	0x080092d9
 8009254:	080092d9 	.word	0x080092d9
 8009258:	080092d9 	.word	0x080092d9
 800925c:	080092d9 	.word	0x080092d9
 8009260:	080092d9 	.word	0x080092d9
 8009264:	080092d9 	.word	0x080092d9
 8009268:	080092d9 	.word	0x080092d9
 800926c:	080092d9 	.word	0x080092d9
 8009270:	080092d9 	.word	0x080092d9
 8009274:	080092d9 	.word	0x080092d9
 8009278:	080092d9 	.word	0x080092d9
 800927c:	080092d9 	.word	0x080092d9
 8009280:	080092d9 	.word	0x080092d9
 8009284:	080092d9 	.word	0x080092d9
 8009288:	080092d9 	.word	0x080092d9
 800928c:	080092d9 	.word	0x080092d9
 8009290:	080092d9 	.word	0x080092d9
 8009294:	080092d9 	.word	0x080092d9
 8009298:	080092d9 	.word	0x080092d9
 800929c:	080092d9 	.word	0x080092d9
 80092a0:	080092d9 	.word	0x080092d9
 80092a4:	080092d5 	.word	0x080092d5
            {
                #ifdef MODE1_CALCULATED_ENGINE_LOAD_VALUE_SUPPORTED
                case MODE1_CALCULATED_ENGINE_LOAD_VALUE:
                    return MODE1_CALCULATED_ENGINE_LOAD_UNITS;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e02e      	b.n	800930a <get_pid_base_unit+0x242>
                #endif

                #ifdef MODE1_ENGINE_COOLANT_TEMPERATURE_SUPPORTED
                case MODE1_ENGINE_COOLANT_TEMPERATURE:
                    return MODE1_ENGINE_COOLANT_TEMPERATURE_UNITS;
 80092ac:	2302      	movs	r3, #2
 80092ae:	e02c      	b.n	800930a <get_pid_base_unit+0x242>
                #endif

                #ifdef MODE1_ENGINE_RPM_SUPPORTED
                case MODE1_ENGINE_RPM:
                    return MODE1_ENGINE_RPM_UNITS;
 80092b0:	2306      	movs	r3, #6
 80092b2:	e02a      	b.n	800930a <get_pid_base_unit+0x242>
                #endif

                #ifdef MODE1_INTAKE_MANIFOLD_ABSOLUTE_PRESSURE_SUPPORTED
                case MODE1_INTAKE_MANIFOLD_ABSOLUTE_PRESSURE:
                    return MODE1_INTAKE_MANIFOLD_ABSOLUTE_PRESSURE_UNITS;
 80092b4:	2304      	movs	r3, #4
 80092b6:	e028      	b.n	800930a <get_pid_base_unit+0x242>
                #endif

                #ifdef MODE1_VEHICLE_SPEED_SUPPORTED
                case MODE1_VEHICLE_SPEED:
                    return MODE1_VEHICLE_SPEED_UNITS;
 80092b8:	2307      	movs	r3, #7
 80092ba:	e026      	b.n	800930a <get_pid_base_unit+0x242>
                #endif

                #ifdef MODE1_INTAKE_AIR_TEMPERATURE_SUPPORTED
                case MODE1_INTAKE_AIR_TEMPERATURE:
                    return MODE1_INTAKE_AIR_TEMPERATURE_UNITS;
 80092bc:	2302      	movs	r3, #2
 80092be:	e024      	b.n	800930a <get_pid_base_unit+0x242>
                #endif

                #ifdef MODE1_MAF_AIR_FLOW_RATE_SUPPORTED
                case MODE1_MAF_AIR_FLOW_RATE:
                    return MODE1_MAF_AIR_FLOW_RATE_UNITS;
 80092c0:	2309      	movs	r3, #9
 80092c2:	e022      	b.n	800930a <get_pid_base_unit+0x242>
                #endif

                #ifdef MODE1_THROTTLE_POSITION_SUPPORTED
                case MODE1_THROTTLE_POSITION:
                    return MODE1_THROTTLE_POSITION_UNITS;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e020      	b.n	800930a <get_pid_base_unit+0x242>
                #endif

                #ifdef MODE1_BAROMETRIC_PRESSURE_SUPPORTED
                case MODE1_BAROMETRIC_PRESSURE:
                    return MODE1_BAROMETRIC_PRESSURE_UNITS;
 80092c8:	2304      	movs	r3, #4
 80092ca:	e01e      	b.n	800930a <get_pid_base_unit+0x242>
                #endif

                #ifdef MODE1_ABSOLUTE_LOAD_VALUE_SUPPORTED
                case MODE1_ABSOLUTE_LOAD_VALUE:
                    return MODE1_ABSOLUTE_LOAD_VALUE_UNITS;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e01c      	b.n	800930a <get_pid_base_unit+0x242>
                #endif

                #ifdef MODE1_AMBIENT_AIR_TEMPERATURE_SUPPORTED
                case MODE1_AMBIENT_AIR_TEMPERATURE:
                    return MODE1_AMBIENT_AIR_TEMPERATURE_UNITS;
 80092d0:	2302      	movs	r3, #2
 80092d2:	e01a      	b.n	800930a <get_pid_base_unit+0x242>
                #endif

                #ifdef MODE1_TURBO_INLET_PRESSURE_SUPPORTED
                case MODE1_TURBO_INLET_PRESSURE:
                    return MODE1_TURBO_INLET_PRESSURE_UNITS;
 80092d4:	2304      	movs	r3, #4
 80092d6:	e018      	b.n	800930a <get_pid_base_unit+0x242>
                #endif

                default:
                    return 0x00;
 80092d8:	2300      	movs	r3, #0
 80092da:	e016      	b.n	800930a <get_pid_base_unit+0x242>
            }
            break;

        case MODE22:
            switch ( PID )
 80092dc:	88bb      	ldrh	r3, [r7, #4]
 80092de:	f240 527d 	movw	r2, #1405	; 0x57d
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d00c      	beq.n	8009300 <get_pid_base_unit+0x238>
 80092e6:	f24f 420f 	movw	r2, #62479	; 0xf40f
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d004      	beq.n	80092f8 <get_pid_base_unit+0x230>
 80092ee:	f240 4261 	movw	r2, #1121	; 0x461
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d002      	beq.n	80092fc <get_pid_base_unit+0x234>
 80092f6:	e005      	b.n	8009304 <get_pid_base_unit+0x23c>
            {
                #ifdef MODE22_INTAKE_AIR_TEMPERATURE_SUPPORTED
                case MODE22_INTAKE_AIR_TEMPERATURE:
                    return MODE22_INTAKE_AIR_TEMPERATURE_UNITS;
 80092f8:	2302      	movs	r3, #2
 80092fa:	e006      	b.n	800930a <get_pid_base_unit+0x242>
                #endif

                #ifdef MODE22_CHARGE_AIR_TEMPERATURE_SUPPORTED
                case MODE22_CHARGE_AIR_TEMPERATURE:
                    return MODE22_CHARGE_AIR_TEMPERATURE_UNITS;
 80092fc:	2302      	movs	r3, #2
 80092fe:	e004      	b.n	800930a <get_pid_base_unit+0x242>
                #endif

                #ifdef MODE22_AMBIENT_AIR_TEMPERATURE_SUPPORTED
                case MODE22_AMBIENT_AIR_TEMPERATURE:
                    return MODE22_AMBIENT_AIR_TEMPERATURE_UNITS;
 8009300:	2302      	movs	r3, #2
 8009302:	e002      	b.n	800930a <get_pid_base_unit+0x242>
                #endif

                default:
                    return 0;
 8009304:	2300      	movs	r3, #0
 8009306:	e000      	b.n	800930a <get_pid_base_unit+0x242>
            }
            break;

        default:
            return 0;
 8009308:	2300      	movs	r3, #0
        }
}
 800930a:	4618      	mov	r0, r3
 800930c:	370c      	adds	r7, #12
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop

08009318 <convert_units>:
 */

#include "lib_unit_conversion.h"

PID_UNITS convert_units( PID_UNITS unitsIn, PID_UNITS unitsOut, float *value )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	4603      	mov	r3, r0
 8009320:	603a      	str	r2, [r7, #0]
 8009322:	71fb      	strb	r3, [r7, #7]
 8009324:	460b      	mov	r3, r1
 8009326:	71bb      	strb	r3, [r7, #6]
    if( (unitsIn == PID_UNITS_FAHRENHEIT) && (unitsOut == PID_UNITS_CELCIUS) ) {
 8009328:	79fb      	ldrb	r3, [r7, #7]
 800932a:	2b03      	cmp	r3, #3
 800932c:	d110      	bne.n	8009350 <convert_units+0x38>
 800932e:	79bb      	ldrb	r3, [r7, #6]
 8009330:	2b02      	cmp	r3, #2
 8009332:	d10d      	bne.n	8009350 <convert_units+0x38>
        *value = fahrenheit_to_celcuis( *value );
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	edd3 7a00 	vldr	s15, [r3]
 800933a:	eeb0 0a67 	vmov.f32	s0, s15
 800933e:	f000 f871 	bl	8009424 <fahrenheit_to_celcuis>
 8009342:	eef0 7a40 	vmov.f32	s15, s0
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	edc3 7a00 	vstr	s15, [r3]
        return unitsOut;
 800934c:	79bb      	ldrb	r3, [r7, #6]
 800934e:	e064      	b.n	800941a <convert_units+0x102>
    }

    else if( (unitsIn == PID_UNITS_CELCIUS) && (unitsOut == PID_UNITS_FAHRENHEIT) ) {
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	2b02      	cmp	r3, #2
 8009354:	d110      	bne.n	8009378 <convert_units+0x60>
 8009356:	79bb      	ldrb	r3, [r7, #6]
 8009358:	2b03      	cmp	r3, #3
 800935a:	d10d      	bne.n	8009378 <convert_units+0x60>
        *value = celcuis_to_fahrenheit( *value );
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	edd3 7a00 	vldr	s15, [r3]
 8009362:	eeb0 0a67 	vmov.f32	s0, s15
 8009366:	f000 f877 	bl	8009458 <celcuis_to_fahrenheit>
 800936a:	eef0 7a40 	vmov.f32	s15, s0
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	edc3 7a00 	vstr	s15, [r3]
        return unitsOut;
 8009374:	79bb      	ldrb	r3, [r7, #6]
 8009376:	e050      	b.n	800941a <convert_units+0x102>
    }

    else if( (unitsIn == PID_UNITS_KMH) && (unitsOut == PID_UNITS_MPH) ) {
 8009378:	79fb      	ldrb	r3, [r7, #7]
 800937a:	2b07      	cmp	r3, #7
 800937c:	d110      	bne.n	80093a0 <convert_units+0x88>
 800937e:	79bb      	ldrb	r3, [r7, #6]
 8009380:	2b08      	cmp	r3, #8
 8009382:	d10d      	bne.n	80093a0 <convert_units+0x88>
        *value = kmh_to_mph( *value );
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	edd3 7a00 	vldr	s15, [r3]
 800938a:	eeb0 0a67 	vmov.f32	s0, s15
 800938e:	f000 f87d 	bl	800948c <kmh_to_mph>
 8009392:	eef0 7a40 	vmov.f32	s15, s0
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	edc3 7a00 	vstr	s15, [r3]
        return unitsOut;
 800939c:	79bb      	ldrb	r3, [r7, #6]
 800939e:	e03c      	b.n	800941a <convert_units+0x102>
    }

    else if( (unitsIn == PID_UNITS_MPH) && (unitsOut == PID_UNITS_KMH) ) {
 80093a0:	79fb      	ldrb	r3, [r7, #7]
 80093a2:	2b08      	cmp	r3, #8
 80093a4:	d110      	bne.n	80093c8 <convert_units+0xb0>
 80093a6:	79bb      	ldrb	r3, [r7, #6]
 80093a8:	2b07      	cmp	r3, #7
 80093aa:	d10d      	bne.n	80093c8 <convert_units+0xb0>
        *value = mph_to_kmh( *value );
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	edd3 7a00 	vldr	s15, [r3]
 80093b2:	eeb0 0a67 	vmov.f32	s0, s15
 80093b6:	f000 f87f 	bl	80094b8 <mph_to_kmh>
 80093ba:	eef0 7a40 	vmov.f32	s15, s0
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	edc3 7a00 	vstr	s15, [r3]
        return unitsOut;
 80093c4:	79bb      	ldrb	r3, [r7, #6]
 80093c6:	e028      	b.n	800941a <convert_units+0x102>
    }

    else if( (unitsIn == PID_UNITS_KPA) && (unitsOut == PID_UNITS_PSI) ) {
 80093c8:	79fb      	ldrb	r3, [r7, #7]
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d110      	bne.n	80093f0 <convert_units+0xd8>
 80093ce:	79bb      	ldrb	r3, [r7, #6]
 80093d0:	2b05      	cmp	r3, #5
 80093d2:	d10d      	bne.n	80093f0 <convert_units+0xd8>
        *value = kpa_to_psi( *value );
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	edd3 7a00 	vldr	s15, [r3]
 80093da:	eeb0 0a67 	vmov.f32	s0, s15
 80093de:	f000 f87f 	bl	80094e0 <kpa_to_psi>
 80093e2:	eef0 7a40 	vmov.f32	s15, s0
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	edc3 7a00 	vstr	s15, [r3]
        return unitsOut;
 80093ec:	79bb      	ldrb	r3, [r7, #6]
 80093ee:	e014      	b.n	800941a <convert_units+0x102>
    }

    else if( (unitsIn == PID_UNITS_PSI) && (unitsOut == PID_UNITS_KPA) ) {
 80093f0:	79fb      	ldrb	r3, [r7, #7]
 80093f2:	2b05      	cmp	r3, #5
 80093f4:	d110      	bne.n	8009418 <convert_units+0x100>
 80093f6:	79bb      	ldrb	r3, [r7, #6]
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d10d      	bne.n	8009418 <convert_units+0x100>
        *value = psi_to_kpa( *value );
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	edd3 7a00 	vldr	s15, [r3]
 8009402:	eeb0 0a67 	vmov.f32	s0, s15
 8009406:	f000 f87f 	bl	8009508 <psi_to_kpa>
 800940a:	eef0 7a40 	vmov.f32	s15, s0
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	edc3 7a00 	vstr	s15, [r3]
        return unitsOut;
 8009414:	79bb      	ldrb	r3, [r7, #6]
 8009416:	e000      	b.n	800941a <convert_units+0x102>
    }

    else {
        return unitsIn;
 8009418:	79fb      	ldrb	r3, [r7, #7]
    }
}
 800941a:	4618      	mov	r0, r3
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <fahrenheit_to_celcuis>:

float fahrenheit_to_celcuis( float fahrenheit )
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	ed87 0a01 	vstr	s0, [r7, #4]
    return (fahrenheit - (float)32.00) * ((float)5.00 / (float)9.00);
 800942e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009432:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8009450 <fahrenheit_to_celcuis+0x2c>
 8009436:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800943a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8009454 <fahrenheit_to_celcuis+0x30>
 800943e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8009442:	eeb0 0a67 	vmov.f32	s0, s15
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	42000000 	.word	0x42000000
 8009454:	3f0e38e4 	.word	0x3f0e38e4

08009458 <celcuis_to_fahrenheit>:

float celcuis_to_fahrenheit( float celcuis )
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	ed87 0a01 	vstr	s0, [r7, #4]
    return (celcuis * ((float)9.00 / (float)5.00)) + (float)32.00;
 8009462:	edd7 7a01 	vldr	s15, [r7, #4]
 8009466:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8009484 <celcuis_to_fahrenheit+0x2c>
 800946a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800946e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8009488 <celcuis_to_fahrenheit+0x30>
 8009472:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8009476:	eeb0 0a67 	vmov.f32	s0, s15
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	3fe66666 	.word	0x3fe66666
 8009488:	42000000 	.word	0x42000000

0800948c <kmh_to_mph>:

float kmh_to_mph( float kmh )
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	ed87 0a01 	vstr	s0, [r7, #4]
    return kmh / MPH_TO_KPH_FACTOR;
 8009496:	edd7 7a01 	vldr	s15, [r7, #4]
 800949a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80094b4 <kmh_to_mph+0x28>
 800949e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80094a2:	eef0 7a66 	vmov.f32	s15, s13
}
 80094a6:	eeb0 0a67 	vmov.f32	s0, s15
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	3fcdfefc 	.word	0x3fcdfefc

080094b8 <mph_to_kmh>:

float mph_to_kmh( float mph )
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	ed87 0a01 	vstr	s0, [r7, #4]
    return mph * MPH_TO_KPH_FACTOR;
 80094c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80094c6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80094dc <mph_to_kmh+0x24>
 80094ca:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80094ce:	eeb0 0a67 	vmov.f32	s0, s15
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	3fcdfefc 	.word	0x3fcdfefc

080094e0 <kpa_to_psi>:

float kpa_to_psi( float kpa)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	ed87 0a01 	vstr	s0, [r7, #4]
    return kpa * KPA_TO_PSI_FACTOR;
 80094ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80094ee:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009504 <kpa_to_psi+0x24>
 80094f2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80094f6:	eeb0 0a67 	vmov.f32	s0, s15
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	3e1484c3 	.word	0x3e1484c3

08009508 <psi_to_kpa>:

float psi_to_kpa( float psi )
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	ed87 0a01 	vstr	s0, [r7, #4]
    return psi / KPA_TO_PSI_FACTOR;
 8009512:	edd7 7a01 	vldr	s15, [r7, #4]
 8009516:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8009530 <psi_to_kpa+0x28>
 800951a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800951e:	eef0 7a66 	vmov.f32	s15, s13
}
 8009522:	eeb0 0a67 	vmov.f32	s0, s15
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	3e1484c3 	.word	0x3e1484c3

08009534 <__errno>:
 8009534:	4b01      	ldr	r3, [pc, #4]	; (800953c <__errno+0x8>)
 8009536:	6818      	ldr	r0, [r3, #0]
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	20000034 	.word	0x20000034

08009540 <__libc_init_array>:
 8009540:	b570      	push	{r4, r5, r6, lr}
 8009542:	4e0d      	ldr	r6, [pc, #52]	; (8009578 <__libc_init_array+0x38>)
 8009544:	4c0d      	ldr	r4, [pc, #52]	; (800957c <__libc_init_array+0x3c>)
 8009546:	1ba4      	subs	r4, r4, r6
 8009548:	10a4      	asrs	r4, r4, #2
 800954a:	2500      	movs	r5, #0
 800954c:	42a5      	cmp	r5, r4
 800954e:	d109      	bne.n	8009564 <__libc_init_array+0x24>
 8009550:	4e0b      	ldr	r6, [pc, #44]	; (8009580 <__libc_init_array+0x40>)
 8009552:	4c0c      	ldr	r4, [pc, #48]	; (8009584 <__libc_init_array+0x44>)
 8009554:	f002 f870 	bl	800b638 <_init>
 8009558:	1ba4      	subs	r4, r4, r6
 800955a:	10a4      	asrs	r4, r4, #2
 800955c:	2500      	movs	r5, #0
 800955e:	42a5      	cmp	r5, r4
 8009560:	d105      	bne.n	800956e <__libc_init_array+0x2e>
 8009562:	bd70      	pop	{r4, r5, r6, pc}
 8009564:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009568:	4798      	blx	r3
 800956a:	3501      	adds	r5, #1
 800956c:	e7ee      	b.n	800954c <__libc_init_array+0xc>
 800956e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009572:	4798      	blx	r3
 8009574:	3501      	adds	r5, #1
 8009576:	e7f2      	b.n	800955e <__libc_init_array+0x1e>
 8009578:	0800b908 	.word	0x0800b908
 800957c:	0800b908 	.word	0x0800b908
 8009580:	0800b908 	.word	0x0800b908
 8009584:	0800b90c 	.word	0x0800b90c

08009588 <memset>:
 8009588:	4402      	add	r2, r0
 800958a:	4603      	mov	r3, r0
 800958c:	4293      	cmp	r3, r2
 800958e:	d100      	bne.n	8009592 <memset+0xa>
 8009590:	4770      	bx	lr
 8009592:	f803 1b01 	strb.w	r1, [r3], #1
 8009596:	e7f9      	b.n	800958c <memset+0x4>

08009598 <__cvt>:
 8009598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800959c:	ec55 4b10 	vmov	r4, r5, d0
 80095a0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80095a2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80095a6:	2d00      	cmp	r5, #0
 80095a8:	460e      	mov	r6, r1
 80095aa:	4691      	mov	r9, r2
 80095ac:	4619      	mov	r1, r3
 80095ae:	bfb8      	it	lt
 80095b0:	4622      	movlt	r2, r4
 80095b2:	462b      	mov	r3, r5
 80095b4:	f027 0720 	bic.w	r7, r7, #32
 80095b8:	bfbb      	ittet	lt
 80095ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80095be:	461d      	movlt	r5, r3
 80095c0:	2300      	movge	r3, #0
 80095c2:	232d      	movlt	r3, #45	; 0x2d
 80095c4:	bfb8      	it	lt
 80095c6:	4614      	movlt	r4, r2
 80095c8:	2f46      	cmp	r7, #70	; 0x46
 80095ca:	700b      	strb	r3, [r1, #0]
 80095cc:	d004      	beq.n	80095d8 <__cvt+0x40>
 80095ce:	2f45      	cmp	r7, #69	; 0x45
 80095d0:	d100      	bne.n	80095d4 <__cvt+0x3c>
 80095d2:	3601      	adds	r6, #1
 80095d4:	2102      	movs	r1, #2
 80095d6:	e000      	b.n	80095da <__cvt+0x42>
 80095d8:	2103      	movs	r1, #3
 80095da:	ab03      	add	r3, sp, #12
 80095dc:	9301      	str	r3, [sp, #4]
 80095de:	ab02      	add	r3, sp, #8
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	4632      	mov	r2, r6
 80095e4:	4653      	mov	r3, sl
 80095e6:	ec45 4b10 	vmov	d0, r4, r5
 80095ea:	f000 fcf1 	bl	8009fd0 <_dtoa_r>
 80095ee:	2f47      	cmp	r7, #71	; 0x47
 80095f0:	4680      	mov	r8, r0
 80095f2:	d102      	bne.n	80095fa <__cvt+0x62>
 80095f4:	f019 0f01 	tst.w	r9, #1
 80095f8:	d026      	beq.n	8009648 <__cvt+0xb0>
 80095fa:	2f46      	cmp	r7, #70	; 0x46
 80095fc:	eb08 0906 	add.w	r9, r8, r6
 8009600:	d111      	bne.n	8009626 <__cvt+0x8e>
 8009602:	f898 3000 	ldrb.w	r3, [r8]
 8009606:	2b30      	cmp	r3, #48	; 0x30
 8009608:	d10a      	bne.n	8009620 <__cvt+0x88>
 800960a:	2200      	movs	r2, #0
 800960c:	2300      	movs	r3, #0
 800960e:	4620      	mov	r0, r4
 8009610:	4629      	mov	r1, r5
 8009612:	f7f7 fa79 	bl	8000b08 <__aeabi_dcmpeq>
 8009616:	b918      	cbnz	r0, 8009620 <__cvt+0x88>
 8009618:	f1c6 0601 	rsb	r6, r6, #1
 800961c:	f8ca 6000 	str.w	r6, [sl]
 8009620:	f8da 3000 	ldr.w	r3, [sl]
 8009624:	4499      	add	r9, r3
 8009626:	2200      	movs	r2, #0
 8009628:	2300      	movs	r3, #0
 800962a:	4620      	mov	r0, r4
 800962c:	4629      	mov	r1, r5
 800962e:	f7f7 fa6b 	bl	8000b08 <__aeabi_dcmpeq>
 8009632:	b938      	cbnz	r0, 8009644 <__cvt+0xac>
 8009634:	2230      	movs	r2, #48	; 0x30
 8009636:	9b03      	ldr	r3, [sp, #12]
 8009638:	454b      	cmp	r3, r9
 800963a:	d205      	bcs.n	8009648 <__cvt+0xb0>
 800963c:	1c59      	adds	r1, r3, #1
 800963e:	9103      	str	r1, [sp, #12]
 8009640:	701a      	strb	r2, [r3, #0]
 8009642:	e7f8      	b.n	8009636 <__cvt+0x9e>
 8009644:	f8cd 900c 	str.w	r9, [sp, #12]
 8009648:	9b03      	ldr	r3, [sp, #12]
 800964a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800964c:	eba3 0308 	sub.w	r3, r3, r8
 8009650:	4640      	mov	r0, r8
 8009652:	6013      	str	r3, [r2, #0]
 8009654:	b004      	add	sp, #16
 8009656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800965a <__exponent>:
 800965a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800965c:	2900      	cmp	r1, #0
 800965e:	4604      	mov	r4, r0
 8009660:	bfba      	itte	lt
 8009662:	4249      	neglt	r1, r1
 8009664:	232d      	movlt	r3, #45	; 0x2d
 8009666:	232b      	movge	r3, #43	; 0x2b
 8009668:	2909      	cmp	r1, #9
 800966a:	f804 2b02 	strb.w	r2, [r4], #2
 800966e:	7043      	strb	r3, [r0, #1]
 8009670:	dd20      	ble.n	80096b4 <__exponent+0x5a>
 8009672:	f10d 0307 	add.w	r3, sp, #7
 8009676:	461f      	mov	r7, r3
 8009678:	260a      	movs	r6, #10
 800967a:	fb91 f5f6 	sdiv	r5, r1, r6
 800967e:	fb06 1115 	mls	r1, r6, r5, r1
 8009682:	3130      	adds	r1, #48	; 0x30
 8009684:	2d09      	cmp	r5, #9
 8009686:	f803 1c01 	strb.w	r1, [r3, #-1]
 800968a:	f103 32ff 	add.w	r2, r3, #4294967295
 800968e:	4629      	mov	r1, r5
 8009690:	dc09      	bgt.n	80096a6 <__exponent+0x4c>
 8009692:	3130      	adds	r1, #48	; 0x30
 8009694:	3b02      	subs	r3, #2
 8009696:	f802 1c01 	strb.w	r1, [r2, #-1]
 800969a:	42bb      	cmp	r3, r7
 800969c:	4622      	mov	r2, r4
 800969e:	d304      	bcc.n	80096aa <__exponent+0x50>
 80096a0:	1a10      	subs	r0, r2, r0
 80096a2:	b003      	add	sp, #12
 80096a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096a6:	4613      	mov	r3, r2
 80096a8:	e7e7      	b.n	800967a <__exponent+0x20>
 80096aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ae:	f804 2b01 	strb.w	r2, [r4], #1
 80096b2:	e7f2      	b.n	800969a <__exponent+0x40>
 80096b4:	2330      	movs	r3, #48	; 0x30
 80096b6:	4419      	add	r1, r3
 80096b8:	7083      	strb	r3, [r0, #2]
 80096ba:	1d02      	adds	r2, r0, #4
 80096bc:	70c1      	strb	r1, [r0, #3]
 80096be:	e7ef      	b.n	80096a0 <__exponent+0x46>

080096c0 <_printf_float>:
 80096c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c4:	b08d      	sub	sp, #52	; 0x34
 80096c6:	460c      	mov	r4, r1
 80096c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80096cc:	4616      	mov	r6, r2
 80096ce:	461f      	mov	r7, r3
 80096d0:	4605      	mov	r5, r0
 80096d2:	f001 fa35 	bl	800ab40 <_localeconv_r>
 80096d6:	6803      	ldr	r3, [r0, #0]
 80096d8:	9304      	str	r3, [sp, #16]
 80096da:	4618      	mov	r0, r3
 80096dc:	f7f6 fd98 	bl	8000210 <strlen>
 80096e0:	2300      	movs	r3, #0
 80096e2:	930a      	str	r3, [sp, #40]	; 0x28
 80096e4:	f8d8 3000 	ldr.w	r3, [r8]
 80096e8:	9005      	str	r0, [sp, #20]
 80096ea:	3307      	adds	r3, #7
 80096ec:	f023 0307 	bic.w	r3, r3, #7
 80096f0:	f103 0208 	add.w	r2, r3, #8
 80096f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80096f8:	f8d4 b000 	ldr.w	fp, [r4]
 80096fc:	f8c8 2000 	str.w	r2, [r8]
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009708:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800970c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009710:	9307      	str	r3, [sp, #28]
 8009712:	f8cd 8018 	str.w	r8, [sp, #24]
 8009716:	f04f 32ff 	mov.w	r2, #4294967295
 800971a:	4ba7      	ldr	r3, [pc, #668]	; (80099b8 <_printf_float+0x2f8>)
 800971c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009720:	f7f7 fa24 	bl	8000b6c <__aeabi_dcmpun>
 8009724:	bb70      	cbnz	r0, 8009784 <_printf_float+0xc4>
 8009726:	f04f 32ff 	mov.w	r2, #4294967295
 800972a:	4ba3      	ldr	r3, [pc, #652]	; (80099b8 <_printf_float+0x2f8>)
 800972c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009730:	f7f7 f9fe 	bl	8000b30 <__aeabi_dcmple>
 8009734:	bb30      	cbnz	r0, 8009784 <_printf_float+0xc4>
 8009736:	2200      	movs	r2, #0
 8009738:	2300      	movs	r3, #0
 800973a:	4640      	mov	r0, r8
 800973c:	4649      	mov	r1, r9
 800973e:	f7f7 f9ed 	bl	8000b1c <__aeabi_dcmplt>
 8009742:	b110      	cbz	r0, 800974a <_printf_float+0x8a>
 8009744:	232d      	movs	r3, #45	; 0x2d
 8009746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800974a:	4a9c      	ldr	r2, [pc, #624]	; (80099bc <_printf_float+0x2fc>)
 800974c:	4b9c      	ldr	r3, [pc, #624]	; (80099c0 <_printf_float+0x300>)
 800974e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009752:	bf8c      	ite	hi
 8009754:	4690      	movhi	r8, r2
 8009756:	4698      	movls	r8, r3
 8009758:	2303      	movs	r3, #3
 800975a:	f02b 0204 	bic.w	r2, fp, #4
 800975e:	6123      	str	r3, [r4, #16]
 8009760:	6022      	str	r2, [r4, #0]
 8009762:	f04f 0900 	mov.w	r9, #0
 8009766:	9700      	str	r7, [sp, #0]
 8009768:	4633      	mov	r3, r6
 800976a:	aa0b      	add	r2, sp, #44	; 0x2c
 800976c:	4621      	mov	r1, r4
 800976e:	4628      	mov	r0, r5
 8009770:	f000 f9e6 	bl	8009b40 <_printf_common>
 8009774:	3001      	adds	r0, #1
 8009776:	f040 808d 	bne.w	8009894 <_printf_float+0x1d4>
 800977a:	f04f 30ff 	mov.w	r0, #4294967295
 800977e:	b00d      	add	sp, #52	; 0x34
 8009780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009784:	4642      	mov	r2, r8
 8009786:	464b      	mov	r3, r9
 8009788:	4640      	mov	r0, r8
 800978a:	4649      	mov	r1, r9
 800978c:	f7f7 f9ee 	bl	8000b6c <__aeabi_dcmpun>
 8009790:	b110      	cbz	r0, 8009798 <_printf_float+0xd8>
 8009792:	4a8c      	ldr	r2, [pc, #560]	; (80099c4 <_printf_float+0x304>)
 8009794:	4b8c      	ldr	r3, [pc, #560]	; (80099c8 <_printf_float+0x308>)
 8009796:	e7da      	b.n	800974e <_printf_float+0x8e>
 8009798:	6861      	ldr	r1, [r4, #4]
 800979a:	1c4b      	adds	r3, r1, #1
 800979c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80097a0:	a80a      	add	r0, sp, #40	; 0x28
 80097a2:	d13e      	bne.n	8009822 <_printf_float+0x162>
 80097a4:	2306      	movs	r3, #6
 80097a6:	6063      	str	r3, [r4, #4]
 80097a8:	2300      	movs	r3, #0
 80097aa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80097ae:	ab09      	add	r3, sp, #36	; 0x24
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	ec49 8b10 	vmov	d0, r8, r9
 80097b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80097ba:	6022      	str	r2, [r4, #0]
 80097bc:	f8cd a004 	str.w	sl, [sp, #4]
 80097c0:	6861      	ldr	r1, [r4, #4]
 80097c2:	4628      	mov	r0, r5
 80097c4:	f7ff fee8 	bl	8009598 <__cvt>
 80097c8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80097cc:	2b47      	cmp	r3, #71	; 0x47
 80097ce:	4680      	mov	r8, r0
 80097d0:	d109      	bne.n	80097e6 <_printf_float+0x126>
 80097d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d4:	1cd8      	adds	r0, r3, #3
 80097d6:	db02      	blt.n	80097de <_printf_float+0x11e>
 80097d8:	6862      	ldr	r2, [r4, #4]
 80097da:	4293      	cmp	r3, r2
 80097dc:	dd47      	ble.n	800986e <_printf_float+0x1ae>
 80097de:	f1aa 0a02 	sub.w	sl, sl, #2
 80097e2:	fa5f fa8a 	uxtb.w	sl, sl
 80097e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80097ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097ec:	d824      	bhi.n	8009838 <_printf_float+0x178>
 80097ee:	3901      	subs	r1, #1
 80097f0:	4652      	mov	r2, sl
 80097f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80097f6:	9109      	str	r1, [sp, #36]	; 0x24
 80097f8:	f7ff ff2f 	bl	800965a <__exponent>
 80097fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097fe:	1813      	adds	r3, r2, r0
 8009800:	2a01      	cmp	r2, #1
 8009802:	4681      	mov	r9, r0
 8009804:	6123      	str	r3, [r4, #16]
 8009806:	dc02      	bgt.n	800980e <_printf_float+0x14e>
 8009808:	6822      	ldr	r2, [r4, #0]
 800980a:	07d1      	lsls	r1, r2, #31
 800980c:	d501      	bpl.n	8009812 <_printf_float+0x152>
 800980e:	3301      	adds	r3, #1
 8009810:	6123      	str	r3, [r4, #16]
 8009812:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009816:	2b00      	cmp	r3, #0
 8009818:	d0a5      	beq.n	8009766 <_printf_float+0xa6>
 800981a:	232d      	movs	r3, #45	; 0x2d
 800981c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009820:	e7a1      	b.n	8009766 <_printf_float+0xa6>
 8009822:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009826:	f000 8177 	beq.w	8009b18 <_printf_float+0x458>
 800982a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800982e:	d1bb      	bne.n	80097a8 <_printf_float+0xe8>
 8009830:	2900      	cmp	r1, #0
 8009832:	d1b9      	bne.n	80097a8 <_printf_float+0xe8>
 8009834:	2301      	movs	r3, #1
 8009836:	e7b6      	b.n	80097a6 <_printf_float+0xe6>
 8009838:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800983c:	d119      	bne.n	8009872 <_printf_float+0x1b2>
 800983e:	2900      	cmp	r1, #0
 8009840:	6863      	ldr	r3, [r4, #4]
 8009842:	dd0c      	ble.n	800985e <_printf_float+0x19e>
 8009844:	6121      	str	r1, [r4, #16]
 8009846:	b913      	cbnz	r3, 800984e <_printf_float+0x18e>
 8009848:	6822      	ldr	r2, [r4, #0]
 800984a:	07d2      	lsls	r2, r2, #31
 800984c:	d502      	bpl.n	8009854 <_printf_float+0x194>
 800984e:	3301      	adds	r3, #1
 8009850:	440b      	add	r3, r1
 8009852:	6123      	str	r3, [r4, #16]
 8009854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009856:	65a3      	str	r3, [r4, #88]	; 0x58
 8009858:	f04f 0900 	mov.w	r9, #0
 800985c:	e7d9      	b.n	8009812 <_printf_float+0x152>
 800985e:	b913      	cbnz	r3, 8009866 <_printf_float+0x1a6>
 8009860:	6822      	ldr	r2, [r4, #0]
 8009862:	07d0      	lsls	r0, r2, #31
 8009864:	d501      	bpl.n	800986a <_printf_float+0x1aa>
 8009866:	3302      	adds	r3, #2
 8009868:	e7f3      	b.n	8009852 <_printf_float+0x192>
 800986a:	2301      	movs	r3, #1
 800986c:	e7f1      	b.n	8009852 <_printf_float+0x192>
 800986e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009872:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009876:	4293      	cmp	r3, r2
 8009878:	db05      	blt.n	8009886 <_printf_float+0x1c6>
 800987a:	6822      	ldr	r2, [r4, #0]
 800987c:	6123      	str	r3, [r4, #16]
 800987e:	07d1      	lsls	r1, r2, #31
 8009880:	d5e8      	bpl.n	8009854 <_printf_float+0x194>
 8009882:	3301      	adds	r3, #1
 8009884:	e7e5      	b.n	8009852 <_printf_float+0x192>
 8009886:	2b00      	cmp	r3, #0
 8009888:	bfd4      	ite	le
 800988a:	f1c3 0302 	rsble	r3, r3, #2
 800988e:	2301      	movgt	r3, #1
 8009890:	4413      	add	r3, r2
 8009892:	e7de      	b.n	8009852 <_printf_float+0x192>
 8009894:	6823      	ldr	r3, [r4, #0]
 8009896:	055a      	lsls	r2, r3, #21
 8009898:	d407      	bmi.n	80098aa <_printf_float+0x1ea>
 800989a:	6923      	ldr	r3, [r4, #16]
 800989c:	4642      	mov	r2, r8
 800989e:	4631      	mov	r1, r6
 80098a0:	4628      	mov	r0, r5
 80098a2:	47b8      	blx	r7
 80098a4:	3001      	adds	r0, #1
 80098a6:	d12b      	bne.n	8009900 <_printf_float+0x240>
 80098a8:	e767      	b.n	800977a <_printf_float+0xba>
 80098aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80098ae:	f240 80dc 	bls.w	8009a6a <_printf_float+0x3aa>
 80098b2:	2200      	movs	r2, #0
 80098b4:	2300      	movs	r3, #0
 80098b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098ba:	f7f7 f925 	bl	8000b08 <__aeabi_dcmpeq>
 80098be:	2800      	cmp	r0, #0
 80098c0:	d033      	beq.n	800992a <_printf_float+0x26a>
 80098c2:	2301      	movs	r3, #1
 80098c4:	4a41      	ldr	r2, [pc, #260]	; (80099cc <_printf_float+0x30c>)
 80098c6:	4631      	mov	r1, r6
 80098c8:	4628      	mov	r0, r5
 80098ca:	47b8      	blx	r7
 80098cc:	3001      	adds	r0, #1
 80098ce:	f43f af54 	beq.w	800977a <_printf_float+0xba>
 80098d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098d6:	429a      	cmp	r2, r3
 80098d8:	db02      	blt.n	80098e0 <_printf_float+0x220>
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	07d8      	lsls	r0, r3, #31
 80098de:	d50f      	bpl.n	8009900 <_printf_float+0x240>
 80098e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098e4:	4631      	mov	r1, r6
 80098e6:	4628      	mov	r0, r5
 80098e8:	47b8      	blx	r7
 80098ea:	3001      	adds	r0, #1
 80098ec:	f43f af45 	beq.w	800977a <_printf_float+0xba>
 80098f0:	f04f 0800 	mov.w	r8, #0
 80098f4:	f104 091a 	add.w	r9, r4, #26
 80098f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098fa:	3b01      	subs	r3, #1
 80098fc:	4543      	cmp	r3, r8
 80098fe:	dc09      	bgt.n	8009914 <_printf_float+0x254>
 8009900:	6823      	ldr	r3, [r4, #0]
 8009902:	079b      	lsls	r3, r3, #30
 8009904:	f100 8103 	bmi.w	8009b0e <_printf_float+0x44e>
 8009908:	68e0      	ldr	r0, [r4, #12]
 800990a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800990c:	4298      	cmp	r0, r3
 800990e:	bfb8      	it	lt
 8009910:	4618      	movlt	r0, r3
 8009912:	e734      	b.n	800977e <_printf_float+0xbe>
 8009914:	2301      	movs	r3, #1
 8009916:	464a      	mov	r2, r9
 8009918:	4631      	mov	r1, r6
 800991a:	4628      	mov	r0, r5
 800991c:	47b8      	blx	r7
 800991e:	3001      	adds	r0, #1
 8009920:	f43f af2b 	beq.w	800977a <_printf_float+0xba>
 8009924:	f108 0801 	add.w	r8, r8, #1
 8009928:	e7e6      	b.n	80098f8 <_printf_float+0x238>
 800992a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800992c:	2b00      	cmp	r3, #0
 800992e:	dc2b      	bgt.n	8009988 <_printf_float+0x2c8>
 8009930:	2301      	movs	r3, #1
 8009932:	4a26      	ldr	r2, [pc, #152]	; (80099cc <_printf_float+0x30c>)
 8009934:	4631      	mov	r1, r6
 8009936:	4628      	mov	r0, r5
 8009938:	47b8      	blx	r7
 800993a:	3001      	adds	r0, #1
 800993c:	f43f af1d 	beq.w	800977a <_printf_float+0xba>
 8009940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009942:	b923      	cbnz	r3, 800994e <_printf_float+0x28e>
 8009944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009946:	b913      	cbnz	r3, 800994e <_printf_float+0x28e>
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	07d9      	lsls	r1, r3, #31
 800994c:	d5d8      	bpl.n	8009900 <_printf_float+0x240>
 800994e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009952:	4631      	mov	r1, r6
 8009954:	4628      	mov	r0, r5
 8009956:	47b8      	blx	r7
 8009958:	3001      	adds	r0, #1
 800995a:	f43f af0e 	beq.w	800977a <_printf_float+0xba>
 800995e:	f04f 0900 	mov.w	r9, #0
 8009962:	f104 0a1a 	add.w	sl, r4, #26
 8009966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009968:	425b      	negs	r3, r3
 800996a:	454b      	cmp	r3, r9
 800996c:	dc01      	bgt.n	8009972 <_printf_float+0x2b2>
 800996e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009970:	e794      	b.n	800989c <_printf_float+0x1dc>
 8009972:	2301      	movs	r3, #1
 8009974:	4652      	mov	r2, sl
 8009976:	4631      	mov	r1, r6
 8009978:	4628      	mov	r0, r5
 800997a:	47b8      	blx	r7
 800997c:	3001      	adds	r0, #1
 800997e:	f43f aefc 	beq.w	800977a <_printf_float+0xba>
 8009982:	f109 0901 	add.w	r9, r9, #1
 8009986:	e7ee      	b.n	8009966 <_printf_float+0x2a6>
 8009988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800998a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800998c:	429a      	cmp	r2, r3
 800998e:	bfa8      	it	ge
 8009990:	461a      	movge	r2, r3
 8009992:	2a00      	cmp	r2, #0
 8009994:	4691      	mov	r9, r2
 8009996:	dd07      	ble.n	80099a8 <_printf_float+0x2e8>
 8009998:	4613      	mov	r3, r2
 800999a:	4631      	mov	r1, r6
 800999c:	4642      	mov	r2, r8
 800999e:	4628      	mov	r0, r5
 80099a0:	47b8      	blx	r7
 80099a2:	3001      	adds	r0, #1
 80099a4:	f43f aee9 	beq.w	800977a <_printf_float+0xba>
 80099a8:	f104 031a 	add.w	r3, r4, #26
 80099ac:	f04f 0b00 	mov.w	fp, #0
 80099b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099b4:	9306      	str	r3, [sp, #24]
 80099b6:	e015      	b.n	80099e4 <_printf_float+0x324>
 80099b8:	7fefffff 	.word	0x7fefffff
 80099bc:	0800b6a4 	.word	0x0800b6a4
 80099c0:	0800b6a0 	.word	0x0800b6a0
 80099c4:	0800b6ac 	.word	0x0800b6ac
 80099c8:	0800b6a8 	.word	0x0800b6a8
 80099cc:	0800b6b0 	.word	0x0800b6b0
 80099d0:	2301      	movs	r3, #1
 80099d2:	9a06      	ldr	r2, [sp, #24]
 80099d4:	4631      	mov	r1, r6
 80099d6:	4628      	mov	r0, r5
 80099d8:	47b8      	blx	r7
 80099da:	3001      	adds	r0, #1
 80099dc:	f43f aecd 	beq.w	800977a <_printf_float+0xba>
 80099e0:	f10b 0b01 	add.w	fp, fp, #1
 80099e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80099e8:	ebaa 0309 	sub.w	r3, sl, r9
 80099ec:	455b      	cmp	r3, fp
 80099ee:	dcef      	bgt.n	80099d0 <_printf_float+0x310>
 80099f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099f4:	429a      	cmp	r2, r3
 80099f6:	44d0      	add	r8, sl
 80099f8:	db15      	blt.n	8009a26 <_printf_float+0x366>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	07da      	lsls	r2, r3, #31
 80099fe:	d412      	bmi.n	8009a26 <_printf_float+0x366>
 8009a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a04:	eba3 020a 	sub.w	r2, r3, sl
 8009a08:	eba3 0a01 	sub.w	sl, r3, r1
 8009a0c:	4592      	cmp	sl, r2
 8009a0e:	bfa8      	it	ge
 8009a10:	4692      	movge	sl, r2
 8009a12:	f1ba 0f00 	cmp.w	sl, #0
 8009a16:	dc0e      	bgt.n	8009a36 <_printf_float+0x376>
 8009a18:	f04f 0800 	mov.w	r8, #0
 8009a1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a20:	f104 091a 	add.w	r9, r4, #26
 8009a24:	e019      	b.n	8009a5a <_printf_float+0x39a>
 8009a26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	47b8      	blx	r7
 8009a30:	3001      	adds	r0, #1
 8009a32:	d1e5      	bne.n	8009a00 <_printf_float+0x340>
 8009a34:	e6a1      	b.n	800977a <_printf_float+0xba>
 8009a36:	4653      	mov	r3, sl
 8009a38:	4642      	mov	r2, r8
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	47b8      	blx	r7
 8009a40:	3001      	adds	r0, #1
 8009a42:	d1e9      	bne.n	8009a18 <_printf_float+0x358>
 8009a44:	e699      	b.n	800977a <_printf_float+0xba>
 8009a46:	2301      	movs	r3, #1
 8009a48:	464a      	mov	r2, r9
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	47b8      	blx	r7
 8009a50:	3001      	adds	r0, #1
 8009a52:	f43f ae92 	beq.w	800977a <_printf_float+0xba>
 8009a56:	f108 0801 	add.w	r8, r8, #1
 8009a5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a5e:	1a9b      	subs	r3, r3, r2
 8009a60:	eba3 030a 	sub.w	r3, r3, sl
 8009a64:	4543      	cmp	r3, r8
 8009a66:	dcee      	bgt.n	8009a46 <_printf_float+0x386>
 8009a68:	e74a      	b.n	8009900 <_printf_float+0x240>
 8009a6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a6c:	2a01      	cmp	r2, #1
 8009a6e:	dc01      	bgt.n	8009a74 <_printf_float+0x3b4>
 8009a70:	07db      	lsls	r3, r3, #31
 8009a72:	d53a      	bpl.n	8009aea <_printf_float+0x42a>
 8009a74:	2301      	movs	r3, #1
 8009a76:	4642      	mov	r2, r8
 8009a78:	4631      	mov	r1, r6
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	47b8      	blx	r7
 8009a7e:	3001      	adds	r0, #1
 8009a80:	f43f ae7b 	beq.w	800977a <_printf_float+0xba>
 8009a84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a88:	4631      	mov	r1, r6
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	47b8      	blx	r7
 8009a8e:	3001      	adds	r0, #1
 8009a90:	f108 0801 	add.w	r8, r8, #1
 8009a94:	f43f ae71 	beq.w	800977a <_printf_float+0xba>
 8009a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f103 3aff 	add.w	sl, r3, #4294967295
 8009aa0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f7f7 f82f 	bl	8000b08 <__aeabi_dcmpeq>
 8009aaa:	b9c8      	cbnz	r0, 8009ae0 <_printf_float+0x420>
 8009aac:	4653      	mov	r3, sl
 8009aae:	4642      	mov	r2, r8
 8009ab0:	4631      	mov	r1, r6
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	47b8      	blx	r7
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	d10e      	bne.n	8009ad8 <_printf_float+0x418>
 8009aba:	e65e      	b.n	800977a <_printf_float+0xba>
 8009abc:	2301      	movs	r3, #1
 8009abe:	4652      	mov	r2, sl
 8009ac0:	4631      	mov	r1, r6
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	47b8      	blx	r7
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	f43f ae57 	beq.w	800977a <_printf_float+0xba>
 8009acc:	f108 0801 	add.w	r8, r8, #1
 8009ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	4543      	cmp	r3, r8
 8009ad6:	dcf1      	bgt.n	8009abc <_printf_float+0x3fc>
 8009ad8:	464b      	mov	r3, r9
 8009ada:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ade:	e6de      	b.n	800989e <_printf_float+0x1de>
 8009ae0:	f04f 0800 	mov.w	r8, #0
 8009ae4:	f104 0a1a 	add.w	sl, r4, #26
 8009ae8:	e7f2      	b.n	8009ad0 <_printf_float+0x410>
 8009aea:	2301      	movs	r3, #1
 8009aec:	e7df      	b.n	8009aae <_printf_float+0x3ee>
 8009aee:	2301      	movs	r3, #1
 8009af0:	464a      	mov	r2, r9
 8009af2:	4631      	mov	r1, r6
 8009af4:	4628      	mov	r0, r5
 8009af6:	47b8      	blx	r7
 8009af8:	3001      	adds	r0, #1
 8009afa:	f43f ae3e 	beq.w	800977a <_printf_float+0xba>
 8009afe:	f108 0801 	add.w	r8, r8, #1
 8009b02:	68e3      	ldr	r3, [r4, #12]
 8009b04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b06:	1a9b      	subs	r3, r3, r2
 8009b08:	4543      	cmp	r3, r8
 8009b0a:	dcf0      	bgt.n	8009aee <_printf_float+0x42e>
 8009b0c:	e6fc      	b.n	8009908 <_printf_float+0x248>
 8009b0e:	f04f 0800 	mov.w	r8, #0
 8009b12:	f104 0919 	add.w	r9, r4, #25
 8009b16:	e7f4      	b.n	8009b02 <_printf_float+0x442>
 8009b18:	2900      	cmp	r1, #0
 8009b1a:	f43f ae8b 	beq.w	8009834 <_printf_float+0x174>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009b24:	ab09      	add	r3, sp, #36	; 0x24
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	ec49 8b10 	vmov	d0, r8, r9
 8009b2c:	6022      	str	r2, [r4, #0]
 8009b2e:	f8cd a004 	str.w	sl, [sp, #4]
 8009b32:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b36:	4628      	mov	r0, r5
 8009b38:	f7ff fd2e 	bl	8009598 <__cvt>
 8009b3c:	4680      	mov	r8, r0
 8009b3e:	e648      	b.n	80097d2 <_printf_float+0x112>

08009b40 <_printf_common>:
 8009b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b44:	4691      	mov	r9, r2
 8009b46:	461f      	mov	r7, r3
 8009b48:	688a      	ldr	r2, [r1, #8]
 8009b4a:	690b      	ldr	r3, [r1, #16]
 8009b4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b50:	4293      	cmp	r3, r2
 8009b52:	bfb8      	it	lt
 8009b54:	4613      	movlt	r3, r2
 8009b56:	f8c9 3000 	str.w	r3, [r9]
 8009b5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b5e:	4606      	mov	r6, r0
 8009b60:	460c      	mov	r4, r1
 8009b62:	b112      	cbz	r2, 8009b6a <_printf_common+0x2a>
 8009b64:	3301      	adds	r3, #1
 8009b66:	f8c9 3000 	str.w	r3, [r9]
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	0699      	lsls	r1, r3, #26
 8009b6e:	bf42      	ittt	mi
 8009b70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009b74:	3302      	addmi	r3, #2
 8009b76:	f8c9 3000 	strmi.w	r3, [r9]
 8009b7a:	6825      	ldr	r5, [r4, #0]
 8009b7c:	f015 0506 	ands.w	r5, r5, #6
 8009b80:	d107      	bne.n	8009b92 <_printf_common+0x52>
 8009b82:	f104 0a19 	add.w	sl, r4, #25
 8009b86:	68e3      	ldr	r3, [r4, #12]
 8009b88:	f8d9 2000 	ldr.w	r2, [r9]
 8009b8c:	1a9b      	subs	r3, r3, r2
 8009b8e:	42ab      	cmp	r3, r5
 8009b90:	dc28      	bgt.n	8009be4 <_printf_common+0xa4>
 8009b92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009b96:	6822      	ldr	r2, [r4, #0]
 8009b98:	3300      	adds	r3, #0
 8009b9a:	bf18      	it	ne
 8009b9c:	2301      	movne	r3, #1
 8009b9e:	0692      	lsls	r2, r2, #26
 8009ba0:	d42d      	bmi.n	8009bfe <_printf_common+0xbe>
 8009ba2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	4630      	mov	r0, r6
 8009baa:	47c0      	blx	r8
 8009bac:	3001      	adds	r0, #1
 8009bae:	d020      	beq.n	8009bf2 <_printf_common+0xb2>
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	68e5      	ldr	r5, [r4, #12]
 8009bb4:	f8d9 2000 	ldr.w	r2, [r9]
 8009bb8:	f003 0306 	and.w	r3, r3, #6
 8009bbc:	2b04      	cmp	r3, #4
 8009bbe:	bf08      	it	eq
 8009bc0:	1aad      	subeq	r5, r5, r2
 8009bc2:	68a3      	ldr	r3, [r4, #8]
 8009bc4:	6922      	ldr	r2, [r4, #16]
 8009bc6:	bf0c      	ite	eq
 8009bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bcc:	2500      	movne	r5, #0
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	bfc4      	itt	gt
 8009bd2:	1a9b      	subgt	r3, r3, r2
 8009bd4:	18ed      	addgt	r5, r5, r3
 8009bd6:	f04f 0900 	mov.w	r9, #0
 8009bda:	341a      	adds	r4, #26
 8009bdc:	454d      	cmp	r5, r9
 8009bde:	d11a      	bne.n	8009c16 <_printf_common+0xd6>
 8009be0:	2000      	movs	r0, #0
 8009be2:	e008      	b.n	8009bf6 <_printf_common+0xb6>
 8009be4:	2301      	movs	r3, #1
 8009be6:	4652      	mov	r2, sl
 8009be8:	4639      	mov	r1, r7
 8009bea:	4630      	mov	r0, r6
 8009bec:	47c0      	blx	r8
 8009bee:	3001      	adds	r0, #1
 8009bf0:	d103      	bne.n	8009bfa <_printf_common+0xba>
 8009bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfa:	3501      	adds	r5, #1
 8009bfc:	e7c3      	b.n	8009b86 <_printf_common+0x46>
 8009bfe:	18e1      	adds	r1, r4, r3
 8009c00:	1c5a      	adds	r2, r3, #1
 8009c02:	2030      	movs	r0, #48	; 0x30
 8009c04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c08:	4422      	add	r2, r4
 8009c0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c12:	3302      	adds	r3, #2
 8009c14:	e7c5      	b.n	8009ba2 <_printf_common+0x62>
 8009c16:	2301      	movs	r3, #1
 8009c18:	4622      	mov	r2, r4
 8009c1a:	4639      	mov	r1, r7
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	47c0      	blx	r8
 8009c20:	3001      	adds	r0, #1
 8009c22:	d0e6      	beq.n	8009bf2 <_printf_common+0xb2>
 8009c24:	f109 0901 	add.w	r9, r9, #1
 8009c28:	e7d8      	b.n	8009bdc <_printf_common+0x9c>
	...

08009c2c <_printf_i>:
 8009c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009c34:	460c      	mov	r4, r1
 8009c36:	7e09      	ldrb	r1, [r1, #24]
 8009c38:	b085      	sub	sp, #20
 8009c3a:	296e      	cmp	r1, #110	; 0x6e
 8009c3c:	4617      	mov	r7, r2
 8009c3e:	4606      	mov	r6, r0
 8009c40:	4698      	mov	r8, r3
 8009c42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c44:	f000 80b3 	beq.w	8009dae <_printf_i+0x182>
 8009c48:	d822      	bhi.n	8009c90 <_printf_i+0x64>
 8009c4a:	2963      	cmp	r1, #99	; 0x63
 8009c4c:	d036      	beq.n	8009cbc <_printf_i+0x90>
 8009c4e:	d80a      	bhi.n	8009c66 <_printf_i+0x3a>
 8009c50:	2900      	cmp	r1, #0
 8009c52:	f000 80b9 	beq.w	8009dc8 <_printf_i+0x19c>
 8009c56:	2958      	cmp	r1, #88	; 0x58
 8009c58:	f000 8083 	beq.w	8009d62 <_printf_i+0x136>
 8009c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009c64:	e032      	b.n	8009ccc <_printf_i+0xa0>
 8009c66:	2964      	cmp	r1, #100	; 0x64
 8009c68:	d001      	beq.n	8009c6e <_printf_i+0x42>
 8009c6a:	2969      	cmp	r1, #105	; 0x69
 8009c6c:	d1f6      	bne.n	8009c5c <_printf_i+0x30>
 8009c6e:	6820      	ldr	r0, [r4, #0]
 8009c70:	6813      	ldr	r3, [r2, #0]
 8009c72:	0605      	lsls	r5, r0, #24
 8009c74:	f103 0104 	add.w	r1, r3, #4
 8009c78:	d52a      	bpl.n	8009cd0 <_printf_i+0xa4>
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6011      	str	r1, [r2, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	da03      	bge.n	8009c8a <_printf_i+0x5e>
 8009c82:	222d      	movs	r2, #45	; 0x2d
 8009c84:	425b      	negs	r3, r3
 8009c86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009c8a:	486f      	ldr	r0, [pc, #444]	; (8009e48 <_printf_i+0x21c>)
 8009c8c:	220a      	movs	r2, #10
 8009c8e:	e039      	b.n	8009d04 <_printf_i+0xd8>
 8009c90:	2973      	cmp	r1, #115	; 0x73
 8009c92:	f000 809d 	beq.w	8009dd0 <_printf_i+0x1a4>
 8009c96:	d808      	bhi.n	8009caa <_printf_i+0x7e>
 8009c98:	296f      	cmp	r1, #111	; 0x6f
 8009c9a:	d020      	beq.n	8009cde <_printf_i+0xb2>
 8009c9c:	2970      	cmp	r1, #112	; 0x70
 8009c9e:	d1dd      	bne.n	8009c5c <_printf_i+0x30>
 8009ca0:	6823      	ldr	r3, [r4, #0]
 8009ca2:	f043 0320 	orr.w	r3, r3, #32
 8009ca6:	6023      	str	r3, [r4, #0]
 8009ca8:	e003      	b.n	8009cb2 <_printf_i+0x86>
 8009caa:	2975      	cmp	r1, #117	; 0x75
 8009cac:	d017      	beq.n	8009cde <_printf_i+0xb2>
 8009cae:	2978      	cmp	r1, #120	; 0x78
 8009cb0:	d1d4      	bne.n	8009c5c <_printf_i+0x30>
 8009cb2:	2378      	movs	r3, #120	; 0x78
 8009cb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cb8:	4864      	ldr	r0, [pc, #400]	; (8009e4c <_printf_i+0x220>)
 8009cba:	e055      	b.n	8009d68 <_printf_i+0x13c>
 8009cbc:	6813      	ldr	r3, [r2, #0]
 8009cbe:	1d19      	adds	r1, r3, #4
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	6011      	str	r1, [r2, #0]
 8009cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e08c      	b.n	8009dea <_printf_i+0x1be>
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6011      	str	r1, [r2, #0]
 8009cd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009cd8:	bf18      	it	ne
 8009cda:	b21b      	sxthne	r3, r3
 8009cdc:	e7cf      	b.n	8009c7e <_printf_i+0x52>
 8009cde:	6813      	ldr	r3, [r2, #0]
 8009ce0:	6825      	ldr	r5, [r4, #0]
 8009ce2:	1d18      	adds	r0, r3, #4
 8009ce4:	6010      	str	r0, [r2, #0]
 8009ce6:	0628      	lsls	r0, r5, #24
 8009ce8:	d501      	bpl.n	8009cee <_printf_i+0xc2>
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	e002      	b.n	8009cf4 <_printf_i+0xc8>
 8009cee:	0668      	lsls	r0, r5, #25
 8009cf0:	d5fb      	bpl.n	8009cea <_printf_i+0xbe>
 8009cf2:	881b      	ldrh	r3, [r3, #0]
 8009cf4:	4854      	ldr	r0, [pc, #336]	; (8009e48 <_printf_i+0x21c>)
 8009cf6:	296f      	cmp	r1, #111	; 0x6f
 8009cf8:	bf14      	ite	ne
 8009cfa:	220a      	movne	r2, #10
 8009cfc:	2208      	moveq	r2, #8
 8009cfe:	2100      	movs	r1, #0
 8009d00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d04:	6865      	ldr	r5, [r4, #4]
 8009d06:	60a5      	str	r5, [r4, #8]
 8009d08:	2d00      	cmp	r5, #0
 8009d0a:	f2c0 8095 	blt.w	8009e38 <_printf_i+0x20c>
 8009d0e:	6821      	ldr	r1, [r4, #0]
 8009d10:	f021 0104 	bic.w	r1, r1, #4
 8009d14:	6021      	str	r1, [r4, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d13d      	bne.n	8009d96 <_printf_i+0x16a>
 8009d1a:	2d00      	cmp	r5, #0
 8009d1c:	f040 808e 	bne.w	8009e3c <_printf_i+0x210>
 8009d20:	4665      	mov	r5, ip
 8009d22:	2a08      	cmp	r2, #8
 8009d24:	d10b      	bne.n	8009d3e <_printf_i+0x112>
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	07db      	lsls	r3, r3, #31
 8009d2a:	d508      	bpl.n	8009d3e <_printf_i+0x112>
 8009d2c:	6923      	ldr	r3, [r4, #16]
 8009d2e:	6862      	ldr	r2, [r4, #4]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	bfde      	ittt	le
 8009d34:	2330      	movle	r3, #48	; 0x30
 8009d36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d3e:	ebac 0305 	sub.w	r3, ip, r5
 8009d42:	6123      	str	r3, [r4, #16]
 8009d44:	f8cd 8000 	str.w	r8, [sp]
 8009d48:	463b      	mov	r3, r7
 8009d4a:	aa03      	add	r2, sp, #12
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f7ff fef6 	bl	8009b40 <_printf_common>
 8009d54:	3001      	adds	r0, #1
 8009d56:	d14d      	bne.n	8009df4 <_printf_i+0x1c8>
 8009d58:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5c:	b005      	add	sp, #20
 8009d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d62:	4839      	ldr	r0, [pc, #228]	; (8009e48 <_printf_i+0x21c>)
 8009d64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009d68:	6813      	ldr	r3, [r2, #0]
 8009d6a:	6821      	ldr	r1, [r4, #0]
 8009d6c:	1d1d      	adds	r5, r3, #4
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6015      	str	r5, [r2, #0]
 8009d72:	060a      	lsls	r2, r1, #24
 8009d74:	d50b      	bpl.n	8009d8e <_printf_i+0x162>
 8009d76:	07ca      	lsls	r2, r1, #31
 8009d78:	bf44      	itt	mi
 8009d7a:	f041 0120 	orrmi.w	r1, r1, #32
 8009d7e:	6021      	strmi	r1, [r4, #0]
 8009d80:	b91b      	cbnz	r3, 8009d8a <_printf_i+0x15e>
 8009d82:	6822      	ldr	r2, [r4, #0]
 8009d84:	f022 0220 	bic.w	r2, r2, #32
 8009d88:	6022      	str	r2, [r4, #0]
 8009d8a:	2210      	movs	r2, #16
 8009d8c:	e7b7      	b.n	8009cfe <_printf_i+0xd2>
 8009d8e:	064d      	lsls	r5, r1, #25
 8009d90:	bf48      	it	mi
 8009d92:	b29b      	uxthmi	r3, r3
 8009d94:	e7ef      	b.n	8009d76 <_printf_i+0x14a>
 8009d96:	4665      	mov	r5, ip
 8009d98:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d9c:	fb02 3311 	mls	r3, r2, r1, r3
 8009da0:	5cc3      	ldrb	r3, [r0, r3]
 8009da2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009da6:	460b      	mov	r3, r1
 8009da8:	2900      	cmp	r1, #0
 8009daa:	d1f5      	bne.n	8009d98 <_printf_i+0x16c>
 8009dac:	e7b9      	b.n	8009d22 <_printf_i+0xf6>
 8009dae:	6813      	ldr	r3, [r2, #0]
 8009db0:	6825      	ldr	r5, [r4, #0]
 8009db2:	6961      	ldr	r1, [r4, #20]
 8009db4:	1d18      	adds	r0, r3, #4
 8009db6:	6010      	str	r0, [r2, #0]
 8009db8:	0628      	lsls	r0, r5, #24
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	d501      	bpl.n	8009dc2 <_printf_i+0x196>
 8009dbe:	6019      	str	r1, [r3, #0]
 8009dc0:	e002      	b.n	8009dc8 <_printf_i+0x19c>
 8009dc2:	066a      	lsls	r2, r5, #25
 8009dc4:	d5fb      	bpl.n	8009dbe <_printf_i+0x192>
 8009dc6:	8019      	strh	r1, [r3, #0]
 8009dc8:	2300      	movs	r3, #0
 8009dca:	6123      	str	r3, [r4, #16]
 8009dcc:	4665      	mov	r5, ip
 8009dce:	e7b9      	b.n	8009d44 <_printf_i+0x118>
 8009dd0:	6813      	ldr	r3, [r2, #0]
 8009dd2:	1d19      	adds	r1, r3, #4
 8009dd4:	6011      	str	r1, [r2, #0]
 8009dd6:	681d      	ldr	r5, [r3, #0]
 8009dd8:	6862      	ldr	r2, [r4, #4]
 8009dda:	2100      	movs	r1, #0
 8009ddc:	4628      	mov	r0, r5
 8009dde:	f7f6 fa1f 	bl	8000220 <memchr>
 8009de2:	b108      	cbz	r0, 8009de8 <_printf_i+0x1bc>
 8009de4:	1b40      	subs	r0, r0, r5
 8009de6:	6060      	str	r0, [r4, #4]
 8009de8:	6863      	ldr	r3, [r4, #4]
 8009dea:	6123      	str	r3, [r4, #16]
 8009dec:	2300      	movs	r3, #0
 8009dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009df2:	e7a7      	b.n	8009d44 <_printf_i+0x118>
 8009df4:	6923      	ldr	r3, [r4, #16]
 8009df6:	462a      	mov	r2, r5
 8009df8:	4639      	mov	r1, r7
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	47c0      	blx	r8
 8009dfe:	3001      	adds	r0, #1
 8009e00:	d0aa      	beq.n	8009d58 <_printf_i+0x12c>
 8009e02:	6823      	ldr	r3, [r4, #0]
 8009e04:	079b      	lsls	r3, r3, #30
 8009e06:	d413      	bmi.n	8009e30 <_printf_i+0x204>
 8009e08:	68e0      	ldr	r0, [r4, #12]
 8009e0a:	9b03      	ldr	r3, [sp, #12]
 8009e0c:	4298      	cmp	r0, r3
 8009e0e:	bfb8      	it	lt
 8009e10:	4618      	movlt	r0, r3
 8009e12:	e7a3      	b.n	8009d5c <_printf_i+0x130>
 8009e14:	2301      	movs	r3, #1
 8009e16:	464a      	mov	r2, r9
 8009e18:	4639      	mov	r1, r7
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	47c0      	blx	r8
 8009e1e:	3001      	adds	r0, #1
 8009e20:	d09a      	beq.n	8009d58 <_printf_i+0x12c>
 8009e22:	3501      	adds	r5, #1
 8009e24:	68e3      	ldr	r3, [r4, #12]
 8009e26:	9a03      	ldr	r2, [sp, #12]
 8009e28:	1a9b      	subs	r3, r3, r2
 8009e2a:	42ab      	cmp	r3, r5
 8009e2c:	dcf2      	bgt.n	8009e14 <_printf_i+0x1e8>
 8009e2e:	e7eb      	b.n	8009e08 <_printf_i+0x1dc>
 8009e30:	2500      	movs	r5, #0
 8009e32:	f104 0919 	add.w	r9, r4, #25
 8009e36:	e7f5      	b.n	8009e24 <_printf_i+0x1f8>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1ac      	bne.n	8009d96 <_printf_i+0x16a>
 8009e3c:	7803      	ldrb	r3, [r0, #0]
 8009e3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e46:	e76c      	b.n	8009d22 <_printf_i+0xf6>
 8009e48:	0800b6b2 	.word	0x0800b6b2
 8009e4c:	0800b6c3 	.word	0x0800b6c3

08009e50 <sniprintf>:
 8009e50:	b40c      	push	{r2, r3}
 8009e52:	b530      	push	{r4, r5, lr}
 8009e54:	4b17      	ldr	r3, [pc, #92]	; (8009eb4 <sniprintf+0x64>)
 8009e56:	1e0c      	subs	r4, r1, #0
 8009e58:	b09d      	sub	sp, #116	; 0x74
 8009e5a:	681d      	ldr	r5, [r3, #0]
 8009e5c:	da08      	bge.n	8009e70 <sniprintf+0x20>
 8009e5e:	238b      	movs	r3, #139	; 0x8b
 8009e60:	602b      	str	r3, [r5, #0]
 8009e62:	f04f 30ff 	mov.w	r0, #4294967295
 8009e66:	b01d      	add	sp, #116	; 0x74
 8009e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e6c:	b002      	add	sp, #8
 8009e6e:	4770      	bx	lr
 8009e70:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009e74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009e78:	bf14      	ite	ne
 8009e7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009e7e:	4623      	moveq	r3, r4
 8009e80:	9304      	str	r3, [sp, #16]
 8009e82:	9307      	str	r3, [sp, #28]
 8009e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e88:	9002      	str	r0, [sp, #8]
 8009e8a:	9006      	str	r0, [sp, #24]
 8009e8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009e90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e92:	ab21      	add	r3, sp, #132	; 0x84
 8009e94:	a902      	add	r1, sp, #8
 8009e96:	4628      	mov	r0, r5
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	f001 fa5d 	bl	800b358 <_svfiprintf_r>
 8009e9e:	1c43      	adds	r3, r0, #1
 8009ea0:	bfbc      	itt	lt
 8009ea2:	238b      	movlt	r3, #139	; 0x8b
 8009ea4:	602b      	strlt	r3, [r5, #0]
 8009ea6:	2c00      	cmp	r4, #0
 8009ea8:	d0dd      	beq.n	8009e66 <sniprintf+0x16>
 8009eaa:	9b02      	ldr	r3, [sp, #8]
 8009eac:	2200      	movs	r2, #0
 8009eae:	701a      	strb	r2, [r3, #0]
 8009eb0:	e7d9      	b.n	8009e66 <sniprintf+0x16>
 8009eb2:	bf00      	nop
 8009eb4:	20000034 	.word	0x20000034

08009eb8 <quorem>:
 8009eb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ebc:	6903      	ldr	r3, [r0, #16]
 8009ebe:	690c      	ldr	r4, [r1, #16]
 8009ec0:	42a3      	cmp	r3, r4
 8009ec2:	4680      	mov	r8, r0
 8009ec4:	f2c0 8082 	blt.w	8009fcc <quorem+0x114>
 8009ec8:	3c01      	subs	r4, #1
 8009eca:	f101 0714 	add.w	r7, r1, #20
 8009ece:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009ed2:	f100 0614 	add.w	r6, r0, #20
 8009ed6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009eda:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009ede:	eb06 030c 	add.w	r3, r6, ip
 8009ee2:	3501      	adds	r5, #1
 8009ee4:	eb07 090c 	add.w	r9, r7, ip
 8009ee8:	9301      	str	r3, [sp, #4]
 8009eea:	fbb0 f5f5 	udiv	r5, r0, r5
 8009eee:	b395      	cbz	r5, 8009f56 <quorem+0x9e>
 8009ef0:	f04f 0a00 	mov.w	sl, #0
 8009ef4:	4638      	mov	r0, r7
 8009ef6:	46b6      	mov	lr, r6
 8009ef8:	46d3      	mov	fp, sl
 8009efa:	f850 2b04 	ldr.w	r2, [r0], #4
 8009efe:	b293      	uxth	r3, r2
 8009f00:	fb05 a303 	mla	r3, r5, r3, sl
 8009f04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	ebab 0303 	sub.w	r3, fp, r3
 8009f0e:	0c12      	lsrs	r2, r2, #16
 8009f10:	f8de b000 	ldr.w	fp, [lr]
 8009f14:	fb05 a202 	mla	r2, r5, r2, sl
 8009f18:	fa13 f38b 	uxtah	r3, r3, fp
 8009f1c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009f20:	fa1f fb82 	uxth.w	fp, r2
 8009f24:	f8de 2000 	ldr.w	r2, [lr]
 8009f28:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009f2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f36:	4581      	cmp	r9, r0
 8009f38:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009f3c:	f84e 3b04 	str.w	r3, [lr], #4
 8009f40:	d2db      	bcs.n	8009efa <quorem+0x42>
 8009f42:	f856 300c 	ldr.w	r3, [r6, ip]
 8009f46:	b933      	cbnz	r3, 8009f56 <quorem+0x9e>
 8009f48:	9b01      	ldr	r3, [sp, #4]
 8009f4a:	3b04      	subs	r3, #4
 8009f4c:	429e      	cmp	r6, r3
 8009f4e:	461a      	mov	r2, r3
 8009f50:	d330      	bcc.n	8009fb4 <quorem+0xfc>
 8009f52:	f8c8 4010 	str.w	r4, [r8, #16]
 8009f56:	4640      	mov	r0, r8
 8009f58:	f001 f828 	bl	800afac <__mcmp>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	db25      	blt.n	8009fac <quorem+0xf4>
 8009f60:	3501      	adds	r5, #1
 8009f62:	4630      	mov	r0, r6
 8009f64:	f04f 0c00 	mov.w	ip, #0
 8009f68:	f857 2b04 	ldr.w	r2, [r7], #4
 8009f6c:	f8d0 e000 	ldr.w	lr, [r0]
 8009f70:	b293      	uxth	r3, r2
 8009f72:	ebac 0303 	sub.w	r3, ip, r3
 8009f76:	0c12      	lsrs	r2, r2, #16
 8009f78:	fa13 f38e 	uxtah	r3, r3, lr
 8009f7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f8a:	45b9      	cmp	r9, r7
 8009f8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f90:	f840 3b04 	str.w	r3, [r0], #4
 8009f94:	d2e8      	bcs.n	8009f68 <quorem+0xb0>
 8009f96:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009f9a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009f9e:	b92a      	cbnz	r2, 8009fac <quorem+0xf4>
 8009fa0:	3b04      	subs	r3, #4
 8009fa2:	429e      	cmp	r6, r3
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	d30b      	bcc.n	8009fc0 <quorem+0x108>
 8009fa8:	f8c8 4010 	str.w	r4, [r8, #16]
 8009fac:	4628      	mov	r0, r5
 8009fae:	b003      	add	sp, #12
 8009fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb4:	6812      	ldr	r2, [r2, #0]
 8009fb6:	3b04      	subs	r3, #4
 8009fb8:	2a00      	cmp	r2, #0
 8009fba:	d1ca      	bne.n	8009f52 <quorem+0x9a>
 8009fbc:	3c01      	subs	r4, #1
 8009fbe:	e7c5      	b.n	8009f4c <quorem+0x94>
 8009fc0:	6812      	ldr	r2, [r2, #0]
 8009fc2:	3b04      	subs	r3, #4
 8009fc4:	2a00      	cmp	r2, #0
 8009fc6:	d1ef      	bne.n	8009fa8 <quorem+0xf0>
 8009fc8:	3c01      	subs	r4, #1
 8009fca:	e7ea      	b.n	8009fa2 <quorem+0xea>
 8009fcc:	2000      	movs	r0, #0
 8009fce:	e7ee      	b.n	8009fae <quorem+0xf6>

08009fd0 <_dtoa_r>:
 8009fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd4:	ec57 6b10 	vmov	r6, r7, d0
 8009fd8:	b097      	sub	sp, #92	; 0x5c
 8009fda:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009fdc:	9106      	str	r1, [sp, #24]
 8009fde:	4604      	mov	r4, r0
 8009fe0:	920b      	str	r2, [sp, #44]	; 0x2c
 8009fe2:	9312      	str	r3, [sp, #72]	; 0x48
 8009fe4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009fe8:	e9cd 6700 	strd	r6, r7, [sp]
 8009fec:	b93d      	cbnz	r5, 8009ffe <_dtoa_r+0x2e>
 8009fee:	2010      	movs	r0, #16
 8009ff0:	f000 fdb4 	bl	800ab5c <malloc>
 8009ff4:	6260      	str	r0, [r4, #36]	; 0x24
 8009ff6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ffa:	6005      	str	r5, [r0, #0]
 8009ffc:	60c5      	str	r5, [r0, #12]
 8009ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a000:	6819      	ldr	r1, [r3, #0]
 800a002:	b151      	cbz	r1, 800a01a <_dtoa_r+0x4a>
 800a004:	685a      	ldr	r2, [r3, #4]
 800a006:	604a      	str	r2, [r1, #4]
 800a008:	2301      	movs	r3, #1
 800a00a:	4093      	lsls	r3, r2
 800a00c:	608b      	str	r3, [r1, #8]
 800a00e:	4620      	mov	r0, r4
 800a010:	f000 fdeb 	bl	800abea <_Bfree>
 800a014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a016:	2200      	movs	r2, #0
 800a018:	601a      	str	r2, [r3, #0]
 800a01a:	1e3b      	subs	r3, r7, #0
 800a01c:	bfbb      	ittet	lt
 800a01e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a022:	9301      	strlt	r3, [sp, #4]
 800a024:	2300      	movge	r3, #0
 800a026:	2201      	movlt	r2, #1
 800a028:	bfac      	ite	ge
 800a02a:	f8c8 3000 	strge.w	r3, [r8]
 800a02e:	f8c8 2000 	strlt.w	r2, [r8]
 800a032:	4baf      	ldr	r3, [pc, #700]	; (800a2f0 <_dtoa_r+0x320>)
 800a034:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a038:	ea33 0308 	bics.w	r3, r3, r8
 800a03c:	d114      	bne.n	800a068 <_dtoa_r+0x98>
 800a03e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a040:	f242 730f 	movw	r3, #9999	; 0x270f
 800a044:	6013      	str	r3, [r2, #0]
 800a046:	9b00      	ldr	r3, [sp, #0]
 800a048:	b923      	cbnz	r3, 800a054 <_dtoa_r+0x84>
 800a04a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a04e:	2800      	cmp	r0, #0
 800a050:	f000 8542 	beq.w	800aad8 <_dtoa_r+0xb08>
 800a054:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a056:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a304 <_dtoa_r+0x334>
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f000 8544 	beq.w	800aae8 <_dtoa_r+0xb18>
 800a060:	f10b 0303 	add.w	r3, fp, #3
 800a064:	f000 bd3e 	b.w	800aae4 <_dtoa_r+0xb14>
 800a068:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a06c:	2200      	movs	r2, #0
 800a06e:	2300      	movs	r3, #0
 800a070:	4630      	mov	r0, r6
 800a072:	4639      	mov	r1, r7
 800a074:	f7f6 fd48 	bl	8000b08 <__aeabi_dcmpeq>
 800a078:	4681      	mov	r9, r0
 800a07a:	b168      	cbz	r0, 800a098 <_dtoa_r+0xc8>
 800a07c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a07e:	2301      	movs	r3, #1
 800a080:	6013      	str	r3, [r2, #0]
 800a082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 8524 	beq.w	800aad2 <_dtoa_r+0xb02>
 800a08a:	4b9a      	ldr	r3, [pc, #616]	; (800a2f4 <_dtoa_r+0x324>)
 800a08c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a08e:	f103 3bff 	add.w	fp, r3, #4294967295
 800a092:	6013      	str	r3, [r2, #0]
 800a094:	f000 bd28 	b.w	800aae8 <_dtoa_r+0xb18>
 800a098:	aa14      	add	r2, sp, #80	; 0x50
 800a09a:	a915      	add	r1, sp, #84	; 0x54
 800a09c:	ec47 6b10 	vmov	d0, r6, r7
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f000 fffa 	bl	800b09a <__d2b>
 800a0a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a0aa:	9004      	str	r0, [sp, #16]
 800a0ac:	2d00      	cmp	r5, #0
 800a0ae:	d07c      	beq.n	800a1aa <_dtoa_r+0x1da>
 800a0b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a0b8:	46b2      	mov	sl, r6
 800a0ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a0be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a0c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	4b8b      	ldr	r3, [pc, #556]	; (800a2f8 <_dtoa_r+0x328>)
 800a0ca:	4650      	mov	r0, sl
 800a0cc:	4659      	mov	r1, fp
 800a0ce:	f7f6 f8fb 	bl	80002c8 <__aeabi_dsub>
 800a0d2:	a381      	add	r3, pc, #516	; (adr r3, 800a2d8 <_dtoa_r+0x308>)
 800a0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d8:	f7f6 faae 	bl	8000638 <__aeabi_dmul>
 800a0dc:	a380      	add	r3, pc, #512	; (adr r3, 800a2e0 <_dtoa_r+0x310>)
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	f7f6 f8f3 	bl	80002cc <__adddf3>
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	460f      	mov	r7, r1
 800a0ec:	f7f6 fa3a 	bl	8000564 <__aeabi_i2d>
 800a0f0:	a37d      	add	r3, pc, #500	; (adr r3, 800a2e8 <_dtoa_r+0x318>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f7f6 fa9f 	bl	8000638 <__aeabi_dmul>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	4630      	mov	r0, r6
 800a100:	4639      	mov	r1, r7
 800a102:	f7f6 f8e3 	bl	80002cc <__adddf3>
 800a106:	4606      	mov	r6, r0
 800a108:	460f      	mov	r7, r1
 800a10a:	f7f6 fd45 	bl	8000b98 <__aeabi_d2iz>
 800a10e:	2200      	movs	r2, #0
 800a110:	4682      	mov	sl, r0
 800a112:	2300      	movs	r3, #0
 800a114:	4630      	mov	r0, r6
 800a116:	4639      	mov	r1, r7
 800a118:	f7f6 fd00 	bl	8000b1c <__aeabi_dcmplt>
 800a11c:	b148      	cbz	r0, 800a132 <_dtoa_r+0x162>
 800a11e:	4650      	mov	r0, sl
 800a120:	f7f6 fa20 	bl	8000564 <__aeabi_i2d>
 800a124:	4632      	mov	r2, r6
 800a126:	463b      	mov	r3, r7
 800a128:	f7f6 fcee 	bl	8000b08 <__aeabi_dcmpeq>
 800a12c:	b908      	cbnz	r0, 800a132 <_dtoa_r+0x162>
 800a12e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a132:	f1ba 0f16 	cmp.w	sl, #22
 800a136:	d859      	bhi.n	800a1ec <_dtoa_r+0x21c>
 800a138:	4970      	ldr	r1, [pc, #448]	; (800a2fc <_dtoa_r+0x32c>)
 800a13a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a13e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a142:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a146:	f7f6 fd07 	bl	8000b58 <__aeabi_dcmpgt>
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d050      	beq.n	800a1f0 <_dtoa_r+0x220>
 800a14e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a152:	2300      	movs	r3, #0
 800a154:	930f      	str	r3, [sp, #60]	; 0x3c
 800a156:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a158:	1b5d      	subs	r5, r3, r5
 800a15a:	f1b5 0801 	subs.w	r8, r5, #1
 800a15e:	bf49      	itett	mi
 800a160:	f1c5 0301 	rsbmi	r3, r5, #1
 800a164:	2300      	movpl	r3, #0
 800a166:	9305      	strmi	r3, [sp, #20]
 800a168:	f04f 0800 	movmi.w	r8, #0
 800a16c:	bf58      	it	pl
 800a16e:	9305      	strpl	r3, [sp, #20]
 800a170:	f1ba 0f00 	cmp.w	sl, #0
 800a174:	db3e      	blt.n	800a1f4 <_dtoa_r+0x224>
 800a176:	2300      	movs	r3, #0
 800a178:	44d0      	add	r8, sl
 800a17a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a17e:	9307      	str	r3, [sp, #28]
 800a180:	9b06      	ldr	r3, [sp, #24]
 800a182:	2b09      	cmp	r3, #9
 800a184:	f200 8090 	bhi.w	800a2a8 <_dtoa_r+0x2d8>
 800a188:	2b05      	cmp	r3, #5
 800a18a:	bfc4      	itt	gt
 800a18c:	3b04      	subgt	r3, #4
 800a18e:	9306      	strgt	r3, [sp, #24]
 800a190:	9b06      	ldr	r3, [sp, #24]
 800a192:	f1a3 0302 	sub.w	r3, r3, #2
 800a196:	bfcc      	ite	gt
 800a198:	2500      	movgt	r5, #0
 800a19a:	2501      	movle	r5, #1
 800a19c:	2b03      	cmp	r3, #3
 800a19e:	f200 808f 	bhi.w	800a2c0 <_dtoa_r+0x2f0>
 800a1a2:	e8df f003 	tbb	[pc, r3]
 800a1a6:	7f7d      	.short	0x7f7d
 800a1a8:	7131      	.short	0x7131
 800a1aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a1ae:	441d      	add	r5, r3
 800a1b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a1b4:	2820      	cmp	r0, #32
 800a1b6:	dd13      	ble.n	800a1e0 <_dtoa_r+0x210>
 800a1b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a1bc:	9b00      	ldr	r3, [sp, #0]
 800a1be:	fa08 f800 	lsl.w	r8, r8, r0
 800a1c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a1c6:	fa23 f000 	lsr.w	r0, r3, r0
 800a1ca:	ea48 0000 	orr.w	r0, r8, r0
 800a1ce:	f7f6 f9b9 	bl	8000544 <__aeabi_ui2d>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	4682      	mov	sl, r0
 800a1d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a1da:	3d01      	subs	r5, #1
 800a1dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1de:	e772      	b.n	800a0c6 <_dtoa_r+0xf6>
 800a1e0:	9b00      	ldr	r3, [sp, #0]
 800a1e2:	f1c0 0020 	rsb	r0, r0, #32
 800a1e6:	fa03 f000 	lsl.w	r0, r3, r0
 800a1ea:	e7f0      	b.n	800a1ce <_dtoa_r+0x1fe>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e7b1      	b.n	800a154 <_dtoa_r+0x184>
 800a1f0:	900f      	str	r0, [sp, #60]	; 0x3c
 800a1f2:	e7b0      	b.n	800a156 <_dtoa_r+0x186>
 800a1f4:	9b05      	ldr	r3, [sp, #20]
 800a1f6:	eba3 030a 	sub.w	r3, r3, sl
 800a1fa:	9305      	str	r3, [sp, #20]
 800a1fc:	f1ca 0300 	rsb	r3, sl, #0
 800a200:	9307      	str	r3, [sp, #28]
 800a202:	2300      	movs	r3, #0
 800a204:	930e      	str	r3, [sp, #56]	; 0x38
 800a206:	e7bb      	b.n	800a180 <_dtoa_r+0x1b0>
 800a208:	2301      	movs	r3, #1
 800a20a:	930a      	str	r3, [sp, #40]	; 0x28
 800a20c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a20e:	2b00      	cmp	r3, #0
 800a210:	dd59      	ble.n	800a2c6 <_dtoa_r+0x2f6>
 800a212:	9302      	str	r3, [sp, #8]
 800a214:	4699      	mov	r9, r3
 800a216:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a218:	2200      	movs	r2, #0
 800a21a:	6072      	str	r2, [r6, #4]
 800a21c:	2204      	movs	r2, #4
 800a21e:	f102 0014 	add.w	r0, r2, #20
 800a222:	4298      	cmp	r0, r3
 800a224:	6871      	ldr	r1, [r6, #4]
 800a226:	d953      	bls.n	800a2d0 <_dtoa_r+0x300>
 800a228:	4620      	mov	r0, r4
 800a22a:	f000 fcaa 	bl	800ab82 <_Balloc>
 800a22e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a230:	6030      	str	r0, [r6, #0]
 800a232:	f1b9 0f0e 	cmp.w	r9, #14
 800a236:	f8d3 b000 	ldr.w	fp, [r3]
 800a23a:	f200 80e6 	bhi.w	800a40a <_dtoa_r+0x43a>
 800a23e:	2d00      	cmp	r5, #0
 800a240:	f000 80e3 	beq.w	800a40a <_dtoa_r+0x43a>
 800a244:	ed9d 7b00 	vldr	d7, [sp]
 800a248:	f1ba 0f00 	cmp.w	sl, #0
 800a24c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a250:	dd74      	ble.n	800a33c <_dtoa_r+0x36c>
 800a252:	4a2a      	ldr	r2, [pc, #168]	; (800a2fc <_dtoa_r+0x32c>)
 800a254:	f00a 030f 	and.w	r3, sl, #15
 800a258:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a25c:	ed93 7b00 	vldr	d7, [r3]
 800a260:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a264:	06f0      	lsls	r0, r6, #27
 800a266:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a26a:	d565      	bpl.n	800a338 <_dtoa_r+0x368>
 800a26c:	4b24      	ldr	r3, [pc, #144]	; (800a300 <_dtoa_r+0x330>)
 800a26e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a272:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a276:	f7f6 fb09 	bl	800088c <__aeabi_ddiv>
 800a27a:	e9cd 0100 	strd	r0, r1, [sp]
 800a27e:	f006 060f 	and.w	r6, r6, #15
 800a282:	2503      	movs	r5, #3
 800a284:	4f1e      	ldr	r7, [pc, #120]	; (800a300 <_dtoa_r+0x330>)
 800a286:	e04c      	b.n	800a322 <_dtoa_r+0x352>
 800a288:	2301      	movs	r3, #1
 800a28a:	930a      	str	r3, [sp, #40]	; 0x28
 800a28c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a28e:	4453      	add	r3, sl
 800a290:	f103 0901 	add.w	r9, r3, #1
 800a294:	9302      	str	r3, [sp, #8]
 800a296:	464b      	mov	r3, r9
 800a298:	2b01      	cmp	r3, #1
 800a29a:	bfb8      	it	lt
 800a29c:	2301      	movlt	r3, #1
 800a29e:	e7ba      	b.n	800a216 <_dtoa_r+0x246>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	e7b2      	b.n	800a20a <_dtoa_r+0x23a>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	e7f0      	b.n	800a28a <_dtoa_r+0x2ba>
 800a2a8:	2501      	movs	r5, #1
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	9306      	str	r3, [sp, #24]
 800a2ae:	950a      	str	r5, [sp, #40]	; 0x28
 800a2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b4:	9302      	str	r3, [sp, #8]
 800a2b6:	4699      	mov	r9, r3
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2312      	movs	r3, #18
 800a2bc:	920b      	str	r2, [sp, #44]	; 0x2c
 800a2be:	e7aa      	b.n	800a216 <_dtoa_r+0x246>
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	930a      	str	r3, [sp, #40]	; 0x28
 800a2c4:	e7f4      	b.n	800a2b0 <_dtoa_r+0x2e0>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	9302      	str	r3, [sp, #8]
 800a2ca:	4699      	mov	r9, r3
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	e7f5      	b.n	800a2bc <_dtoa_r+0x2ec>
 800a2d0:	3101      	adds	r1, #1
 800a2d2:	6071      	str	r1, [r6, #4]
 800a2d4:	0052      	lsls	r2, r2, #1
 800a2d6:	e7a2      	b.n	800a21e <_dtoa_r+0x24e>
 800a2d8:	636f4361 	.word	0x636f4361
 800a2dc:	3fd287a7 	.word	0x3fd287a7
 800a2e0:	8b60c8b3 	.word	0x8b60c8b3
 800a2e4:	3fc68a28 	.word	0x3fc68a28
 800a2e8:	509f79fb 	.word	0x509f79fb
 800a2ec:	3fd34413 	.word	0x3fd34413
 800a2f0:	7ff00000 	.word	0x7ff00000
 800a2f4:	0800b6b1 	.word	0x0800b6b1
 800a2f8:	3ff80000 	.word	0x3ff80000
 800a2fc:	0800b710 	.word	0x0800b710
 800a300:	0800b6e8 	.word	0x0800b6e8
 800a304:	0800b6dd 	.word	0x0800b6dd
 800a308:	07f1      	lsls	r1, r6, #31
 800a30a:	d508      	bpl.n	800a31e <_dtoa_r+0x34e>
 800a30c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a310:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a314:	f7f6 f990 	bl	8000638 <__aeabi_dmul>
 800a318:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a31c:	3501      	adds	r5, #1
 800a31e:	1076      	asrs	r6, r6, #1
 800a320:	3708      	adds	r7, #8
 800a322:	2e00      	cmp	r6, #0
 800a324:	d1f0      	bne.n	800a308 <_dtoa_r+0x338>
 800a326:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a32a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a32e:	f7f6 faad 	bl	800088c <__aeabi_ddiv>
 800a332:	e9cd 0100 	strd	r0, r1, [sp]
 800a336:	e01a      	b.n	800a36e <_dtoa_r+0x39e>
 800a338:	2502      	movs	r5, #2
 800a33a:	e7a3      	b.n	800a284 <_dtoa_r+0x2b4>
 800a33c:	f000 80a0 	beq.w	800a480 <_dtoa_r+0x4b0>
 800a340:	f1ca 0600 	rsb	r6, sl, #0
 800a344:	4b9f      	ldr	r3, [pc, #636]	; (800a5c4 <_dtoa_r+0x5f4>)
 800a346:	4fa0      	ldr	r7, [pc, #640]	; (800a5c8 <_dtoa_r+0x5f8>)
 800a348:	f006 020f 	and.w	r2, r6, #15
 800a34c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a358:	f7f6 f96e 	bl	8000638 <__aeabi_dmul>
 800a35c:	e9cd 0100 	strd	r0, r1, [sp]
 800a360:	1136      	asrs	r6, r6, #4
 800a362:	2300      	movs	r3, #0
 800a364:	2502      	movs	r5, #2
 800a366:	2e00      	cmp	r6, #0
 800a368:	d17f      	bne.n	800a46a <_dtoa_r+0x49a>
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1e1      	bne.n	800a332 <_dtoa_r+0x362>
 800a36e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 8087 	beq.w	800a484 <_dtoa_r+0x4b4>
 800a376:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a37a:	2200      	movs	r2, #0
 800a37c:	4b93      	ldr	r3, [pc, #588]	; (800a5cc <_dtoa_r+0x5fc>)
 800a37e:	4630      	mov	r0, r6
 800a380:	4639      	mov	r1, r7
 800a382:	f7f6 fbcb 	bl	8000b1c <__aeabi_dcmplt>
 800a386:	2800      	cmp	r0, #0
 800a388:	d07c      	beq.n	800a484 <_dtoa_r+0x4b4>
 800a38a:	f1b9 0f00 	cmp.w	r9, #0
 800a38e:	d079      	beq.n	800a484 <_dtoa_r+0x4b4>
 800a390:	9b02      	ldr	r3, [sp, #8]
 800a392:	2b00      	cmp	r3, #0
 800a394:	dd35      	ble.n	800a402 <_dtoa_r+0x432>
 800a396:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a39a:	9308      	str	r3, [sp, #32]
 800a39c:	4639      	mov	r1, r7
 800a39e:	2200      	movs	r2, #0
 800a3a0:	4b8b      	ldr	r3, [pc, #556]	; (800a5d0 <_dtoa_r+0x600>)
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f7f6 f948 	bl	8000638 <__aeabi_dmul>
 800a3a8:	e9cd 0100 	strd	r0, r1, [sp]
 800a3ac:	9f02      	ldr	r7, [sp, #8]
 800a3ae:	3501      	adds	r5, #1
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	f7f6 f8d7 	bl	8000564 <__aeabi_i2d>
 800a3b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3ba:	f7f6 f93d 	bl	8000638 <__aeabi_dmul>
 800a3be:	2200      	movs	r2, #0
 800a3c0:	4b84      	ldr	r3, [pc, #528]	; (800a5d4 <_dtoa_r+0x604>)
 800a3c2:	f7f5 ff83 	bl	80002cc <__adddf3>
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a3cc:	2f00      	cmp	r7, #0
 800a3ce:	d15d      	bne.n	800a48c <_dtoa_r+0x4bc>
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	4b81      	ldr	r3, [pc, #516]	; (800a5d8 <_dtoa_r+0x608>)
 800a3d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3d8:	f7f5 ff76 	bl	80002c8 <__aeabi_dsub>
 800a3dc:	462a      	mov	r2, r5
 800a3de:	4633      	mov	r3, r6
 800a3e0:	e9cd 0100 	strd	r0, r1, [sp]
 800a3e4:	f7f6 fbb8 	bl	8000b58 <__aeabi_dcmpgt>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	f040 8288 	bne.w	800a8fe <_dtoa_r+0x92e>
 800a3ee:	462a      	mov	r2, r5
 800a3f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a3f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3f8:	f7f6 fb90 	bl	8000b1c <__aeabi_dcmplt>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	f040 827c 	bne.w	800a8fa <_dtoa_r+0x92a>
 800a402:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a406:	e9cd 2300 	strd	r2, r3, [sp]
 800a40a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f2c0 8150 	blt.w	800a6b2 <_dtoa_r+0x6e2>
 800a412:	f1ba 0f0e 	cmp.w	sl, #14
 800a416:	f300 814c 	bgt.w	800a6b2 <_dtoa_r+0x6e2>
 800a41a:	4b6a      	ldr	r3, [pc, #424]	; (800a5c4 <_dtoa_r+0x5f4>)
 800a41c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a420:	ed93 7b00 	vldr	d7, [r3]
 800a424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a426:	2b00      	cmp	r3, #0
 800a428:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a42c:	f280 80d8 	bge.w	800a5e0 <_dtoa_r+0x610>
 800a430:	f1b9 0f00 	cmp.w	r9, #0
 800a434:	f300 80d4 	bgt.w	800a5e0 <_dtoa_r+0x610>
 800a438:	f040 825e 	bne.w	800a8f8 <_dtoa_r+0x928>
 800a43c:	2200      	movs	r2, #0
 800a43e:	4b66      	ldr	r3, [pc, #408]	; (800a5d8 <_dtoa_r+0x608>)
 800a440:	ec51 0b17 	vmov	r0, r1, d7
 800a444:	f7f6 f8f8 	bl	8000638 <__aeabi_dmul>
 800a448:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a44c:	f7f6 fb7a 	bl	8000b44 <__aeabi_dcmpge>
 800a450:	464f      	mov	r7, r9
 800a452:	464e      	mov	r6, r9
 800a454:	2800      	cmp	r0, #0
 800a456:	f040 8234 	bne.w	800a8c2 <_dtoa_r+0x8f2>
 800a45a:	2331      	movs	r3, #49	; 0x31
 800a45c:	f10b 0501 	add.w	r5, fp, #1
 800a460:	f88b 3000 	strb.w	r3, [fp]
 800a464:	f10a 0a01 	add.w	sl, sl, #1
 800a468:	e22f      	b.n	800a8ca <_dtoa_r+0x8fa>
 800a46a:	07f2      	lsls	r2, r6, #31
 800a46c:	d505      	bpl.n	800a47a <_dtoa_r+0x4aa>
 800a46e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a472:	f7f6 f8e1 	bl	8000638 <__aeabi_dmul>
 800a476:	3501      	adds	r5, #1
 800a478:	2301      	movs	r3, #1
 800a47a:	1076      	asrs	r6, r6, #1
 800a47c:	3708      	adds	r7, #8
 800a47e:	e772      	b.n	800a366 <_dtoa_r+0x396>
 800a480:	2502      	movs	r5, #2
 800a482:	e774      	b.n	800a36e <_dtoa_r+0x39e>
 800a484:	f8cd a020 	str.w	sl, [sp, #32]
 800a488:	464f      	mov	r7, r9
 800a48a:	e791      	b.n	800a3b0 <_dtoa_r+0x3e0>
 800a48c:	4b4d      	ldr	r3, [pc, #308]	; (800a5c4 <_dtoa_r+0x5f4>)
 800a48e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a492:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d047      	beq.n	800a52c <_dtoa_r+0x55c>
 800a49c:	4602      	mov	r2, r0
 800a49e:	460b      	mov	r3, r1
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	494e      	ldr	r1, [pc, #312]	; (800a5dc <_dtoa_r+0x60c>)
 800a4a4:	f7f6 f9f2 	bl	800088c <__aeabi_ddiv>
 800a4a8:	462a      	mov	r2, r5
 800a4aa:	4633      	mov	r3, r6
 800a4ac:	f7f5 ff0c 	bl	80002c8 <__aeabi_dsub>
 800a4b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a4b4:	465d      	mov	r5, fp
 800a4b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4ba:	f7f6 fb6d 	bl	8000b98 <__aeabi_d2iz>
 800a4be:	4606      	mov	r6, r0
 800a4c0:	f7f6 f850 	bl	8000564 <__aeabi_i2d>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4cc:	f7f5 fefc 	bl	80002c8 <__aeabi_dsub>
 800a4d0:	3630      	adds	r6, #48	; 0x30
 800a4d2:	f805 6b01 	strb.w	r6, [r5], #1
 800a4d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a4da:	e9cd 0100 	strd	r0, r1, [sp]
 800a4de:	f7f6 fb1d 	bl	8000b1c <__aeabi_dcmplt>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d163      	bne.n	800a5ae <_dtoa_r+0x5de>
 800a4e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	4937      	ldr	r1, [pc, #220]	; (800a5cc <_dtoa_r+0x5fc>)
 800a4ee:	f7f5 feeb 	bl	80002c8 <__aeabi_dsub>
 800a4f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a4f6:	f7f6 fb11 	bl	8000b1c <__aeabi_dcmplt>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	f040 80b7 	bne.w	800a66e <_dtoa_r+0x69e>
 800a500:	eba5 030b 	sub.w	r3, r5, fp
 800a504:	429f      	cmp	r7, r3
 800a506:	f77f af7c 	ble.w	800a402 <_dtoa_r+0x432>
 800a50a:	2200      	movs	r2, #0
 800a50c:	4b30      	ldr	r3, [pc, #192]	; (800a5d0 <_dtoa_r+0x600>)
 800a50e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a512:	f7f6 f891 	bl	8000638 <__aeabi_dmul>
 800a516:	2200      	movs	r2, #0
 800a518:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a51c:	4b2c      	ldr	r3, [pc, #176]	; (800a5d0 <_dtoa_r+0x600>)
 800a51e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a522:	f7f6 f889 	bl	8000638 <__aeabi_dmul>
 800a526:	e9cd 0100 	strd	r0, r1, [sp]
 800a52a:	e7c4      	b.n	800a4b6 <_dtoa_r+0x4e6>
 800a52c:	462a      	mov	r2, r5
 800a52e:	4633      	mov	r3, r6
 800a530:	f7f6 f882 	bl	8000638 <__aeabi_dmul>
 800a534:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a538:	eb0b 0507 	add.w	r5, fp, r7
 800a53c:	465e      	mov	r6, fp
 800a53e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a542:	f7f6 fb29 	bl	8000b98 <__aeabi_d2iz>
 800a546:	4607      	mov	r7, r0
 800a548:	f7f6 f80c 	bl	8000564 <__aeabi_i2d>
 800a54c:	3730      	adds	r7, #48	; 0x30
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a556:	f7f5 feb7 	bl	80002c8 <__aeabi_dsub>
 800a55a:	f806 7b01 	strb.w	r7, [r6], #1
 800a55e:	42ae      	cmp	r6, r5
 800a560:	e9cd 0100 	strd	r0, r1, [sp]
 800a564:	f04f 0200 	mov.w	r2, #0
 800a568:	d126      	bne.n	800a5b8 <_dtoa_r+0x5e8>
 800a56a:	4b1c      	ldr	r3, [pc, #112]	; (800a5dc <_dtoa_r+0x60c>)
 800a56c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a570:	f7f5 feac 	bl	80002cc <__adddf3>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a57c:	f7f6 faec 	bl	8000b58 <__aeabi_dcmpgt>
 800a580:	2800      	cmp	r0, #0
 800a582:	d174      	bne.n	800a66e <_dtoa_r+0x69e>
 800a584:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a588:	2000      	movs	r0, #0
 800a58a:	4914      	ldr	r1, [pc, #80]	; (800a5dc <_dtoa_r+0x60c>)
 800a58c:	f7f5 fe9c 	bl	80002c8 <__aeabi_dsub>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a598:	f7f6 fac0 	bl	8000b1c <__aeabi_dcmplt>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	f43f af30 	beq.w	800a402 <_dtoa_r+0x432>
 800a5a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5a6:	2b30      	cmp	r3, #48	; 0x30
 800a5a8:	f105 32ff 	add.w	r2, r5, #4294967295
 800a5ac:	d002      	beq.n	800a5b4 <_dtoa_r+0x5e4>
 800a5ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a5b2:	e04a      	b.n	800a64a <_dtoa_r+0x67a>
 800a5b4:	4615      	mov	r5, r2
 800a5b6:	e7f4      	b.n	800a5a2 <_dtoa_r+0x5d2>
 800a5b8:	4b05      	ldr	r3, [pc, #20]	; (800a5d0 <_dtoa_r+0x600>)
 800a5ba:	f7f6 f83d 	bl	8000638 <__aeabi_dmul>
 800a5be:	e9cd 0100 	strd	r0, r1, [sp]
 800a5c2:	e7bc      	b.n	800a53e <_dtoa_r+0x56e>
 800a5c4:	0800b710 	.word	0x0800b710
 800a5c8:	0800b6e8 	.word	0x0800b6e8
 800a5cc:	3ff00000 	.word	0x3ff00000
 800a5d0:	40240000 	.word	0x40240000
 800a5d4:	401c0000 	.word	0x401c0000
 800a5d8:	40140000 	.word	0x40140000
 800a5dc:	3fe00000 	.word	0x3fe00000
 800a5e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a5e4:	465d      	mov	r5, fp
 800a5e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	4639      	mov	r1, r7
 800a5ee:	f7f6 f94d 	bl	800088c <__aeabi_ddiv>
 800a5f2:	f7f6 fad1 	bl	8000b98 <__aeabi_d2iz>
 800a5f6:	4680      	mov	r8, r0
 800a5f8:	f7f5 ffb4 	bl	8000564 <__aeabi_i2d>
 800a5fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a600:	f7f6 f81a 	bl	8000638 <__aeabi_dmul>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4630      	mov	r0, r6
 800a60a:	4639      	mov	r1, r7
 800a60c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a610:	f7f5 fe5a 	bl	80002c8 <__aeabi_dsub>
 800a614:	f805 6b01 	strb.w	r6, [r5], #1
 800a618:	eba5 060b 	sub.w	r6, r5, fp
 800a61c:	45b1      	cmp	r9, r6
 800a61e:	4602      	mov	r2, r0
 800a620:	460b      	mov	r3, r1
 800a622:	d139      	bne.n	800a698 <_dtoa_r+0x6c8>
 800a624:	f7f5 fe52 	bl	80002cc <__adddf3>
 800a628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a62c:	4606      	mov	r6, r0
 800a62e:	460f      	mov	r7, r1
 800a630:	f7f6 fa92 	bl	8000b58 <__aeabi_dcmpgt>
 800a634:	b9c8      	cbnz	r0, 800a66a <_dtoa_r+0x69a>
 800a636:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a63a:	4630      	mov	r0, r6
 800a63c:	4639      	mov	r1, r7
 800a63e:	f7f6 fa63 	bl	8000b08 <__aeabi_dcmpeq>
 800a642:	b110      	cbz	r0, 800a64a <_dtoa_r+0x67a>
 800a644:	f018 0f01 	tst.w	r8, #1
 800a648:	d10f      	bne.n	800a66a <_dtoa_r+0x69a>
 800a64a:	9904      	ldr	r1, [sp, #16]
 800a64c:	4620      	mov	r0, r4
 800a64e:	f000 facc 	bl	800abea <_Bfree>
 800a652:	2300      	movs	r3, #0
 800a654:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a656:	702b      	strb	r3, [r5, #0]
 800a658:	f10a 0301 	add.w	r3, sl, #1
 800a65c:	6013      	str	r3, [r2, #0]
 800a65e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a660:	2b00      	cmp	r3, #0
 800a662:	f000 8241 	beq.w	800aae8 <_dtoa_r+0xb18>
 800a666:	601d      	str	r5, [r3, #0]
 800a668:	e23e      	b.n	800aae8 <_dtoa_r+0xb18>
 800a66a:	f8cd a020 	str.w	sl, [sp, #32]
 800a66e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a672:	2a39      	cmp	r2, #57	; 0x39
 800a674:	f105 33ff 	add.w	r3, r5, #4294967295
 800a678:	d108      	bne.n	800a68c <_dtoa_r+0x6bc>
 800a67a:	459b      	cmp	fp, r3
 800a67c:	d10a      	bne.n	800a694 <_dtoa_r+0x6c4>
 800a67e:	9b08      	ldr	r3, [sp, #32]
 800a680:	3301      	adds	r3, #1
 800a682:	9308      	str	r3, [sp, #32]
 800a684:	2330      	movs	r3, #48	; 0x30
 800a686:	f88b 3000 	strb.w	r3, [fp]
 800a68a:	465b      	mov	r3, fp
 800a68c:	781a      	ldrb	r2, [r3, #0]
 800a68e:	3201      	adds	r2, #1
 800a690:	701a      	strb	r2, [r3, #0]
 800a692:	e78c      	b.n	800a5ae <_dtoa_r+0x5de>
 800a694:	461d      	mov	r5, r3
 800a696:	e7ea      	b.n	800a66e <_dtoa_r+0x69e>
 800a698:	2200      	movs	r2, #0
 800a69a:	4b9b      	ldr	r3, [pc, #620]	; (800a908 <_dtoa_r+0x938>)
 800a69c:	f7f5 ffcc 	bl	8000638 <__aeabi_dmul>
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	4606      	mov	r6, r0
 800a6a6:	460f      	mov	r7, r1
 800a6a8:	f7f6 fa2e 	bl	8000b08 <__aeabi_dcmpeq>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d09a      	beq.n	800a5e6 <_dtoa_r+0x616>
 800a6b0:	e7cb      	b.n	800a64a <_dtoa_r+0x67a>
 800a6b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6b4:	2a00      	cmp	r2, #0
 800a6b6:	f000 808b 	beq.w	800a7d0 <_dtoa_r+0x800>
 800a6ba:	9a06      	ldr	r2, [sp, #24]
 800a6bc:	2a01      	cmp	r2, #1
 800a6be:	dc6e      	bgt.n	800a79e <_dtoa_r+0x7ce>
 800a6c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6c2:	2a00      	cmp	r2, #0
 800a6c4:	d067      	beq.n	800a796 <_dtoa_r+0x7c6>
 800a6c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6ca:	9f07      	ldr	r7, [sp, #28]
 800a6cc:	9d05      	ldr	r5, [sp, #20]
 800a6ce:	9a05      	ldr	r2, [sp, #20]
 800a6d0:	2101      	movs	r1, #1
 800a6d2:	441a      	add	r2, r3
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	9205      	str	r2, [sp, #20]
 800a6d8:	4498      	add	r8, r3
 800a6da:	f000 fb26 	bl	800ad2a <__i2b>
 800a6de:	4606      	mov	r6, r0
 800a6e0:	2d00      	cmp	r5, #0
 800a6e2:	dd0c      	ble.n	800a6fe <_dtoa_r+0x72e>
 800a6e4:	f1b8 0f00 	cmp.w	r8, #0
 800a6e8:	dd09      	ble.n	800a6fe <_dtoa_r+0x72e>
 800a6ea:	4545      	cmp	r5, r8
 800a6ec:	9a05      	ldr	r2, [sp, #20]
 800a6ee:	462b      	mov	r3, r5
 800a6f0:	bfa8      	it	ge
 800a6f2:	4643      	movge	r3, r8
 800a6f4:	1ad2      	subs	r2, r2, r3
 800a6f6:	9205      	str	r2, [sp, #20]
 800a6f8:	1aed      	subs	r5, r5, r3
 800a6fa:	eba8 0803 	sub.w	r8, r8, r3
 800a6fe:	9b07      	ldr	r3, [sp, #28]
 800a700:	b1eb      	cbz	r3, 800a73e <_dtoa_r+0x76e>
 800a702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a704:	2b00      	cmp	r3, #0
 800a706:	d067      	beq.n	800a7d8 <_dtoa_r+0x808>
 800a708:	b18f      	cbz	r7, 800a72e <_dtoa_r+0x75e>
 800a70a:	4631      	mov	r1, r6
 800a70c:	463a      	mov	r2, r7
 800a70e:	4620      	mov	r0, r4
 800a710:	f000 fbaa 	bl	800ae68 <__pow5mult>
 800a714:	9a04      	ldr	r2, [sp, #16]
 800a716:	4601      	mov	r1, r0
 800a718:	4606      	mov	r6, r0
 800a71a:	4620      	mov	r0, r4
 800a71c:	f000 fb0e 	bl	800ad3c <__multiply>
 800a720:	9904      	ldr	r1, [sp, #16]
 800a722:	9008      	str	r0, [sp, #32]
 800a724:	4620      	mov	r0, r4
 800a726:	f000 fa60 	bl	800abea <_Bfree>
 800a72a:	9b08      	ldr	r3, [sp, #32]
 800a72c:	9304      	str	r3, [sp, #16]
 800a72e:	9b07      	ldr	r3, [sp, #28]
 800a730:	1bda      	subs	r2, r3, r7
 800a732:	d004      	beq.n	800a73e <_dtoa_r+0x76e>
 800a734:	9904      	ldr	r1, [sp, #16]
 800a736:	4620      	mov	r0, r4
 800a738:	f000 fb96 	bl	800ae68 <__pow5mult>
 800a73c:	9004      	str	r0, [sp, #16]
 800a73e:	2101      	movs	r1, #1
 800a740:	4620      	mov	r0, r4
 800a742:	f000 faf2 	bl	800ad2a <__i2b>
 800a746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a748:	4607      	mov	r7, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f000 81d0 	beq.w	800aaf0 <_dtoa_r+0xb20>
 800a750:	461a      	mov	r2, r3
 800a752:	4601      	mov	r1, r0
 800a754:	4620      	mov	r0, r4
 800a756:	f000 fb87 	bl	800ae68 <__pow5mult>
 800a75a:	9b06      	ldr	r3, [sp, #24]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	4607      	mov	r7, r0
 800a760:	dc40      	bgt.n	800a7e4 <_dtoa_r+0x814>
 800a762:	9b00      	ldr	r3, [sp, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d139      	bne.n	800a7dc <_dtoa_r+0x80c>
 800a768:	9b01      	ldr	r3, [sp, #4]
 800a76a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d136      	bne.n	800a7e0 <_dtoa_r+0x810>
 800a772:	9b01      	ldr	r3, [sp, #4]
 800a774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a778:	0d1b      	lsrs	r3, r3, #20
 800a77a:	051b      	lsls	r3, r3, #20
 800a77c:	b12b      	cbz	r3, 800a78a <_dtoa_r+0x7ba>
 800a77e:	9b05      	ldr	r3, [sp, #20]
 800a780:	3301      	adds	r3, #1
 800a782:	9305      	str	r3, [sp, #20]
 800a784:	f108 0801 	add.w	r8, r8, #1
 800a788:	2301      	movs	r3, #1
 800a78a:	9307      	str	r3, [sp, #28]
 800a78c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d12a      	bne.n	800a7e8 <_dtoa_r+0x818>
 800a792:	2001      	movs	r0, #1
 800a794:	e030      	b.n	800a7f8 <_dtoa_r+0x828>
 800a796:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a798:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a79c:	e795      	b.n	800a6ca <_dtoa_r+0x6fa>
 800a79e:	9b07      	ldr	r3, [sp, #28]
 800a7a0:	f109 37ff 	add.w	r7, r9, #4294967295
 800a7a4:	42bb      	cmp	r3, r7
 800a7a6:	bfbf      	itttt	lt
 800a7a8:	9b07      	ldrlt	r3, [sp, #28]
 800a7aa:	9707      	strlt	r7, [sp, #28]
 800a7ac:	1afa      	sublt	r2, r7, r3
 800a7ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a7b0:	bfbb      	ittet	lt
 800a7b2:	189b      	addlt	r3, r3, r2
 800a7b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a7b6:	1bdf      	subge	r7, r3, r7
 800a7b8:	2700      	movlt	r7, #0
 800a7ba:	f1b9 0f00 	cmp.w	r9, #0
 800a7be:	bfb5      	itete	lt
 800a7c0:	9b05      	ldrlt	r3, [sp, #20]
 800a7c2:	9d05      	ldrge	r5, [sp, #20]
 800a7c4:	eba3 0509 	sublt.w	r5, r3, r9
 800a7c8:	464b      	movge	r3, r9
 800a7ca:	bfb8      	it	lt
 800a7cc:	2300      	movlt	r3, #0
 800a7ce:	e77e      	b.n	800a6ce <_dtoa_r+0x6fe>
 800a7d0:	9f07      	ldr	r7, [sp, #28]
 800a7d2:	9d05      	ldr	r5, [sp, #20]
 800a7d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a7d6:	e783      	b.n	800a6e0 <_dtoa_r+0x710>
 800a7d8:	9a07      	ldr	r2, [sp, #28]
 800a7da:	e7ab      	b.n	800a734 <_dtoa_r+0x764>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	e7d4      	b.n	800a78a <_dtoa_r+0x7ba>
 800a7e0:	9b00      	ldr	r3, [sp, #0]
 800a7e2:	e7d2      	b.n	800a78a <_dtoa_r+0x7ba>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	9307      	str	r3, [sp, #28]
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a7ee:	6918      	ldr	r0, [r3, #16]
 800a7f0:	f000 fa4d 	bl	800ac8e <__hi0bits>
 800a7f4:	f1c0 0020 	rsb	r0, r0, #32
 800a7f8:	4440      	add	r0, r8
 800a7fa:	f010 001f 	ands.w	r0, r0, #31
 800a7fe:	d047      	beq.n	800a890 <_dtoa_r+0x8c0>
 800a800:	f1c0 0320 	rsb	r3, r0, #32
 800a804:	2b04      	cmp	r3, #4
 800a806:	dd3b      	ble.n	800a880 <_dtoa_r+0x8b0>
 800a808:	9b05      	ldr	r3, [sp, #20]
 800a80a:	f1c0 001c 	rsb	r0, r0, #28
 800a80e:	4403      	add	r3, r0
 800a810:	9305      	str	r3, [sp, #20]
 800a812:	4405      	add	r5, r0
 800a814:	4480      	add	r8, r0
 800a816:	9b05      	ldr	r3, [sp, #20]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	dd05      	ble.n	800a828 <_dtoa_r+0x858>
 800a81c:	461a      	mov	r2, r3
 800a81e:	9904      	ldr	r1, [sp, #16]
 800a820:	4620      	mov	r0, r4
 800a822:	f000 fb6f 	bl	800af04 <__lshift>
 800a826:	9004      	str	r0, [sp, #16]
 800a828:	f1b8 0f00 	cmp.w	r8, #0
 800a82c:	dd05      	ble.n	800a83a <_dtoa_r+0x86a>
 800a82e:	4639      	mov	r1, r7
 800a830:	4642      	mov	r2, r8
 800a832:	4620      	mov	r0, r4
 800a834:	f000 fb66 	bl	800af04 <__lshift>
 800a838:	4607      	mov	r7, r0
 800a83a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a83c:	b353      	cbz	r3, 800a894 <_dtoa_r+0x8c4>
 800a83e:	4639      	mov	r1, r7
 800a840:	9804      	ldr	r0, [sp, #16]
 800a842:	f000 fbb3 	bl	800afac <__mcmp>
 800a846:	2800      	cmp	r0, #0
 800a848:	da24      	bge.n	800a894 <_dtoa_r+0x8c4>
 800a84a:	2300      	movs	r3, #0
 800a84c:	220a      	movs	r2, #10
 800a84e:	9904      	ldr	r1, [sp, #16]
 800a850:	4620      	mov	r0, r4
 800a852:	f000 f9e1 	bl	800ac18 <__multadd>
 800a856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a858:	9004      	str	r0, [sp, #16]
 800a85a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f000 814d 	beq.w	800aafe <_dtoa_r+0xb2e>
 800a864:	2300      	movs	r3, #0
 800a866:	4631      	mov	r1, r6
 800a868:	220a      	movs	r2, #10
 800a86a:	4620      	mov	r0, r4
 800a86c:	f000 f9d4 	bl	800ac18 <__multadd>
 800a870:	9b02      	ldr	r3, [sp, #8]
 800a872:	2b00      	cmp	r3, #0
 800a874:	4606      	mov	r6, r0
 800a876:	dc4f      	bgt.n	800a918 <_dtoa_r+0x948>
 800a878:	9b06      	ldr	r3, [sp, #24]
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	dd4c      	ble.n	800a918 <_dtoa_r+0x948>
 800a87e:	e011      	b.n	800a8a4 <_dtoa_r+0x8d4>
 800a880:	d0c9      	beq.n	800a816 <_dtoa_r+0x846>
 800a882:	9a05      	ldr	r2, [sp, #20]
 800a884:	331c      	adds	r3, #28
 800a886:	441a      	add	r2, r3
 800a888:	9205      	str	r2, [sp, #20]
 800a88a:	441d      	add	r5, r3
 800a88c:	4498      	add	r8, r3
 800a88e:	e7c2      	b.n	800a816 <_dtoa_r+0x846>
 800a890:	4603      	mov	r3, r0
 800a892:	e7f6      	b.n	800a882 <_dtoa_r+0x8b2>
 800a894:	f1b9 0f00 	cmp.w	r9, #0
 800a898:	dc38      	bgt.n	800a90c <_dtoa_r+0x93c>
 800a89a:	9b06      	ldr	r3, [sp, #24]
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	dd35      	ble.n	800a90c <_dtoa_r+0x93c>
 800a8a0:	f8cd 9008 	str.w	r9, [sp, #8]
 800a8a4:	9b02      	ldr	r3, [sp, #8]
 800a8a6:	b963      	cbnz	r3, 800a8c2 <_dtoa_r+0x8f2>
 800a8a8:	4639      	mov	r1, r7
 800a8aa:	2205      	movs	r2, #5
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f000 f9b3 	bl	800ac18 <__multadd>
 800a8b2:	4601      	mov	r1, r0
 800a8b4:	4607      	mov	r7, r0
 800a8b6:	9804      	ldr	r0, [sp, #16]
 800a8b8:	f000 fb78 	bl	800afac <__mcmp>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	f73f adcc 	bgt.w	800a45a <_dtoa_r+0x48a>
 800a8c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8c4:	465d      	mov	r5, fp
 800a8c6:	ea6f 0a03 	mvn.w	sl, r3
 800a8ca:	f04f 0900 	mov.w	r9, #0
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f000 f98a 	bl	800abea <_Bfree>
 800a8d6:	2e00      	cmp	r6, #0
 800a8d8:	f43f aeb7 	beq.w	800a64a <_dtoa_r+0x67a>
 800a8dc:	f1b9 0f00 	cmp.w	r9, #0
 800a8e0:	d005      	beq.n	800a8ee <_dtoa_r+0x91e>
 800a8e2:	45b1      	cmp	r9, r6
 800a8e4:	d003      	beq.n	800a8ee <_dtoa_r+0x91e>
 800a8e6:	4649      	mov	r1, r9
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f000 f97e 	bl	800abea <_Bfree>
 800a8ee:	4631      	mov	r1, r6
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f000 f97a 	bl	800abea <_Bfree>
 800a8f6:	e6a8      	b.n	800a64a <_dtoa_r+0x67a>
 800a8f8:	2700      	movs	r7, #0
 800a8fa:	463e      	mov	r6, r7
 800a8fc:	e7e1      	b.n	800a8c2 <_dtoa_r+0x8f2>
 800a8fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a902:	463e      	mov	r6, r7
 800a904:	e5a9      	b.n	800a45a <_dtoa_r+0x48a>
 800a906:	bf00      	nop
 800a908:	40240000 	.word	0x40240000
 800a90c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a90e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 80fa 	beq.w	800ab0c <_dtoa_r+0xb3c>
 800a918:	2d00      	cmp	r5, #0
 800a91a:	dd05      	ble.n	800a928 <_dtoa_r+0x958>
 800a91c:	4631      	mov	r1, r6
 800a91e:	462a      	mov	r2, r5
 800a920:	4620      	mov	r0, r4
 800a922:	f000 faef 	bl	800af04 <__lshift>
 800a926:	4606      	mov	r6, r0
 800a928:	9b07      	ldr	r3, [sp, #28]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d04c      	beq.n	800a9c8 <_dtoa_r+0x9f8>
 800a92e:	6871      	ldr	r1, [r6, #4]
 800a930:	4620      	mov	r0, r4
 800a932:	f000 f926 	bl	800ab82 <_Balloc>
 800a936:	6932      	ldr	r2, [r6, #16]
 800a938:	3202      	adds	r2, #2
 800a93a:	4605      	mov	r5, r0
 800a93c:	0092      	lsls	r2, r2, #2
 800a93e:	f106 010c 	add.w	r1, r6, #12
 800a942:	300c      	adds	r0, #12
 800a944:	f000 f912 	bl	800ab6c <memcpy>
 800a948:	2201      	movs	r2, #1
 800a94a:	4629      	mov	r1, r5
 800a94c:	4620      	mov	r0, r4
 800a94e:	f000 fad9 	bl	800af04 <__lshift>
 800a952:	9b00      	ldr	r3, [sp, #0]
 800a954:	f8cd b014 	str.w	fp, [sp, #20]
 800a958:	f003 0301 	and.w	r3, r3, #1
 800a95c:	46b1      	mov	r9, r6
 800a95e:	9307      	str	r3, [sp, #28]
 800a960:	4606      	mov	r6, r0
 800a962:	4639      	mov	r1, r7
 800a964:	9804      	ldr	r0, [sp, #16]
 800a966:	f7ff faa7 	bl	8009eb8 <quorem>
 800a96a:	4649      	mov	r1, r9
 800a96c:	4605      	mov	r5, r0
 800a96e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a972:	9804      	ldr	r0, [sp, #16]
 800a974:	f000 fb1a 	bl	800afac <__mcmp>
 800a978:	4632      	mov	r2, r6
 800a97a:	9000      	str	r0, [sp, #0]
 800a97c:	4639      	mov	r1, r7
 800a97e:	4620      	mov	r0, r4
 800a980:	f000 fb2e 	bl	800afe0 <__mdiff>
 800a984:	68c3      	ldr	r3, [r0, #12]
 800a986:	4602      	mov	r2, r0
 800a988:	bb03      	cbnz	r3, 800a9cc <_dtoa_r+0x9fc>
 800a98a:	4601      	mov	r1, r0
 800a98c:	9008      	str	r0, [sp, #32]
 800a98e:	9804      	ldr	r0, [sp, #16]
 800a990:	f000 fb0c 	bl	800afac <__mcmp>
 800a994:	9a08      	ldr	r2, [sp, #32]
 800a996:	4603      	mov	r3, r0
 800a998:	4611      	mov	r1, r2
 800a99a:	4620      	mov	r0, r4
 800a99c:	9308      	str	r3, [sp, #32]
 800a99e:	f000 f924 	bl	800abea <_Bfree>
 800a9a2:	9b08      	ldr	r3, [sp, #32]
 800a9a4:	b9a3      	cbnz	r3, 800a9d0 <_dtoa_r+0xa00>
 800a9a6:	9a06      	ldr	r2, [sp, #24]
 800a9a8:	b992      	cbnz	r2, 800a9d0 <_dtoa_r+0xa00>
 800a9aa:	9a07      	ldr	r2, [sp, #28]
 800a9ac:	b982      	cbnz	r2, 800a9d0 <_dtoa_r+0xa00>
 800a9ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a9b2:	d029      	beq.n	800aa08 <_dtoa_r+0xa38>
 800a9b4:	9b00      	ldr	r3, [sp, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	dd01      	ble.n	800a9be <_dtoa_r+0x9ee>
 800a9ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a9be:	9b05      	ldr	r3, [sp, #20]
 800a9c0:	1c5d      	adds	r5, r3, #1
 800a9c2:	f883 8000 	strb.w	r8, [r3]
 800a9c6:	e782      	b.n	800a8ce <_dtoa_r+0x8fe>
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	e7c2      	b.n	800a952 <_dtoa_r+0x982>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e7e3      	b.n	800a998 <_dtoa_r+0x9c8>
 800a9d0:	9a00      	ldr	r2, [sp, #0]
 800a9d2:	2a00      	cmp	r2, #0
 800a9d4:	db04      	blt.n	800a9e0 <_dtoa_r+0xa10>
 800a9d6:	d125      	bne.n	800aa24 <_dtoa_r+0xa54>
 800a9d8:	9a06      	ldr	r2, [sp, #24]
 800a9da:	bb1a      	cbnz	r2, 800aa24 <_dtoa_r+0xa54>
 800a9dc:	9a07      	ldr	r2, [sp, #28]
 800a9de:	bb0a      	cbnz	r2, 800aa24 <_dtoa_r+0xa54>
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	ddec      	ble.n	800a9be <_dtoa_r+0x9ee>
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	9904      	ldr	r1, [sp, #16]
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 fa8b 	bl	800af04 <__lshift>
 800a9ee:	4639      	mov	r1, r7
 800a9f0:	9004      	str	r0, [sp, #16]
 800a9f2:	f000 fadb 	bl	800afac <__mcmp>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	dc03      	bgt.n	800aa02 <_dtoa_r+0xa32>
 800a9fa:	d1e0      	bne.n	800a9be <_dtoa_r+0x9ee>
 800a9fc:	f018 0f01 	tst.w	r8, #1
 800aa00:	d0dd      	beq.n	800a9be <_dtoa_r+0x9ee>
 800aa02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa06:	d1d8      	bne.n	800a9ba <_dtoa_r+0x9ea>
 800aa08:	9b05      	ldr	r3, [sp, #20]
 800aa0a:	9a05      	ldr	r2, [sp, #20]
 800aa0c:	1c5d      	adds	r5, r3, #1
 800aa0e:	2339      	movs	r3, #57	; 0x39
 800aa10:	7013      	strb	r3, [r2, #0]
 800aa12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa16:	2b39      	cmp	r3, #57	; 0x39
 800aa18:	f105 32ff 	add.w	r2, r5, #4294967295
 800aa1c:	d04f      	beq.n	800aabe <_dtoa_r+0xaee>
 800aa1e:	3301      	adds	r3, #1
 800aa20:	7013      	strb	r3, [r2, #0]
 800aa22:	e754      	b.n	800a8ce <_dtoa_r+0x8fe>
 800aa24:	9a05      	ldr	r2, [sp, #20]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	f102 0501 	add.w	r5, r2, #1
 800aa2c:	dd06      	ble.n	800aa3c <_dtoa_r+0xa6c>
 800aa2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa32:	d0e9      	beq.n	800aa08 <_dtoa_r+0xa38>
 800aa34:	f108 0801 	add.w	r8, r8, #1
 800aa38:	9b05      	ldr	r3, [sp, #20]
 800aa3a:	e7c2      	b.n	800a9c2 <_dtoa_r+0x9f2>
 800aa3c:	9a02      	ldr	r2, [sp, #8]
 800aa3e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800aa42:	eba5 030b 	sub.w	r3, r5, fp
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d021      	beq.n	800aa8e <_dtoa_r+0xabe>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	220a      	movs	r2, #10
 800aa4e:	9904      	ldr	r1, [sp, #16]
 800aa50:	4620      	mov	r0, r4
 800aa52:	f000 f8e1 	bl	800ac18 <__multadd>
 800aa56:	45b1      	cmp	r9, r6
 800aa58:	9004      	str	r0, [sp, #16]
 800aa5a:	f04f 0300 	mov.w	r3, #0
 800aa5e:	f04f 020a 	mov.w	r2, #10
 800aa62:	4649      	mov	r1, r9
 800aa64:	4620      	mov	r0, r4
 800aa66:	d105      	bne.n	800aa74 <_dtoa_r+0xaa4>
 800aa68:	f000 f8d6 	bl	800ac18 <__multadd>
 800aa6c:	4681      	mov	r9, r0
 800aa6e:	4606      	mov	r6, r0
 800aa70:	9505      	str	r5, [sp, #20]
 800aa72:	e776      	b.n	800a962 <_dtoa_r+0x992>
 800aa74:	f000 f8d0 	bl	800ac18 <__multadd>
 800aa78:	4631      	mov	r1, r6
 800aa7a:	4681      	mov	r9, r0
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	220a      	movs	r2, #10
 800aa80:	4620      	mov	r0, r4
 800aa82:	f000 f8c9 	bl	800ac18 <__multadd>
 800aa86:	4606      	mov	r6, r0
 800aa88:	e7f2      	b.n	800aa70 <_dtoa_r+0xaa0>
 800aa8a:	f04f 0900 	mov.w	r9, #0
 800aa8e:	2201      	movs	r2, #1
 800aa90:	9904      	ldr	r1, [sp, #16]
 800aa92:	4620      	mov	r0, r4
 800aa94:	f000 fa36 	bl	800af04 <__lshift>
 800aa98:	4639      	mov	r1, r7
 800aa9a:	9004      	str	r0, [sp, #16]
 800aa9c:	f000 fa86 	bl	800afac <__mcmp>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	dcb6      	bgt.n	800aa12 <_dtoa_r+0xa42>
 800aaa4:	d102      	bne.n	800aaac <_dtoa_r+0xadc>
 800aaa6:	f018 0f01 	tst.w	r8, #1
 800aaaa:	d1b2      	bne.n	800aa12 <_dtoa_r+0xa42>
 800aaac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aab0:	2b30      	cmp	r3, #48	; 0x30
 800aab2:	f105 32ff 	add.w	r2, r5, #4294967295
 800aab6:	f47f af0a 	bne.w	800a8ce <_dtoa_r+0x8fe>
 800aaba:	4615      	mov	r5, r2
 800aabc:	e7f6      	b.n	800aaac <_dtoa_r+0xadc>
 800aabe:	4593      	cmp	fp, r2
 800aac0:	d105      	bne.n	800aace <_dtoa_r+0xafe>
 800aac2:	2331      	movs	r3, #49	; 0x31
 800aac4:	f10a 0a01 	add.w	sl, sl, #1
 800aac8:	f88b 3000 	strb.w	r3, [fp]
 800aacc:	e6ff      	b.n	800a8ce <_dtoa_r+0x8fe>
 800aace:	4615      	mov	r5, r2
 800aad0:	e79f      	b.n	800aa12 <_dtoa_r+0xa42>
 800aad2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ab38 <_dtoa_r+0xb68>
 800aad6:	e007      	b.n	800aae8 <_dtoa_r+0xb18>
 800aad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aada:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ab3c <_dtoa_r+0xb6c>
 800aade:	b11b      	cbz	r3, 800aae8 <_dtoa_r+0xb18>
 800aae0:	f10b 0308 	add.w	r3, fp, #8
 800aae4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aae6:	6013      	str	r3, [r2, #0]
 800aae8:	4658      	mov	r0, fp
 800aaea:	b017      	add	sp, #92	; 0x5c
 800aaec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf0:	9b06      	ldr	r3, [sp, #24]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	f77f ae35 	ble.w	800a762 <_dtoa_r+0x792>
 800aaf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aafa:	9307      	str	r3, [sp, #28]
 800aafc:	e649      	b.n	800a792 <_dtoa_r+0x7c2>
 800aafe:	9b02      	ldr	r3, [sp, #8]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	dc03      	bgt.n	800ab0c <_dtoa_r+0xb3c>
 800ab04:	9b06      	ldr	r3, [sp, #24]
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	f73f aecc 	bgt.w	800a8a4 <_dtoa_r+0x8d4>
 800ab0c:	465d      	mov	r5, fp
 800ab0e:	4639      	mov	r1, r7
 800ab10:	9804      	ldr	r0, [sp, #16]
 800ab12:	f7ff f9d1 	bl	8009eb8 <quorem>
 800ab16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ab1a:	f805 8b01 	strb.w	r8, [r5], #1
 800ab1e:	9a02      	ldr	r2, [sp, #8]
 800ab20:	eba5 030b 	sub.w	r3, r5, fp
 800ab24:	429a      	cmp	r2, r3
 800ab26:	ddb0      	ble.n	800aa8a <_dtoa_r+0xaba>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	220a      	movs	r2, #10
 800ab2c:	9904      	ldr	r1, [sp, #16]
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f000 f872 	bl	800ac18 <__multadd>
 800ab34:	9004      	str	r0, [sp, #16]
 800ab36:	e7ea      	b.n	800ab0e <_dtoa_r+0xb3e>
 800ab38:	0800b6b0 	.word	0x0800b6b0
 800ab3c:	0800b6d4 	.word	0x0800b6d4

0800ab40 <_localeconv_r>:
 800ab40:	4b04      	ldr	r3, [pc, #16]	; (800ab54 <_localeconv_r+0x14>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6a18      	ldr	r0, [r3, #32]
 800ab46:	4b04      	ldr	r3, [pc, #16]	; (800ab58 <_localeconv_r+0x18>)
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	bf08      	it	eq
 800ab4c:	4618      	moveq	r0, r3
 800ab4e:	30f0      	adds	r0, #240	; 0xf0
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	20000034 	.word	0x20000034
 800ab58:	20000098 	.word	0x20000098

0800ab5c <malloc>:
 800ab5c:	4b02      	ldr	r3, [pc, #8]	; (800ab68 <malloc+0xc>)
 800ab5e:	4601      	mov	r1, r0
 800ab60:	6818      	ldr	r0, [r3, #0]
 800ab62:	f000 bb45 	b.w	800b1f0 <_malloc_r>
 800ab66:	bf00      	nop
 800ab68:	20000034 	.word	0x20000034

0800ab6c <memcpy>:
 800ab6c:	b510      	push	{r4, lr}
 800ab6e:	1e43      	subs	r3, r0, #1
 800ab70:	440a      	add	r2, r1
 800ab72:	4291      	cmp	r1, r2
 800ab74:	d100      	bne.n	800ab78 <memcpy+0xc>
 800ab76:	bd10      	pop	{r4, pc}
 800ab78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab80:	e7f7      	b.n	800ab72 <memcpy+0x6>

0800ab82 <_Balloc>:
 800ab82:	b570      	push	{r4, r5, r6, lr}
 800ab84:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ab86:	4604      	mov	r4, r0
 800ab88:	460e      	mov	r6, r1
 800ab8a:	b93d      	cbnz	r5, 800ab9c <_Balloc+0x1a>
 800ab8c:	2010      	movs	r0, #16
 800ab8e:	f7ff ffe5 	bl	800ab5c <malloc>
 800ab92:	6260      	str	r0, [r4, #36]	; 0x24
 800ab94:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab98:	6005      	str	r5, [r0, #0]
 800ab9a:	60c5      	str	r5, [r0, #12]
 800ab9c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ab9e:	68eb      	ldr	r3, [r5, #12]
 800aba0:	b183      	cbz	r3, 800abc4 <_Balloc+0x42>
 800aba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800abaa:	b9b8      	cbnz	r0, 800abdc <_Balloc+0x5a>
 800abac:	2101      	movs	r1, #1
 800abae:	fa01 f506 	lsl.w	r5, r1, r6
 800abb2:	1d6a      	adds	r2, r5, #5
 800abb4:	0092      	lsls	r2, r2, #2
 800abb6:	4620      	mov	r0, r4
 800abb8:	f000 fabe 	bl	800b138 <_calloc_r>
 800abbc:	b160      	cbz	r0, 800abd8 <_Balloc+0x56>
 800abbe:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800abc2:	e00e      	b.n	800abe2 <_Balloc+0x60>
 800abc4:	2221      	movs	r2, #33	; 0x21
 800abc6:	2104      	movs	r1, #4
 800abc8:	4620      	mov	r0, r4
 800abca:	f000 fab5 	bl	800b138 <_calloc_r>
 800abce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abd0:	60e8      	str	r0, [r5, #12]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1e4      	bne.n	800aba2 <_Balloc+0x20>
 800abd8:	2000      	movs	r0, #0
 800abda:	bd70      	pop	{r4, r5, r6, pc}
 800abdc:	6802      	ldr	r2, [r0, #0]
 800abde:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800abe2:	2300      	movs	r3, #0
 800abe4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abe8:	e7f7      	b.n	800abda <_Balloc+0x58>

0800abea <_Bfree>:
 800abea:	b570      	push	{r4, r5, r6, lr}
 800abec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800abee:	4606      	mov	r6, r0
 800abf0:	460d      	mov	r5, r1
 800abf2:	b93c      	cbnz	r4, 800ac04 <_Bfree+0x1a>
 800abf4:	2010      	movs	r0, #16
 800abf6:	f7ff ffb1 	bl	800ab5c <malloc>
 800abfa:	6270      	str	r0, [r6, #36]	; 0x24
 800abfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac00:	6004      	str	r4, [r0, #0]
 800ac02:	60c4      	str	r4, [r0, #12]
 800ac04:	b13d      	cbz	r5, 800ac16 <_Bfree+0x2c>
 800ac06:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ac08:	686a      	ldr	r2, [r5, #4]
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac10:	6029      	str	r1, [r5, #0]
 800ac12:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ac16:	bd70      	pop	{r4, r5, r6, pc}

0800ac18 <__multadd>:
 800ac18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac1c:	690d      	ldr	r5, [r1, #16]
 800ac1e:	461f      	mov	r7, r3
 800ac20:	4606      	mov	r6, r0
 800ac22:	460c      	mov	r4, r1
 800ac24:	f101 0c14 	add.w	ip, r1, #20
 800ac28:	2300      	movs	r3, #0
 800ac2a:	f8dc 0000 	ldr.w	r0, [ip]
 800ac2e:	b281      	uxth	r1, r0
 800ac30:	fb02 7101 	mla	r1, r2, r1, r7
 800ac34:	0c0f      	lsrs	r7, r1, #16
 800ac36:	0c00      	lsrs	r0, r0, #16
 800ac38:	fb02 7000 	mla	r0, r2, r0, r7
 800ac3c:	b289      	uxth	r1, r1
 800ac3e:	3301      	adds	r3, #1
 800ac40:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ac44:	429d      	cmp	r5, r3
 800ac46:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ac4a:	f84c 1b04 	str.w	r1, [ip], #4
 800ac4e:	dcec      	bgt.n	800ac2a <__multadd+0x12>
 800ac50:	b1d7      	cbz	r7, 800ac88 <__multadd+0x70>
 800ac52:	68a3      	ldr	r3, [r4, #8]
 800ac54:	42ab      	cmp	r3, r5
 800ac56:	dc12      	bgt.n	800ac7e <__multadd+0x66>
 800ac58:	6861      	ldr	r1, [r4, #4]
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	3101      	adds	r1, #1
 800ac5e:	f7ff ff90 	bl	800ab82 <_Balloc>
 800ac62:	6922      	ldr	r2, [r4, #16]
 800ac64:	3202      	adds	r2, #2
 800ac66:	f104 010c 	add.w	r1, r4, #12
 800ac6a:	4680      	mov	r8, r0
 800ac6c:	0092      	lsls	r2, r2, #2
 800ac6e:	300c      	adds	r0, #12
 800ac70:	f7ff ff7c 	bl	800ab6c <memcpy>
 800ac74:	4621      	mov	r1, r4
 800ac76:	4630      	mov	r0, r6
 800ac78:	f7ff ffb7 	bl	800abea <_Bfree>
 800ac7c:	4644      	mov	r4, r8
 800ac7e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac82:	3501      	adds	r5, #1
 800ac84:	615f      	str	r7, [r3, #20]
 800ac86:	6125      	str	r5, [r4, #16]
 800ac88:	4620      	mov	r0, r4
 800ac8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ac8e <__hi0bits>:
 800ac8e:	0c02      	lsrs	r2, r0, #16
 800ac90:	0412      	lsls	r2, r2, #16
 800ac92:	4603      	mov	r3, r0
 800ac94:	b9b2      	cbnz	r2, 800acc4 <__hi0bits+0x36>
 800ac96:	0403      	lsls	r3, r0, #16
 800ac98:	2010      	movs	r0, #16
 800ac9a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ac9e:	bf04      	itt	eq
 800aca0:	021b      	lsleq	r3, r3, #8
 800aca2:	3008      	addeq	r0, #8
 800aca4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aca8:	bf04      	itt	eq
 800acaa:	011b      	lsleq	r3, r3, #4
 800acac:	3004      	addeq	r0, #4
 800acae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800acb2:	bf04      	itt	eq
 800acb4:	009b      	lsleq	r3, r3, #2
 800acb6:	3002      	addeq	r0, #2
 800acb8:	2b00      	cmp	r3, #0
 800acba:	db06      	blt.n	800acca <__hi0bits+0x3c>
 800acbc:	005b      	lsls	r3, r3, #1
 800acbe:	d503      	bpl.n	800acc8 <__hi0bits+0x3a>
 800acc0:	3001      	adds	r0, #1
 800acc2:	4770      	bx	lr
 800acc4:	2000      	movs	r0, #0
 800acc6:	e7e8      	b.n	800ac9a <__hi0bits+0xc>
 800acc8:	2020      	movs	r0, #32
 800acca:	4770      	bx	lr

0800accc <__lo0bits>:
 800accc:	6803      	ldr	r3, [r0, #0]
 800acce:	f013 0207 	ands.w	r2, r3, #7
 800acd2:	4601      	mov	r1, r0
 800acd4:	d00b      	beq.n	800acee <__lo0bits+0x22>
 800acd6:	07da      	lsls	r2, r3, #31
 800acd8:	d423      	bmi.n	800ad22 <__lo0bits+0x56>
 800acda:	0798      	lsls	r0, r3, #30
 800acdc:	bf49      	itett	mi
 800acde:	085b      	lsrmi	r3, r3, #1
 800ace0:	089b      	lsrpl	r3, r3, #2
 800ace2:	2001      	movmi	r0, #1
 800ace4:	600b      	strmi	r3, [r1, #0]
 800ace6:	bf5c      	itt	pl
 800ace8:	600b      	strpl	r3, [r1, #0]
 800acea:	2002      	movpl	r0, #2
 800acec:	4770      	bx	lr
 800acee:	b298      	uxth	r0, r3
 800acf0:	b9a8      	cbnz	r0, 800ad1e <__lo0bits+0x52>
 800acf2:	0c1b      	lsrs	r3, r3, #16
 800acf4:	2010      	movs	r0, #16
 800acf6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800acfa:	bf04      	itt	eq
 800acfc:	0a1b      	lsreq	r3, r3, #8
 800acfe:	3008      	addeq	r0, #8
 800ad00:	071a      	lsls	r2, r3, #28
 800ad02:	bf04      	itt	eq
 800ad04:	091b      	lsreq	r3, r3, #4
 800ad06:	3004      	addeq	r0, #4
 800ad08:	079a      	lsls	r2, r3, #30
 800ad0a:	bf04      	itt	eq
 800ad0c:	089b      	lsreq	r3, r3, #2
 800ad0e:	3002      	addeq	r0, #2
 800ad10:	07da      	lsls	r2, r3, #31
 800ad12:	d402      	bmi.n	800ad1a <__lo0bits+0x4e>
 800ad14:	085b      	lsrs	r3, r3, #1
 800ad16:	d006      	beq.n	800ad26 <__lo0bits+0x5a>
 800ad18:	3001      	adds	r0, #1
 800ad1a:	600b      	str	r3, [r1, #0]
 800ad1c:	4770      	bx	lr
 800ad1e:	4610      	mov	r0, r2
 800ad20:	e7e9      	b.n	800acf6 <__lo0bits+0x2a>
 800ad22:	2000      	movs	r0, #0
 800ad24:	4770      	bx	lr
 800ad26:	2020      	movs	r0, #32
 800ad28:	4770      	bx	lr

0800ad2a <__i2b>:
 800ad2a:	b510      	push	{r4, lr}
 800ad2c:	460c      	mov	r4, r1
 800ad2e:	2101      	movs	r1, #1
 800ad30:	f7ff ff27 	bl	800ab82 <_Balloc>
 800ad34:	2201      	movs	r2, #1
 800ad36:	6144      	str	r4, [r0, #20]
 800ad38:	6102      	str	r2, [r0, #16]
 800ad3a:	bd10      	pop	{r4, pc}

0800ad3c <__multiply>:
 800ad3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad40:	4614      	mov	r4, r2
 800ad42:	690a      	ldr	r2, [r1, #16]
 800ad44:	6923      	ldr	r3, [r4, #16]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	bfb8      	it	lt
 800ad4a:	460b      	movlt	r3, r1
 800ad4c:	4688      	mov	r8, r1
 800ad4e:	bfbc      	itt	lt
 800ad50:	46a0      	movlt	r8, r4
 800ad52:	461c      	movlt	r4, r3
 800ad54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad58:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ad5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad64:	eb07 0609 	add.w	r6, r7, r9
 800ad68:	42b3      	cmp	r3, r6
 800ad6a:	bfb8      	it	lt
 800ad6c:	3101      	addlt	r1, #1
 800ad6e:	f7ff ff08 	bl	800ab82 <_Balloc>
 800ad72:	f100 0514 	add.w	r5, r0, #20
 800ad76:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ad7a:	462b      	mov	r3, r5
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	4573      	cmp	r3, lr
 800ad80:	d316      	bcc.n	800adb0 <__multiply+0x74>
 800ad82:	f104 0214 	add.w	r2, r4, #20
 800ad86:	f108 0114 	add.w	r1, r8, #20
 800ad8a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ad8e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	9b00      	ldr	r3, [sp, #0]
 800ad96:	9201      	str	r2, [sp, #4]
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d80c      	bhi.n	800adb6 <__multiply+0x7a>
 800ad9c:	2e00      	cmp	r6, #0
 800ad9e:	dd03      	ble.n	800ada8 <__multiply+0x6c>
 800ada0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d05d      	beq.n	800ae64 <__multiply+0x128>
 800ada8:	6106      	str	r6, [r0, #16]
 800adaa:	b003      	add	sp, #12
 800adac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb0:	f843 2b04 	str.w	r2, [r3], #4
 800adb4:	e7e3      	b.n	800ad7e <__multiply+0x42>
 800adb6:	f8b2 b000 	ldrh.w	fp, [r2]
 800adba:	f1bb 0f00 	cmp.w	fp, #0
 800adbe:	d023      	beq.n	800ae08 <__multiply+0xcc>
 800adc0:	4689      	mov	r9, r1
 800adc2:	46ac      	mov	ip, r5
 800adc4:	f04f 0800 	mov.w	r8, #0
 800adc8:	f859 4b04 	ldr.w	r4, [r9], #4
 800adcc:	f8dc a000 	ldr.w	sl, [ip]
 800add0:	b2a3      	uxth	r3, r4
 800add2:	fa1f fa8a 	uxth.w	sl, sl
 800add6:	fb0b a303 	mla	r3, fp, r3, sl
 800adda:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800adde:	f8dc 4000 	ldr.w	r4, [ip]
 800ade2:	4443      	add	r3, r8
 800ade4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ade8:	fb0b 840a 	mla	r4, fp, sl, r8
 800adec:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800adf0:	46e2      	mov	sl, ip
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800adf8:	454f      	cmp	r7, r9
 800adfa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800adfe:	f84a 3b04 	str.w	r3, [sl], #4
 800ae02:	d82b      	bhi.n	800ae5c <__multiply+0x120>
 800ae04:	f8cc 8004 	str.w	r8, [ip, #4]
 800ae08:	9b01      	ldr	r3, [sp, #4]
 800ae0a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ae0e:	3204      	adds	r2, #4
 800ae10:	f1ba 0f00 	cmp.w	sl, #0
 800ae14:	d020      	beq.n	800ae58 <__multiply+0x11c>
 800ae16:	682b      	ldr	r3, [r5, #0]
 800ae18:	4689      	mov	r9, r1
 800ae1a:	46a8      	mov	r8, r5
 800ae1c:	f04f 0b00 	mov.w	fp, #0
 800ae20:	f8b9 c000 	ldrh.w	ip, [r9]
 800ae24:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ae28:	fb0a 440c 	mla	r4, sl, ip, r4
 800ae2c:	445c      	add	r4, fp
 800ae2e:	46c4      	mov	ip, r8
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ae36:	f84c 3b04 	str.w	r3, [ip], #4
 800ae3a:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae3e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ae42:	0c1b      	lsrs	r3, r3, #16
 800ae44:	fb0a b303 	mla	r3, sl, r3, fp
 800ae48:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ae4c:	454f      	cmp	r7, r9
 800ae4e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ae52:	d805      	bhi.n	800ae60 <__multiply+0x124>
 800ae54:	f8c8 3004 	str.w	r3, [r8, #4]
 800ae58:	3504      	adds	r5, #4
 800ae5a:	e79b      	b.n	800ad94 <__multiply+0x58>
 800ae5c:	46d4      	mov	ip, sl
 800ae5e:	e7b3      	b.n	800adc8 <__multiply+0x8c>
 800ae60:	46e0      	mov	r8, ip
 800ae62:	e7dd      	b.n	800ae20 <__multiply+0xe4>
 800ae64:	3e01      	subs	r6, #1
 800ae66:	e799      	b.n	800ad9c <__multiply+0x60>

0800ae68 <__pow5mult>:
 800ae68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae6c:	4615      	mov	r5, r2
 800ae6e:	f012 0203 	ands.w	r2, r2, #3
 800ae72:	4606      	mov	r6, r0
 800ae74:	460f      	mov	r7, r1
 800ae76:	d007      	beq.n	800ae88 <__pow5mult+0x20>
 800ae78:	3a01      	subs	r2, #1
 800ae7a:	4c21      	ldr	r4, [pc, #132]	; (800af00 <__pow5mult+0x98>)
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae82:	f7ff fec9 	bl	800ac18 <__multadd>
 800ae86:	4607      	mov	r7, r0
 800ae88:	10ad      	asrs	r5, r5, #2
 800ae8a:	d035      	beq.n	800aef8 <__pow5mult+0x90>
 800ae8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae8e:	b93c      	cbnz	r4, 800aea0 <__pow5mult+0x38>
 800ae90:	2010      	movs	r0, #16
 800ae92:	f7ff fe63 	bl	800ab5c <malloc>
 800ae96:	6270      	str	r0, [r6, #36]	; 0x24
 800ae98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae9c:	6004      	str	r4, [r0, #0]
 800ae9e:	60c4      	str	r4, [r0, #12]
 800aea0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aea4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aea8:	b94c      	cbnz	r4, 800aebe <__pow5mult+0x56>
 800aeaa:	f240 2171 	movw	r1, #625	; 0x271
 800aeae:	4630      	mov	r0, r6
 800aeb0:	f7ff ff3b 	bl	800ad2a <__i2b>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f8c8 0008 	str.w	r0, [r8, #8]
 800aeba:	4604      	mov	r4, r0
 800aebc:	6003      	str	r3, [r0, #0]
 800aebe:	f04f 0800 	mov.w	r8, #0
 800aec2:	07eb      	lsls	r3, r5, #31
 800aec4:	d50a      	bpl.n	800aedc <__pow5mult+0x74>
 800aec6:	4639      	mov	r1, r7
 800aec8:	4622      	mov	r2, r4
 800aeca:	4630      	mov	r0, r6
 800aecc:	f7ff ff36 	bl	800ad3c <__multiply>
 800aed0:	4639      	mov	r1, r7
 800aed2:	4681      	mov	r9, r0
 800aed4:	4630      	mov	r0, r6
 800aed6:	f7ff fe88 	bl	800abea <_Bfree>
 800aeda:	464f      	mov	r7, r9
 800aedc:	106d      	asrs	r5, r5, #1
 800aede:	d00b      	beq.n	800aef8 <__pow5mult+0x90>
 800aee0:	6820      	ldr	r0, [r4, #0]
 800aee2:	b938      	cbnz	r0, 800aef4 <__pow5mult+0x8c>
 800aee4:	4622      	mov	r2, r4
 800aee6:	4621      	mov	r1, r4
 800aee8:	4630      	mov	r0, r6
 800aeea:	f7ff ff27 	bl	800ad3c <__multiply>
 800aeee:	6020      	str	r0, [r4, #0]
 800aef0:	f8c0 8000 	str.w	r8, [r0]
 800aef4:	4604      	mov	r4, r0
 800aef6:	e7e4      	b.n	800aec2 <__pow5mult+0x5a>
 800aef8:	4638      	mov	r0, r7
 800aefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aefe:	bf00      	nop
 800af00:	0800b7d8 	.word	0x0800b7d8

0800af04 <__lshift>:
 800af04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af08:	460c      	mov	r4, r1
 800af0a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af0e:	6923      	ldr	r3, [r4, #16]
 800af10:	6849      	ldr	r1, [r1, #4]
 800af12:	eb0a 0903 	add.w	r9, sl, r3
 800af16:	68a3      	ldr	r3, [r4, #8]
 800af18:	4607      	mov	r7, r0
 800af1a:	4616      	mov	r6, r2
 800af1c:	f109 0501 	add.w	r5, r9, #1
 800af20:	42ab      	cmp	r3, r5
 800af22:	db32      	blt.n	800af8a <__lshift+0x86>
 800af24:	4638      	mov	r0, r7
 800af26:	f7ff fe2c 	bl	800ab82 <_Balloc>
 800af2a:	2300      	movs	r3, #0
 800af2c:	4680      	mov	r8, r0
 800af2e:	f100 0114 	add.w	r1, r0, #20
 800af32:	461a      	mov	r2, r3
 800af34:	4553      	cmp	r3, sl
 800af36:	db2b      	blt.n	800af90 <__lshift+0x8c>
 800af38:	6920      	ldr	r0, [r4, #16]
 800af3a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af3e:	f104 0314 	add.w	r3, r4, #20
 800af42:	f016 021f 	ands.w	r2, r6, #31
 800af46:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af4a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af4e:	d025      	beq.n	800af9c <__lshift+0x98>
 800af50:	f1c2 0e20 	rsb	lr, r2, #32
 800af54:	2000      	movs	r0, #0
 800af56:	681e      	ldr	r6, [r3, #0]
 800af58:	468a      	mov	sl, r1
 800af5a:	4096      	lsls	r6, r2
 800af5c:	4330      	orrs	r0, r6
 800af5e:	f84a 0b04 	str.w	r0, [sl], #4
 800af62:	f853 0b04 	ldr.w	r0, [r3], #4
 800af66:	459c      	cmp	ip, r3
 800af68:	fa20 f00e 	lsr.w	r0, r0, lr
 800af6c:	d814      	bhi.n	800af98 <__lshift+0x94>
 800af6e:	6048      	str	r0, [r1, #4]
 800af70:	b108      	cbz	r0, 800af76 <__lshift+0x72>
 800af72:	f109 0502 	add.w	r5, r9, #2
 800af76:	3d01      	subs	r5, #1
 800af78:	4638      	mov	r0, r7
 800af7a:	f8c8 5010 	str.w	r5, [r8, #16]
 800af7e:	4621      	mov	r1, r4
 800af80:	f7ff fe33 	bl	800abea <_Bfree>
 800af84:	4640      	mov	r0, r8
 800af86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af8a:	3101      	adds	r1, #1
 800af8c:	005b      	lsls	r3, r3, #1
 800af8e:	e7c7      	b.n	800af20 <__lshift+0x1c>
 800af90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800af94:	3301      	adds	r3, #1
 800af96:	e7cd      	b.n	800af34 <__lshift+0x30>
 800af98:	4651      	mov	r1, sl
 800af9a:	e7dc      	b.n	800af56 <__lshift+0x52>
 800af9c:	3904      	subs	r1, #4
 800af9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800afa2:	f841 2f04 	str.w	r2, [r1, #4]!
 800afa6:	459c      	cmp	ip, r3
 800afa8:	d8f9      	bhi.n	800af9e <__lshift+0x9a>
 800afaa:	e7e4      	b.n	800af76 <__lshift+0x72>

0800afac <__mcmp>:
 800afac:	6903      	ldr	r3, [r0, #16]
 800afae:	690a      	ldr	r2, [r1, #16]
 800afb0:	1a9b      	subs	r3, r3, r2
 800afb2:	b530      	push	{r4, r5, lr}
 800afb4:	d10c      	bne.n	800afd0 <__mcmp+0x24>
 800afb6:	0092      	lsls	r2, r2, #2
 800afb8:	3014      	adds	r0, #20
 800afba:	3114      	adds	r1, #20
 800afbc:	1884      	adds	r4, r0, r2
 800afbe:	4411      	add	r1, r2
 800afc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800afc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800afc8:	4295      	cmp	r5, r2
 800afca:	d003      	beq.n	800afd4 <__mcmp+0x28>
 800afcc:	d305      	bcc.n	800afda <__mcmp+0x2e>
 800afce:	2301      	movs	r3, #1
 800afd0:	4618      	mov	r0, r3
 800afd2:	bd30      	pop	{r4, r5, pc}
 800afd4:	42a0      	cmp	r0, r4
 800afd6:	d3f3      	bcc.n	800afc0 <__mcmp+0x14>
 800afd8:	e7fa      	b.n	800afd0 <__mcmp+0x24>
 800afda:	f04f 33ff 	mov.w	r3, #4294967295
 800afde:	e7f7      	b.n	800afd0 <__mcmp+0x24>

0800afe0 <__mdiff>:
 800afe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afe4:	460d      	mov	r5, r1
 800afe6:	4607      	mov	r7, r0
 800afe8:	4611      	mov	r1, r2
 800afea:	4628      	mov	r0, r5
 800afec:	4614      	mov	r4, r2
 800afee:	f7ff ffdd 	bl	800afac <__mcmp>
 800aff2:	1e06      	subs	r6, r0, #0
 800aff4:	d108      	bne.n	800b008 <__mdiff+0x28>
 800aff6:	4631      	mov	r1, r6
 800aff8:	4638      	mov	r0, r7
 800affa:	f7ff fdc2 	bl	800ab82 <_Balloc>
 800affe:	2301      	movs	r3, #1
 800b000:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b008:	bfa4      	itt	ge
 800b00a:	4623      	movge	r3, r4
 800b00c:	462c      	movge	r4, r5
 800b00e:	4638      	mov	r0, r7
 800b010:	6861      	ldr	r1, [r4, #4]
 800b012:	bfa6      	itte	ge
 800b014:	461d      	movge	r5, r3
 800b016:	2600      	movge	r6, #0
 800b018:	2601      	movlt	r6, #1
 800b01a:	f7ff fdb2 	bl	800ab82 <_Balloc>
 800b01e:	692b      	ldr	r3, [r5, #16]
 800b020:	60c6      	str	r6, [r0, #12]
 800b022:	6926      	ldr	r6, [r4, #16]
 800b024:	f105 0914 	add.w	r9, r5, #20
 800b028:	f104 0214 	add.w	r2, r4, #20
 800b02c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b030:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b034:	f100 0514 	add.w	r5, r0, #20
 800b038:	f04f 0e00 	mov.w	lr, #0
 800b03c:	f852 ab04 	ldr.w	sl, [r2], #4
 800b040:	f859 4b04 	ldr.w	r4, [r9], #4
 800b044:	fa1e f18a 	uxtah	r1, lr, sl
 800b048:	b2a3      	uxth	r3, r4
 800b04a:	1ac9      	subs	r1, r1, r3
 800b04c:	0c23      	lsrs	r3, r4, #16
 800b04e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b052:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b056:	b289      	uxth	r1, r1
 800b058:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b05c:	45c8      	cmp	r8, r9
 800b05e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b062:	4694      	mov	ip, r2
 800b064:	f845 3b04 	str.w	r3, [r5], #4
 800b068:	d8e8      	bhi.n	800b03c <__mdiff+0x5c>
 800b06a:	45bc      	cmp	ip, r7
 800b06c:	d304      	bcc.n	800b078 <__mdiff+0x98>
 800b06e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b072:	b183      	cbz	r3, 800b096 <__mdiff+0xb6>
 800b074:	6106      	str	r6, [r0, #16]
 800b076:	e7c5      	b.n	800b004 <__mdiff+0x24>
 800b078:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b07c:	fa1e f381 	uxtah	r3, lr, r1
 800b080:	141a      	asrs	r2, r3, #16
 800b082:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b086:	b29b      	uxth	r3, r3
 800b088:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b08c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b090:	f845 3b04 	str.w	r3, [r5], #4
 800b094:	e7e9      	b.n	800b06a <__mdiff+0x8a>
 800b096:	3e01      	subs	r6, #1
 800b098:	e7e9      	b.n	800b06e <__mdiff+0x8e>

0800b09a <__d2b>:
 800b09a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b09e:	460e      	mov	r6, r1
 800b0a0:	2101      	movs	r1, #1
 800b0a2:	ec59 8b10 	vmov	r8, r9, d0
 800b0a6:	4615      	mov	r5, r2
 800b0a8:	f7ff fd6b 	bl	800ab82 <_Balloc>
 800b0ac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b0b0:	4607      	mov	r7, r0
 800b0b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0b6:	bb34      	cbnz	r4, 800b106 <__d2b+0x6c>
 800b0b8:	9301      	str	r3, [sp, #4]
 800b0ba:	f1b8 0300 	subs.w	r3, r8, #0
 800b0be:	d027      	beq.n	800b110 <__d2b+0x76>
 800b0c0:	a802      	add	r0, sp, #8
 800b0c2:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b0c6:	f7ff fe01 	bl	800accc <__lo0bits>
 800b0ca:	9900      	ldr	r1, [sp, #0]
 800b0cc:	b1f0      	cbz	r0, 800b10c <__d2b+0x72>
 800b0ce:	9a01      	ldr	r2, [sp, #4]
 800b0d0:	f1c0 0320 	rsb	r3, r0, #32
 800b0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0d8:	430b      	orrs	r3, r1
 800b0da:	40c2      	lsrs	r2, r0
 800b0dc:	617b      	str	r3, [r7, #20]
 800b0de:	9201      	str	r2, [sp, #4]
 800b0e0:	9b01      	ldr	r3, [sp, #4]
 800b0e2:	61bb      	str	r3, [r7, #24]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	bf14      	ite	ne
 800b0e8:	2102      	movne	r1, #2
 800b0ea:	2101      	moveq	r1, #1
 800b0ec:	6139      	str	r1, [r7, #16]
 800b0ee:	b1c4      	cbz	r4, 800b122 <__d2b+0x88>
 800b0f0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b0f4:	4404      	add	r4, r0
 800b0f6:	6034      	str	r4, [r6, #0]
 800b0f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0fc:	6028      	str	r0, [r5, #0]
 800b0fe:	4638      	mov	r0, r7
 800b100:	b003      	add	sp, #12
 800b102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b10a:	e7d5      	b.n	800b0b8 <__d2b+0x1e>
 800b10c:	6179      	str	r1, [r7, #20]
 800b10e:	e7e7      	b.n	800b0e0 <__d2b+0x46>
 800b110:	a801      	add	r0, sp, #4
 800b112:	f7ff fddb 	bl	800accc <__lo0bits>
 800b116:	9b01      	ldr	r3, [sp, #4]
 800b118:	617b      	str	r3, [r7, #20]
 800b11a:	2101      	movs	r1, #1
 800b11c:	6139      	str	r1, [r7, #16]
 800b11e:	3020      	adds	r0, #32
 800b120:	e7e5      	b.n	800b0ee <__d2b+0x54>
 800b122:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b126:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b12a:	6030      	str	r0, [r6, #0]
 800b12c:	6918      	ldr	r0, [r3, #16]
 800b12e:	f7ff fdae 	bl	800ac8e <__hi0bits>
 800b132:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b136:	e7e1      	b.n	800b0fc <__d2b+0x62>

0800b138 <_calloc_r>:
 800b138:	b538      	push	{r3, r4, r5, lr}
 800b13a:	fb02 f401 	mul.w	r4, r2, r1
 800b13e:	4621      	mov	r1, r4
 800b140:	f000 f856 	bl	800b1f0 <_malloc_r>
 800b144:	4605      	mov	r5, r0
 800b146:	b118      	cbz	r0, 800b150 <_calloc_r+0x18>
 800b148:	4622      	mov	r2, r4
 800b14a:	2100      	movs	r1, #0
 800b14c:	f7fe fa1c 	bl	8009588 <memset>
 800b150:	4628      	mov	r0, r5
 800b152:	bd38      	pop	{r3, r4, r5, pc}

0800b154 <_free_r>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	4605      	mov	r5, r0
 800b158:	2900      	cmp	r1, #0
 800b15a:	d045      	beq.n	800b1e8 <_free_r+0x94>
 800b15c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b160:	1f0c      	subs	r4, r1, #4
 800b162:	2b00      	cmp	r3, #0
 800b164:	bfb8      	it	lt
 800b166:	18e4      	addlt	r4, r4, r3
 800b168:	f000 fa29 	bl	800b5be <__malloc_lock>
 800b16c:	4a1f      	ldr	r2, [pc, #124]	; (800b1ec <_free_r+0x98>)
 800b16e:	6813      	ldr	r3, [r2, #0]
 800b170:	4610      	mov	r0, r2
 800b172:	b933      	cbnz	r3, 800b182 <_free_r+0x2e>
 800b174:	6063      	str	r3, [r4, #4]
 800b176:	6014      	str	r4, [r2, #0]
 800b178:	4628      	mov	r0, r5
 800b17a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b17e:	f000 ba1f 	b.w	800b5c0 <__malloc_unlock>
 800b182:	42a3      	cmp	r3, r4
 800b184:	d90c      	bls.n	800b1a0 <_free_r+0x4c>
 800b186:	6821      	ldr	r1, [r4, #0]
 800b188:	1862      	adds	r2, r4, r1
 800b18a:	4293      	cmp	r3, r2
 800b18c:	bf04      	itt	eq
 800b18e:	681a      	ldreq	r2, [r3, #0]
 800b190:	685b      	ldreq	r3, [r3, #4]
 800b192:	6063      	str	r3, [r4, #4]
 800b194:	bf04      	itt	eq
 800b196:	1852      	addeq	r2, r2, r1
 800b198:	6022      	streq	r2, [r4, #0]
 800b19a:	6004      	str	r4, [r0, #0]
 800b19c:	e7ec      	b.n	800b178 <_free_r+0x24>
 800b19e:	4613      	mov	r3, r2
 800b1a0:	685a      	ldr	r2, [r3, #4]
 800b1a2:	b10a      	cbz	r2, 800b1a8 <_free_r+0x54>
 800b1a4:	42a2      	cmp	r2, r4
 800b1a6:	d9fa      	bls.n	800b19e <_free_r+0x4a>
 800b1a8:	6819      	ldr	r1, [r3, #0]
 800b1aa:	1858      	adds	r0, r3, r1
 800b1ac:	42a0      	cmp	r0, r4
 800b1ae:	d10b      	bne.n	800b1c8 <_free_r+0x74>
 800b1b0:	6820      	ldr	r0, [r4, #0]
 800b1b2:	4401      	add	r1, r0
 800b1b4:	1858      	adds	r0, r3, r1
 800b1b6:	4282      	cmp	r2, r0
 800b1b8:	6019      	str	r1, [r3, #0]
 800b1ba:	d1dd      	bne.n	800b178 <_free_r+0x24>
 800b1bc:	6810      	ldr	r0, [r2, #0]
 800b1be:	6852      	ldr	r2, [r2, #4]
 800b1c0:	605a      	str	r2, [r3, #4]
 800b1c2:	4401      	add	r1, r0
 800b1c4:	6019      	str	r1, [r3, #0]
 800b1c6:	e7d7      	b.n	800b178 <_free_r+0x24>
 800b1c8:	d902      	bls.n	800b1d0 <_free_r+0x7c>
 800b1ca:	230c      	movs	r3, #12
 800b1cc:	602b      	str	r3, [r5, #0]
 800b1ce:	e7d3      	b.n	800b178 <_free_r+0x24>
 800b1d0:	6820      	ldr	r0, [r4, #0]
 800b1d2:	1821      	adds	r1, r4, r0
 800b1d4:	428a      	cmp	r2, r1
 800b1d6:	bf04      	itt	eq
 800b1d8:	6811      	ldreq	r1, [r2, #0]
 800b1da:	6852      	ldreq	r2, [r2, #4]
 800b1dc:	6062      	str	r2, [r4, #4]
 800b1de:	bf04      	itt	eq
 800b1e0:	1809      	addeq	r1, r1, r0
 800b1e2:	6021      	streq	r1, [r4, #0]
 800b1e4:	605c      	str	r4, [r3, #4]
 800b1e6:	e7c7      	b.n	800b178 <_free_r+0x24>
 800b1e8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ea:	bf00      	nop
 800b1ec:	2000076c 	.word	0x2000076c

0800b1f0 <_malloc_r>:
 800b1f0:	b570      	push	{r4, r5, r6, lr}
 800b1f2:	1ccd      	adds	r5, r1, #3
 800b1f4:	f025 0503 	bic.w	r5, r5, #3
 800b1f8:	3508      	adds	r5, #8
 800b1fa:	2d0c      	cmp	r5, #12
 800b1fc:	bf38      	it	cc
 800b1fe:	250c      	movcc	r5, #12
 800b200:	2d00      	cmp	r5, #0
 800b202:	4606      	mov	r6, r0
 800b204:	db01      	blt.n	800b20a <_malloc_r+0x1a>
 800b206:	42a9      	cmp	r1, r5
 800b208:	d903      	bls.n	800b212 <_malloc_r+0x22>
 800b20a:	230c      	movs	r3, #12
 800b20c:	6033      	str	r3, [r6, #0]
 800b20e:	2000      	movs	r0, #0
 800b210:	bd70      	pop	{r4, r5, r6, pc}
 800b212:	f000 f9d4 	bl	800b5be <__malloc_lock>
 800b216:	4a21      	ldr	r2, [pc, #132]	; (800b29c <_malloc_r+0xac>)
 800b218:	6814      	ldr	r4, [r2, #0]
 800b21a:	4621      	mov	r1, r4
 800b21c:	b991      	cbnz	r1, 800b244 <_malloc_r+0x54>
 800b21e:	4c20      	ldr	r4, [pc, #128]	; (800b2a0 <_malloc_r+0xb0>)
 800b220:	6823      	ldr	r3, [r4, #0]
 800b222:	b91b      	cbnz	r3, 800b22c <_malloc_r+0x3c>
 800b224:	4630      	mov	r0, r6
 800b226:	f000 f98f 	bl	800b548 <_sbrk_r>
 800b22a:	6020      	str	r0, [r4, #0]
 800b22c:	4629      	mov	r1, r5
 800b22e:	4630      	mov	r0, r6
 800b230:	f000 f98a 	bl	800b548 <_sbrk_r>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d124      	bne.n	800b282 <_malloc_r+0x92>
 800b238:	230c      	movs	r3, #12
 800b23a:	6033      	str	r3, [r6, #0]
 800b23c:	4630      	mov	r0, r6
 800b23e:	f000 f9bf 	bl	800b5c0 <__malloc_unlock>
 800b242:	e7e4      	b.n	800b20e <_malloc_r+0x1e>
 800b244:	680b      	ldr	r3, [r1, #0]
 800b246:	1b5b      	subs	r3, r3, r5
 800b248:	d418      	bmi.n	800b27c <_malloc_r+0x8c>
 800b24a:	2b0b      	cmp	r3, #11
 800b24c:	d90f      	bls.n	800b26e <_malloc_r+0x7e>
 800b24e:	600b      	str	r3, [r1, #0]
 800b250:	50cd      	str	r5, [r1, r3]
 800b252:	18cc      	adds	r4, r1, r3
 800b254:	4630      	mov	r0, r6
 800b256:	f000 f9b3 	bl	800b5c0 <__malloc_unlock>
 800b25a:	f104 000b 	add.w	r0, r4, #11
 800b25e:	1d23      	adds	r3, r4, #4
 800b260:	f020 0007 	bic.w	r0, r0, #7
 800b264:	1ac3      	subs	r3, r0, r3
 800b266:	d0d3      	beq.n	800b210 <_malloc_r+0x20>
 800b268:	425a      	negs	r2, r3
 800b26a:	50e2      	str	r2, [r4, r3]
 800b26c:	e7d0      	b.n	800b210 <_malloc_r+0x20>
 800b26e:	428c      	cmp	r4, r1
 800b270:	684b      	ldr	r3, [r1, #4]
 800b272:	bf16      	itet	ne
 800b274:	6063      	strne	r3, [r4, #4]
 800b276:	6013      	streq	r3, [r2, #0]
 800b278:	460c      	movne	r4, r1
 800b27a:	e7eb      	b.n	800b254 <_malloc_r+0x64>
 800b27c:	460c      	mov	r4, r1
 800b27e:	6849      	ldr	r1, [r1, #4]
 800b280:	e7cc      	b.n	800b21c <_malloc_r+0x2c>
 800b282:	1cc4      	adds	r4, r0, #3
 800b284:	f024 0403 	bic.w	r4, r4, #3
 800b288:	42a0      	cmp	r0, r4
 800b28a:	d005      	beq.n	800b298 <_malloc_r+0xa8>
 800b28c:	1a21      	subs	r1, r4, r0
 800b28e:	4630      	mov	r0, r6
 800b290:	f000 f95a 	bl	800b548 <_sbrk_r>
 800b294:	3001      	adds	r0, #1
 800b296:	d0cf      	beq.n	800b238 <_malloc_r+0x48>
 800b298:	6025      	str	r5, [r4, #0]
 800b29a:	e7db      	b.n	800b254 <_malloc_r+0x64>
 800b29c:	2000076c 	.word	0x2000076c
 800b2a0:	20000770 	.word	0x20000770

0800b2a4 <__ssputs_r>:
 800b2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a8:	688e      	ldr	r6, [r1, #8]
 800b2aa:	429e      	cmp	r6, r3
 800b2ac:	4682      	mov	sl, r0
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	4690      	mov	r8, r2
 800b2b2:	4699      	mov	r9, r3
 800b2b4:	d837      	bhi.n	800b326 <__ssputs_r+0x82>
 800b2b6:	898a      	ldrh	r2, [r1, #12]
 800b2b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2bc:	d031      	beq.n	800b322 <__ssputs_r+0x7e>
 800b2be:	6825      	ldr	r5, [r4, #0]
 800b2c0:	6909      	ldr	r1, [r1, #16]
 800b2c2:	1a6f      	subs	r7, r5, r1
 800b2c4:	6965      	ldr	r5, [r4, #20]
 800b2c6:	2302      	movs	r3, #2
 800b2c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2cc:	fb95 f5f3 	sdiv	r5, r5, r3
 800b2d0:	f109 0301 	add.w	r3, r9, #1
 800b2d4:	443b      	add	r3, r7
 800b2d6:	429d      	cmp	r5, r3
 800b2d8:	bf38      	it	cc
 800b2da:	461d      	movcc	r5, r3
 800b2dc:	0553      	lsls	r3, r2, #21
 800b2de:	d530      	bpl.n	800b342 <__ssputs_r+0x9e>
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	f7ff ff85 	bl	800b1f0 <_malloc_r>
 800b2e6:	4606      	mov	r6, r0
 800b2e8:	b950      	cbnz	r0, 800b300 <__ssputs_r+0x5c>
 800b2ea:	230c      	movs	r3, #12
 800b2ec:	f8ca 3000 	str.w	r3, [sl]
 800b2f0:	89a3      	ldrh	r3, [r4, #12]
 800b2f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2f6:	81a3      	strh	r3, [r4, #12]
 800b2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b300:	463a      	mov	r2, r7
 800b302:	6921      	ldr	r1, [r4, #16]
 800b304:	f7ff fc32 	bl	800ab6c <memcpy>
 800b308:	89a3      	ldrh	r3, [r4, #12]
 800b30a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b30e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b312:	81a3      	strh	r3, [r4, #12]
 800b314:	6126      	str	r6, [r4, #16]
 800b316:	6165      	str	r5, [r4, #20]
 800b318:	443e      	add	r6, r7
 800b31a:	1bed      	subs	r5, r5, r7
 800b31c:	6026      	str	r6, [r4, #0]
 800b31e:	60a5      	str	r5, [r4, #8]
 800b320:	464e      	mov	r6, r9
 800b322:	454e      	cmp	r6, r9
 800b324:	d900      	bls.n	800b328 <__ssputs_r+0x84>
 800b326:	464e      	mov	r6, r9
 800b328:	4632      	mov	r2, r6
 800b32a:	4641      	mov	r1, r8
 800b32c:	6820      	ldr	r0, [r4, #0]
 800b32e:	f000 f92d 	bl	800b58c <memmove>
 800b332:	68a3      	ldr	r3, [r4, #8]
 800b334:	1b9b      	subs	r3, r3, r6
 800b336:	60a3      	str	r3, [r4, #8]
 800b338:	6823      	ldr	r3, [r4, #0]
 800b33a:	441e      	add	r6, r3
 800b33c:	6026      	str	r6, [r4, #0]
 800b33e:	2000      	movs	r0, #0
 800b340:	e7dc      	b.n	800b2fc <__ssputs_r+0x58>
 800b342:	462a      	mov	r2, r5
 800b344:	f000 f93d 	bl	800b5c2 <_realloc_r>
 800b348:	4606      	mov	r6, r0
 800b34a:	2800      	cmp	r0, #0
 800b34c:	d1e2      	bne.n	800b314 <__ssputs_r+0x70>
 800b34e:	6921      	ldr	r1, [r4, #16]
 800b350:	4650      	mov	r0, sl
 800b352:	f7ff feff 	bl	800b154 <_free_r>
 800b356:	e7c8      	b.n	800b2ea <__ssputs_r+0x46>

0800b358 <_svfiprintf_r>:
 800b358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b35c:	461d      	mov	r5, r3
 800b35e:	898b      	ldrh	r3, [r1, #12]
 800b360:	061f      	lsls	r7, r3, #24
 800b362:	b09d      	sub	sp, #116	; 0x74
 800b364:	4680      	mov	r8, r0
 800b366:	460c      	mov	r4, r1
 800b368:	4616      	mov	r6, r2
 800b36a:	d50f      	bpl.n	800b38c <_svfiprintf_r+0x34>
 800b36c:	690b      	ldr	r3, [r1, #16]
 800b36e:	b96b      	cbnz	r3, 800b38c <_svfiprintf_r+0x34>
 800b370:	2140      	movs	r1, #64	; 0x40
 800b372:	f7ff ff3d 	bl	800b1f0 <_malloc_r>
 800b376:	6020      	str	r0, [r4, #0]
 800b378:	6120      	str	r0, [r4, #16]
 800b37a:	b928      	cbnz	r0, 800b388 <_svfiprintf_r+0x30>
 800b37c:	230c      	movs	r3, #12
 800b37e:	f8c8 3000 	str.w	r3, [r8]
 800b382:	f04f 30ff 	mov.w	r0, #4294967295
 800b386:	e0c8      	b.n	800b51a <_svfiprintf_r+0x1c2>
 800b388:	2340      	movs	r3, #64	; 0x40
 800b38a:	6163      	str	r3, [r4, #20]
 800b38c:	2300      	movs	r3, #0
 800b38e:	9309      	str	r3, [sp, #36]	; 0x24
 800b390:	2320      	movs	r3, #32
 800b392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b396:	2330      	movs	r3, #48	; 0x30
 800b398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b39c:	9503      	str	r5, [sp, #12]
 800b39e:	f04f 0b01 	mov.w	fp, #1
 800b3a2:	4637      	mov	r7, r6
 800b3a4:	463d      	mov	r5, r7
 800b3a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b3aa:	b10b      	cbz	r3, 800b3b0 <_svfiprintf_r+0x58>
 800b3ac:	2b25      	cmp	r3, #37	; 0x25
 800b3ae:	d13e      	bne.n	800b42e <_svfiprintf_r+0xd6>
 800b3b0:	ebb7 0a06 	subs.w	sl, r7, r6
 800b3b4:	d00b      	beq.n	800b3ce <_svfiprintf_r+0x76>
 800b3b6:	4653      	mov	r3, sl
 800b3b8:	4632      	mov	r2, r6
 800b3ba:	4621      	mov	r1, r4
 800b3bc:	4640      	mov	r0, r8
 800b3be:	f7ff ff71 	bl	800b2a4 <__ssputs_r>
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	f000 80a4 	beq.w	800b510 <_svfiprintf_r+0x1b8>
 800b3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ca:	4453      	add	r3, sl
 800b3cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ce:	783b      	ldrb	r3, [r7, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f000 809d 	beq.w	800b510 <_svfiprintf_r+0x1b8>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3e0:	9304      	str	r3, [sp, #16]
 800b3e2:	9307      	str	r3, [sp, #28]
 800b3e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3e8:	931a      	str	r3, [sp, #104]	; 0x68
 800b3ea:	462f      	mov	r7, r5
 800b3ec:	2205      	movs	r2, #5
 800b3ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b3f2:	4850      	ldr	r0, [pc, #320]	; (800b534 <_svfiprintf_r+0x1dc>)
 800b3f4:	f7f4 ff14 	bl	8000220 <memchr>
 800b3f8:	9b04      	ldr	r3, [sp, #16]
 800b3fa:	b9d0      	cbnz	r0, 800b432 <_svfiprintf_r+0xda>
 800b3fc:	06d9      	lsls	r1, r3, #27
 800b3fe:	bf44      	itt	mi
 800b400:	2220      	movmi	r2, #32
 800b402:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b406:	071a      	lsls	r2, r3, #28
 800b408:	bf44      	itt	mi
 800b40a:	222b      	movmi	r2, #43	; 0x2b
 800b40c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b410:	782a      	ldrb	r2, [r5, #0]
 800b412:	2a2a      	cmp	r2, #42	; 0x2a
 800b414:	d015      	beq.n	800b442 <_svfiprintf_r+0xea>
 800b416:	9a07      	ldr	r2, [sp, #28]
 800b418:	462f      	mov	r7, r5
 800b41a:	2000      	movs	r0, #0
 800b41c:	250a      	movs	r5, #10
 800b41e:	4639      	mov	r1, r7
 800b420:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b424:	3b30      	subs	r3, #48	; 0x30
 800b426:	2b09      	cmp	r3, #9
 800b428:	d94d      	bls.n	800b4c6 <_svfiprintf_r+0x16e>
 800b42a:	b1b8      	cbz	r0, 800b45c <_svfiprintf_r+0x104>
 800b42c:	e00f      	b.n	800b44e <_svfiprintf_r+0xf6>
 800b42e:	462f      	mov	r7, r5
 800b430:	e7b8      	b.n	800b3a4 <_svfiprintf_r+0x4c>
 800b432:	4a40      	ldr	r2, [pc, #256]	; (800b534 <_svfiprintf_r+0x1dc>)
 800b434:	1a80      	subs	r0, r0, r2
 800b436:	fa0b f000 	lsl.w	r0, fp, r0
 800b43a:	4318      	orrs	r0, r3
 800b43c:	9004      	str	r0, [sp, #16]
 800b43e:	463d      	mov	r5, r7
 800b440:	e7d3      	b.n	800b3ea <_svfiprintf_r+0x92>
 800b442:	9a03      	ldr	r2, [sp, #12]
 800b444:	1d11      	adds	r1, r2, #4
 800b446:	6812      	ldr	r2, [r2, #0]
 800b448:	9103      	str	r1, [sp, #12]
 800b44a:	2a00      	cmp	r2, #0
 800b44c:	db01      	blt.n	800b452 <_svfiprintf_r+0xfa>
 800b44e:	9207      	str	r2, [sp, #28]
 800b450:	e004      	b.n	800b45c <_svfiprintf_r+0x104>
 800b452:	4252      	negs	r2, r2
 800b454:	f043 0302 	orr.w	r3, r3, #2
 800b458:	9207      	str	r2, [sp, #28]
 800b45a:	9304      	str	r3, [sp, #16]
 800b45c:	783b      	ldrb	r3, [r7, #0]
 800b45e:	2b2e      	cmp	r3, #46	; 0x2e
 800b460:	d10c      	bne.n	800b47c <_svfiprintf_r+0x124>
 800b462:	787b      	ldrb	r3, [r7, #1]
 800b464:	2b2a      	cmp	r3, #42	; 0x2a
 800b466:	d133      	bne.n	800b4d0 <_svfiprintf_r+0x178>
 800b468:	9b03      	ldr	r3, [sp, #12]
 800b46a:	1d1a      	adds	r2, r3, #4
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	9203      	str	r2, [sp, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	bfb8      	it	lt
 800b474:	f04f 33ff 	movlt.w	r3, #4294967295
 800b478:	3702      	adds	r7, #2
 800b47a:	9305      	str	r3, [sp, #20]
 800b47c:	4d2e      	ldr	r5, [pc, #184]	; (800b538 <_svfiprintf_r+0x1e0>)
 800b47e:	7839      	ldrb	r1, [r7, #0]
 800b480:	2203      	movs	r2, #3
 800b482:	4628      	mov	r0, r5
 800b484:	f7f4 fecc 	bl	8000220 <memchr>
 800b488:	b138      	cbz	r0, 800b49a <_svfiprintf_r+0x142>
 800b48a:	2340      	movs	r3, #64	; 0x40
 800b48c:	1b40      	subs	r0, r0, r5
 800b48e:	fa03 f000 	lsl.w	r0, r3, r0
 800b492:	9b04      	ldr	r3, [sp, #16]
 800b494:	4303      	orrs	r3, r0
 800b496:	3701      	adds	r7, #1
 800b498:	9304      	str	r3, [sp, #16]
 800b49a:	7839      	ldrb	r1, [r7, #0]
 800b49c:	4827      	ldr	r0, [pc, #156]	; (800b53c <_svfiprintf_r+0x1e4>)
 800b49e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4a2:	2206      	movs	r2, #6
 800b4a4:	1c7e      	adds	r6, r7, #1
 800b4a6:	f7f4 febb 	bl	8000220 <memchr>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d038      	beq.n	800b520 <_svfiprintf_r+0x1c8>
 800b4ae:	4b24      	ldr	r3, [pc, #144]	; (800b540 <_svfiprintf_r+0x1e8>)
 800b4b0:	bb13      	cbnz	r3, 800b4f8 <_svfiprintf_r+0x1a0>
 800b4b2:	9b03      	ldr	r3, [sp, #12]
 800b4b4:	3307      	adds	r3, #7
 800b4b6:	f023 0307 	bic.w	r3, r3, #7
 800b4ba:	3308      	adds	r3, #8
 800b4bc:	9303      	str	r3, [sp, #12]
 800b4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c0:	444b      	add	r3, r9
 800b4c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b4c4:	e76d      	b.n	800b3a2 <_svfiprintf_r+0x4a>
 800b4c6:	fb05 3202 	mla	r2, r5, r2, r3
 800b4ca:	2001      	movs	r0, #1
 800b4cc:	460f      	mov	r7, r1
 800b4ce:	e7a6      	b.n	800b41e <_svfiprintf_r+0xc6>
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	3701      	adds	r7, #1
 800b4d4:	9305      	str	r3, [sp, #20]
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	250a      	movs	r5, #10
 800b4da:	4638      	mov	r0, r7
 800b4dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4e0:	3a30      	subs	r2, #48	; 0x30
 800b4e2:	2a09      	cmp	r2, #9
 800b4e4:	d903      	bls.n	800b4ee <_svfiprintf_r+0x196>
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d0c8      	beq.n	800b47c <_svfiprintf_r+0x124>
 800b4ea:	9105      	str	r1, [sp, #20]
 800b4ec:	e7c6      	b.n	800b47c <_svfiprintf_r+0x124>
 800b4ee:	fb05 2101 	mla	r1, r5, r1, r2
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	4607      	mov	r7, r0
 800b4f6:	e7f0      	b.n	800b4da <_svfiprintf_r+0x182>
 800b4f8:	ab03      	add	r3, sp, #12
 800b4fa:	9300      	str	r3, [sp, #0]
 800b4fc:	4622      	mov	r2, r4
 800b4fe:	4b11      	ldr	r3, [pc, #68]	; (800b544 <_svfiprintf_r+0x1ec>)
 800b500:	a904      	add	r1, sp, #16
 800b502:	4640      	mov	r0, r8
 800b504:	f7fe f8dc 	bl	80096c0 <_printf_float>
 800b508:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b50c:	4681      	mov	r9, r0
 800b50e:	d1d6      	bne.n	800b4be <_svfiprintf_r+0x166>
 800b510:	89a3      	ldrh	r3, [r4, #12]
 800b512:	065b      	lsls	r3, r3, #25
 800b514:	f53f af35 	bmi.w	800b382 <_svfiprintf_r+0x2a>
 800b518:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b51a:	b01d      	add	sp, #116	; 0x74
 800b51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b520:	ab03      	add	r3, sp, #12
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	4622      	mov	r2, r4
 800b526:	4b07      	ldr	r3, [pc, #28]	; (800b544 <_svfiprintf_r+0x1ec>)
 800b528:	a904      	add	r1, sp, #16
 800b52a:	4640      	mov	r0, r8
 800b52c:	f7fe fb7e 	bl	8009c2c <_printf_i>
 800b530:	e7ea      	b.n	800b508 <_svfiprintf_r+0x1b0>
 800b532:	bf00      	nop
 800b534:	0800b7e4 	.word	0x0800b7e4
 800b538:	0800b7ea 	.word	0x0800b7ea
 800b53c:	0800b7ee 	.word	0x0800b7ee
 800b540:	080096c1 	.word	0x080096c1
 800b544:	0800b2a5 	.word	0x0800b2a5

0800b548 <_sbrk_r>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	4c06      	ldr	r4, [pc, #24]	; (800b564 <_sbrk_r+0x1c>)
 800b54c:	2300      	movs	r3, #0
 800b54e:	4605      	mov	r5, r0
 800b550:	4608      	mov	r0, r1
 800b552:	6023      	str	r3, [r4, #0]
 800b554:	f7f6 fc94 	bl	8001e80 <_sbrk>
 800b558:	1c43      	adds	r3, r0, #1
 800b55a:	d102      	bne.n	800b562 <_sbrk_r+0x1a>
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	b103      	cbz	r3, 800b562 <_sbrk_r+0x1a>
 800b560:	602b      	str	r3, [r5, #0]
 800b562:	bd38      	pop	{r3, r4, r5, pc}
 800b564:	200009d8 	.word	0x200009d8

0800b568 <__ascii_mbtowc>:
 800b568:	b082      	sub	sp, #8
 800b56a:	b901      	cbnz	r1, 800b56e <__ascii_mbtowc+0x6>
 800b56c:	a901      	add	r1, sp, #4
 800b56e:	b142      	cbz	r2, 800b582 <__ascii_mbtowc+0x1a>
 800b570:	b14b      	cbz	r3, 800b586 <__ascii_mbtowc+0x1e>
 800b572:	7813      	ldrb	r3, [r2, #0]
 800b574:	600b      	str	r3, [r1, #0]
 800b576:	7812      	ldrb	r2, [r2, #0]
 800b578:	1c10      	adds	r0, r2, #0
 800b57a:	bf18      	it	ne
 800b57c:	2001      	movne	r0, #1
 800b57e:	b002      	add	sp, #8
 800b580:	4770      	bx	lr
 800b582:	4610      	mov	r0, r2
 800b584:	e7fb      	b.n	800b57e <__ascii_mbtowc+0x16>
 800b586:	f06f 0001 	mvn.w	r0, #1
 800b58a:	e7f8      	b.n	800b57e <__ascii_mbtowc+0x16>

0800b58c <memmove>:
 800b58c:	4288      	cmp	r0, r1
 800b58e:	b510      	push	{r4, lr}
 800b590:	eb01 0302 	add.w	r3, r1, r2
 800b594:	d807      	bhi.n	800b5a6 <memmove+0x1a>
 800b596:	1e42      	subs	r2, r0, #1
 800b598:	4299      	cmp	r1, r3
 800b59a:	d00a      	beq.n	800b5b2 <memmove+0x26>
 800b59c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b5a4:	e7f8      	b.n	800b598 <memmove+0xc>
 800b5a6:	4283      	cmp	r3, r0
 800b5a8:	d9f5      	bls.n	800b596 <memmove+0xa>
 800b5aa:	1881      	adds	r1, r0, r2
 800b5ac:	1ad2      	subs	r2, r2, r3
 800b5ae:	42d3      	cmn	r3, r2
 800b5b0:	d100      	bne.n	800b5b4 <memmove+0x28>
 800b5b2:	bd10      	pop	{r4, pc}
 800b5b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b5bc:	e7f7      	b.n	800b5ae <memmove+0x22>

0800b5be <__malloc_lock>:
 800b5be:	4770      	bx	lr

0800b5c0 <__malloc_unlock>:
 800b5c0:	4770      	bx	lr

0800b5c2 <_realloc_r>:
 800b5c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c4:	4607      	mov	r7, r0
 800b5c6:	4614      	mov	r4, r2
 800b5c8:	460e      	mov	r6, r1
 800b5ca:	b921      	cbnz	r1, 800b5d6 <_realloc_r+0x14>
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b5d2:	f7ff be0d 	b.w	800b1f0 <_malloc_r>
 800b5d6:	b922      	cbnz	r2, 800b5e2 <_realloc_r+0x20>
 800b5d8:	f7ff fdbc 	bl	800b154 <_free_r>
 800b5dc:	4625      	mov	r5, r4
 800b5de:	4628      	mov	r0, r5
 800b5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e2:	f000 f821 	bl	800b628 <_malloc_usable_size_r>
 800b5e6:	42a0      	cmp	r0, r4
 800b5e8:	d20f      	bcs.n	800b60a <_realloc_r+0x48>
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	f7ff fdff 	bl	800b1f0 <_malloc_r>
 800b5f2:	4605      	mov	r5, r0
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	d0f2      	beq.n	800b5de <_realloc_r+0x1c>
 800b5f8:	4631      	mov	r1, r6
 800b5fa:	4622      	mov	r2, r4
 800b5fc:	f7ff fab6 	bl	800ab6c <memcpy>
 800b600:	4631      	mov	r1, r6
 800b602:	4638      	mov	r0, r7
 800b604:	f7ff fda6 	bl	800b154 <_free_r>
 800b608:	e7e9      	b.n	800b5de <_realloc_r+0x1c>
 800b60a:	4635      	mov	r5, r6
 800b60c:	e7e7      	b.n	800b5de <_realloc_r+0x1c>

0800b60e <__ascii_wctomb>:
 800b60e:	b149      	cbz	r1, 800b624 <__ascii_wctomb+0x16>
 800b610:	2aff      	cmp	r2, #255	; 0xff
 800b612:	bf85      	ittet	hi
 800b614:	238a      	movhi	r3, #138	; 0x8a
 800b616:	6003      	strhi	r3, [r0, #0]
 800b618:	700a      	strbls	r2, [r1, #0]
 800b61a:	f04f 30ff 	movhi.w	r0, #4294967295
 800b61e:	bf98      	it	ls
 800b620:	2001      	movls	r0, #1
 800b622:	4770      	bx	lr
 800b624:	4608      	mov	r0, r1
 800b626:	4770      	bx	lr

0800b628 <_malloc_usable_size_r>:
 800b628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b62c:	1f18      	subs	r0, r3, #4
 800b62e:	2b00      	cmp	r3, #0
 800b630:	bfbc      	itt	lt
 800b632:	580b      	ldrlt	r3, [r1, r0]
 800b634:	18c0      	addlt	r0, r0, r3
 800b636:	4770      	bx	lr

0800b638 <_init>:
 800b638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63a:	bf00      	nop
 800b63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b63e:	bc08      	pop	{r3}
 800b640:	469e      	mov	lr, r3
 800b642:	4770      	bx	lr

0800b644 <_fini>:
 800b644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b646:	bf00      	nop
 800b648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b64a:	bc08      	pop	{r3}
 800b64c:	469e      	mov	lr, r3
 800b64e:	4770      	bx	lr
